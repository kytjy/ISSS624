---
title: "Hands-on Exercise 1.2: Choropleth Mapping with R"
---

## Overview

-   Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

-   In this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package.

## Getting Started

In this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

The code chunk below will be used to install and load these packages in RStudio.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

> Notice that, we only need to install **tidyverse** instead of **readr**, **tidyr** and **dplyr** individually.

## Importing Data into R

### The Data

Two data set will be used to create the choropleth map:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format.

    -   Downloaded from [data.gov.sg](https://data.gov.sg/)

    -   Geospatial data

    -   Consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014

```{=html}
<!-- -->
```
-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`).

    -   Aspatial data fie.

    -   Downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/)

    -   Although it does not contain any coordinates values, but it\'s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### Importing Geospatial Data into R

-   The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn="data/geospatial",
                layer = "MP14_SUBZONE_WEB_PL")
```

-   Examine the content of `mpsz` by using the code chunk below:

```{r}
mpsz
```

### Importing Attribute Data into R

-   Next, we will import *respopagsex2000to2018.csv* file into RStudio and save the file into an R dataframe called *popdata*.

-   The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### Data Preparation

-   Before a thematic map can be prepared, you are required to prepare a data table with year 2020 values.

-   The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

    -   YOUNG: age group 0 to 4 until age group 20 to 24,

    -   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

    -   AGED: age group 65 and above,

    -   TOTAL: all age group, and

    -   DEPENDENCY: the ratio between young and aged against economy active group

#### Data Wrangling

The following data wrangling and transformation functions will be used:

-   *pivot_wider()* of **tidyr** package, and

-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
popdata2020 <- popdata %>% 
  filter(Time==2020) %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(`POP`=sum(`Pop`)) %>% 
  ungroup() %>% 
  pivot_wider(names_from=AG,
              values_from = POP) %>% 
  mutate(YOUNG=rowSums(.[3:6])
         +rowSums(.[12])) %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
  rowSums(.[13:15])) %>% 
  mutate(`AGED`=rowSums(.[16:21])) %>% 
  mutate(`TOTAL`=rowSums(.[3:21])) %>% 
  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)
  / `ECONOMY ACTIVE`) %>% 
    select(`PA`, `SZ`, `YOUNG`, 
           `ECONOMY ACTIVE`, `AGED`, 
           `TOTAL`, `DEPENDENCY`)
```

#### Joining the attribute data and geospatial data

1.  Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase.
    1.  This is because the values of PA and SZ fields are made up of upper- and lowercase.
    2.  On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%  
  mutate_at(.vars=vars(PA, SZ),
            .funs=funs(toupper)) %>% 
  filter(`ECONOMY ACTIVE` > 0)
```

2.  Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                  by = c("SUBZONE_N" = "SZ"))
```

-   *left_join()* of **dplyr** package is used with `mpsz` simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data Using *tmap*

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### Plotting a choropleth map quickly by using *qtm()*
