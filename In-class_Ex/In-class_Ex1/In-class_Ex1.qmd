---
title: "In-class Exercise 1: First Date with Geospatial Data Analytics"
date: "18 November 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true #all the codes will appear
  eval: true #all the codes will run
  warning: false #dont display if there are any warnings
editor: visual
---

## Task

-   Requirement: To prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating *Passenger Volume by Origin Destination Bus Stops* and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.

The specific task of this in-class exercise are to:

-   Import *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall in to RStudio environment,
-   Import geospatial data in ESRI shapefile format into sf data frame format,
-   Perform data wrangling by using appropriate functions from tidyverse and sf pakcges, and
-   Visualise the distribution of passenger trip by using tmap methods and functions.

## Getting Started

::: panel-tabset
## Task
The code chunk below loads the necessary packages:

-   tmap: for thematic mapping
-   sf: for geospatial data handling
-   tidyverse: for non-spatial data handling

This is similar to using library() to call the packages. Note that pacman itself is not loaded.

## Solution
```{r}
pacman::p_load(sf,tmap,tidyverse)
```
:::

## Importing the OD data

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* dataset downloaded from LTA DataMall by using `read_csv()` or **readr** package.

::: panel-tabset
## Task
Import origin_destination_bus_202308.csv downloaded from LTA DataMall into RStudio and save it as a tibble data frame called odbus.

## Solution
```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```
:::

A quick check of odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type.

```{r}
glimpse(odbus)
```

::: panel-tabset
## Task
Using appropriate tidyverse functions to convert these data values into factor data type.

## Solution
```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```
:::

Notice that both of them are in factor data type now.

```{r}
glimpse(odbus)
```

### Extracting the study data

::: panel-tabset
## Task
For the purpose of this exercise, we will extract commuting flows on weekday and between 7 and 9 o'clock time intervals. Call the output tibble data table as origin7_9.

## Solution
```{r}
origin7_9 <- odbus %>% 
  filter(DAY_TYPE=="WEEKDAY") %>% 
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>% 
  group_by(ORIGIN_PT_CODE) %>% 
  summarise(TRIPS = sum(TOTAL_TRIPS))
```
:::

It should look similar to the data table below.

```{r}
knitr::kable(head(origin7_9))
```

We will save the output in rds format for future used.

```{r}
write_rds(origin7_9, "data/rds/origin7_9.rds")
```

The code chunk below will be used to import the save origin7_9.rds into R environment.

```{r}
origin7_9 <- read_rds("data/rds/origin7_9.rds")
```

## Working with Geospatial Data

In this section, you are required to import two shapefile into RStudio, they are:

-   BusStop: This data provides the location of bus stop as at last quarter of 2022.
-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

### Importing geospatial data

Two geospatial data will be used in this exercise.

Note that both geometry formats are different, we will need to transform the coordinates to 3414 in order to have the same projection system.

::: panel-tabset
## Task
Import BusStop downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.

## Solution
```{r}
busstop <-st_read(dsn="data/geospatial",
                  layer="BusStop") %>% 
  st_transform(crs=3414)
```
:::

The structure of busstop sf tibble data frame should look as below.

```{r}
glimpse(busstop)
```

::: panel-tabset
## Task
Import MPSZ-2019 downloaded from eLearn into RStudio and save it as a sf data frame called mpsz.

## Solution
```{r}
mpsz <- st_read(dsn="data/geospatial",
                layer = "MPSZ-2019") %>% 
  st_transform(crs=3414)
```
:::

The structure of mpsz sf tibble data frame should look as below.

```{r}
glimpse(mpsz)
```

::: callout-note
-   `st_read()` function of sf package is used to import the shapefile into R as sf data frame.
-   `st_transform()` function of sf package is used to transform the projection to crs 3414.
:::

## **Geospatial Data Wrangling**

### **Combining Busstop and mpsz**

Code chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

::: callout-note
-   `st_intersection()` is used to perform point and polygon overlay and the output will be in point sf object.
-   `select()` of dplyr package is then used to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.
-   5 bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.
:::

Before moving to the next step, it is wise to save the output into rds format.

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")  
```

::: panel-tabset
## Task
Next, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.

## Solution
```{r}
origin_data <- left_join(origin7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C)
```
:::

Before continue, it is a good practice for us to check for duplicating records.

```{r}
duplicate <- origin_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
origin_data <- unique(origin_data)
```

It will be a good practice to confirm if the duplicating records issue has been addressed fully.

::: panel-tabset
## Task
Next, write a code chunk to update od_data data frame with the planning subzone codes.

## Solution
```{r}
mpsz_origtrip <- left_join(mpsz, 
                           origin_data,
                           by = c("SUBZONE_C" = "ORIGIN_SZ"))
```
:::

## Choropleth Visualisation

::: panel-tabset
## Task
Prepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.

## Solution
```{r}
tm_shape(mpsz_origtrip)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated at planning sub-zone level",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
:::
