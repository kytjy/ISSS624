{
  "hash": "270ce96122630943eecec5c272c705ae",
  "result": {
    "markdown": "---\ntitle: \"In-Class Exercise 5: Spatial Econometrics Interaction Modelling\"\ndate: \"16 December 2023\"\ndate-modified: \"last-modified\"\neditor: visual\ntoc-depth: 4\nexecute:\n  freeze: auto\n  echo: true #all the codes will appear\n  eval: true #all the codes will run\n  warning: false #dont display if there are any warnings\nformat: \n  html:\n    code-fold: false\n    code-overflow: scroll\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n---\n\n\n# 1 Overview\n\nSpatial Interaction Models have often used to explain origin-destination (OD) flows that arise in fields such as public bus commuting.  These models rely on a function of the distance between the origin and destination as well as explanatory variables pertaining to characteristics of both origin and destination locations.  Spatial interaction models assume that using distance as an explanatory variable will eradicate the spatial dependence among the sample of OD flows between pairs of locations. The notion that use of distance functions in conventional spatial interaction models effectively captures spatial dependence in interregional flows has long been challenged. In view of the limitation Spatial Interaction Models to account for spatial dependence, Spatial Econometric Interaction Models have been introduce James P. LeSage and R. Kelley Pace (2009).      \n\nIn this in-class exercise, you will gain hands-on exercise on using spflow package, a R library specially developed for calibrating Spatial Econometric Interaction Models. By the end of this in-class exercise, you will acquire the skills to:\n\n- extract explanatory variables from secondary source,\n- assemble and derive explanatory variables from publicly available geospatial data,\n- integrate these explanatory variable into a tidy variables tibble data.frame.\n- calibrate Spatial Econometric Interaction Models by using spflow.\n\n# 2 Getting Started\n\nIn this exercise, the development version (0.1.0.9010) of **spflow** will be used instead of the released version (0.1.0).  The code chunk below will be used to install the development version of **spflow** package.\n\n\nTo download the development version of **spflow** package\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"LukeCe/spflow\", force=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\user1\\AppData\\Local\\Temp\\RtmpgJWxp1\\remotes6ed87c2330b3\\LukeCe-spflow-df91367/DESCRIPTION' ... OK\n* preparing 'spflow':\n* checking DESCRIPTION meta-information ... OK\n* installing the package to process help pages\nLoading required namespace: spflow\n* saving partial Rd database\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'spflow_0.1.0.9010.tar.gz'\n\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, spdep, sp, Matrix, \n               spflow, reshape2, knitr, tidyverse)\n```\n:::\n\n\n\n# 3 Data Preparation\n\nThree data sets are required:\n-   Spatial weights\n-   tibble data.frame consisting of origin, destination, flows, and distances between O-D, and\n-   tibble data.frame consisting of the explanatory variables.\n\n## 3.1 Building Geographical Area\n\nFor the purpose of this study, URA Master Planning 2019 Planning Subzone GIS data will be used.\n\nIn the code chunk below, *MPSZ-2019* shapefile will be import into R environment as a sf tibble data.frame called *mpsz*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn=\"data/geospatial\",\n                layer=\"MPSZ-2019\") %>% \n  st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n-   `st_read()` is used to import the shapefile into R environment as an sf object.\n-   `st_transform()` is used to convert the projection of the input sf object.\n\nNext, the code chunk below will be used to import *BusStop* shapefile into R environment as an sf object called *busstop*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5159 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48280.78 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n:::\n\nIn this study, our analysis will be focused on planning subzone with bus stop. In view of this, the code chunk below will be used to perform Point-in-Polygon count analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$`BUSSTOP_COUNT`<- lengths(\n  st_intersects(\n    mpsz, busstop))\n```\n:::\n\n\nNext, code chunk below will be used to select planning subzone with bus stops.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_busstop <- mpsz %>%\n  filter(BUSSTOP_COUNT > 0)\n\nmpsz_busstop\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 313 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21448.47 xmax: 50271.73 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n            SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1    INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n2      ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n3        FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n4    MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n5             SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n6      CITY TERMINALS    BMSZ17      BUKIT MERAH         BM CENTRAL REGION\n7               ANSON    DTSZ10    DOWNTOWN CORE         DT CENTRAL REGION\n8        STRAITS VIEW    SVSZ01     STRAITS VIEW         SV CENTRAL REGION\n9     MARITIME SQUARE    BMSZ01      BUKIT MERAH         BM CENTRAL REGION\n10 TELOK BLANGAH RISE    BMSZ15      BUKIT MERAH         BM CENTRAL REGION\n   REGION_C                       geometry BUSSTOP_COUNT\n1        CR MULTIPOLYGON (((28481.45 30...             2\n2        CR MULTIPOLYGON (((28087.34 30...            10\n3        CR MULTIPOLYGON (((29542.53 31...             6\n4        CR MULTIPOLYGON (((35279.55 30...             2\n5        CR MULTIPOLYGON (((26879.04 26...             1\n6        CR MULTIPOLYGON (((27891.15 28...            10\n7        CR MULTIPOLYGON (((29201.07 28...             5\n8        CR MULTIPOLYGON (((31269.21 28...             4\n9        CR MULTIPOLYGON (((26920.02 26...            21\n10       CR MULTIPOLYGON (((27483.57 28...            11\n```\n:::\n:::\n\nNotice that there are 313 planning subzone in this sf object.\n\n## 3.2 Preparing Spatial Weights\n\nThere are three different matrices that can be used to describe the connectivity between planning subzone.  They are: contiguity, fixed distance and adaptive distance.\n\nCode chunk below will be used to compute the three spatial weights at one goal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentroids <- suppressWarnings({\n    st_point_on_surface(st_geometry(mpsz_busstop))})\n\nmpsz_nb <- list(\n  \"by_contiguity\" = poly2nb(mpsz_busstop),\n  \"by_distance\" = dnearneigh(centroids, \n                             d1 = 0, d2 = 5000),\n  \"by_knn\" = knn2nb(knearneigh(centroids, 3))\n)\n```\n:::\n\n\n-   `poly2nb()` of **spdep** package is used to build a neighbours list based on regions with contiguous boundaries.\n-   `dnearneigh()` of spdep package is used to identifies neighbours of region centroids by Euclidean distance in the metric of the points between lower and and upper (less than or equal to) bounds.\n-   `knn2nb()` and `knearneigh()` is used to to build the adaptive spatial weights.\n-   `list()` is used to keep these tree spatial weights in one single list class called *mpsz_nb*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_nb\n```\n:::\n\nThe report reveals that at fixed distance of 5000, there are at least one planning subzone does not have any neighbour.\n\nBy distance:\nAvg = 49 = average distance (not # of neighbours)\n\nCode chunks below will be used to plot the spatial weights in `mpsz_nb`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_contiguity, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"Contiguity\") \n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_distance,\n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5)) \ntitle(\"Distance\") \n\nplot(st_geometry(mpsz))\nplot(mpsz_nb$by_knn, \n     centroids, \n     add = T, \n     col = rgb(0,0,0,\n               alpha=0.5))\ntitle(\"3 Nearest Neighbors\") \n```\n:::\n\n\nLastly, save `mpsz_nb` into an **rds** file for subsequent use by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_nb, \"data/rds/mpsz_nb.rds\")\n```\n:::\n\n\n\n## 3.3 Preparing Flow Data\n\nIn this section, you will learn how to prepare a flow data at the planning subzone level as shown in the screenshot below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus6_9 <- read_rds(\"data/rds/odbus6_9.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_mpsz <- st_intersection(busstop, mpsz) %>%\n  select(BUS_STOP_N, SUBZONE_C) %>%\n  st_drop_geometry()\n```\n:::\n\n\nNext, we are going to append the planning subzone code from busstop_mpsz data.frame onto odbus6_9 data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- left_join(odbus6_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %>%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C,\n         DESTIN_BS = DESTINATION_PT_CODE)\n```\n:::\n\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- od_data %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n```\n:::\n\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- unique(od_data)\n```\n:::\n\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\nNext, we will update od_data data frame with the planning subzone codes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- left_join(od_data , busstop_mpsz,\n            by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- od_data %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- unique(od_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- od_data %>%\n  rename(DESTIN_SZ = SUBZONE_C) %>%\n  drop_na() %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>%\n  summarise(TRIPS = sum(TRIPS))\n```\n:::\n\n\nThe `od_data` data.frame should look similar the table below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(od_data, n = 5))\n```\n\n::: {.cell-output-display}\n|ORIGIN_SZ |DESTIN_SZ | TRIPS|\n|:---------|:---------|-----:|\n|AMSZ01    |AMSZ01    |  1998|\n|AMSZ01    |AMSZ02    |  8289|\n|AMSZ01    |AMSZ03    |  8971|\n|AMSZ01    |AMSZ04    |  2252|\n|AMSZ01    |AMSZ05    |  6136|\n:::\n:::\n\n\nBefore we move to the next task, let's save od_data into an rds file by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(od_data, \"data/rds/od_data.rds\")\n```\n:::\n\n\n\n# 3.4 Computing Distance Matrix\n\nIn spatial interaction, a distance matrix is a table that shows the distance between pairs of locations. For example, in the table below we can see an Euclidean distance of 3926.0025 between MESZ01 and RVSZ05, of 3939.1079 between MESZ01 and SRSZ01, and so on. By definition, an location's distance from itself, which is shown in the main diagonal of the table, is 0.\n\n## 3.4.1 Converting from sf data.table to SpatialPolygonsDataFrame\n\nThere are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shown that computing distance matrix by using sf function took relatively longer time that sp method especially the data set is large. In view of this, sp method is used in the code chunks below.\n\nFirst [`as.Spatial()`](https://r-spatial.github.io/sf/reference/coerce-methods.html) will be used to convert *mpsz* from sf tibble data frame to SpatialPolygonsDataFrame of sp object as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sp <- as(mpsz_busstop, \"Spatial\")\nmpsz_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 313 \nextent      : 2667.538, 50271.73, 21448.47, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 7\nnames       : SUBZONE_N, SUBZONE_C, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C, BUSSTOP_COUNT \nmin values  : ADMIRALTY,    AMSZ01, ANG MO KIO,         AM, CENTRAL REGION,       CR,             1 \nmax values  :    YUNNAN,    YSSZ09,     YISHUN,         YS,    WEST REGION,       WR,            87 \n```\n:::\n:::\n\n\n\nNext, [`spDists()`](https://www.rdocumentation.org/packages/sp/versions/2.1-1/topics/spDistsN1) of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\n### 3.4.2 Computing the distance matrix\n\nNext, [`spDists()`](https://www.rdocumentation.org/packages/sp/versions/2.1-1/topics/spDistsN1) of sp package will be used to compute the Euclidean distance between the centroids of the planning subzones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDISTANCE <- spDists(mpsz_sp, \n                    longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(DISTANCE, n=c(10, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]     [,2]      [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\n [1,]    0.0000  305.737  951.8314 5254.066 4975.002 3176.159 2345.174 3455.579\n [2,]  305.7370    0.000 1045.9088 5299.849 4669.295 2873.497 2074.691 3277.921\n [3,]  951.8314 1045.909    0.0000 4303.232 5226.873 3341.212 2264.201 2890.870\n [4,] 5254.0664 5299.849 4303.2323    0.000 7707.091 6103.071 5007.197 3699.242\n [5,] 4975.0021 4669.295 5226.8731 7707.091    0.000 1893.049 3068.627 4009.437\n [6,] 3176.1592 2873.497 3341.2116 6103.071 1893.049    0.000 1200.264 2532.383\n [7,] 2345.1741 2074.691 2264.2014 5007.197 3068.627 1200.264    0.000 1709.443\n [8,] 3455.5791 3277.921 2890.8696 3699.242 4009.437 2532.383 1709.443    0.000\n [9,] 3860.6063 3612.345 4570.3316 8324.615 2766.650 2606.583 3383.338 5032.870\n[10,] 2634.7332 2358.403 3255.0325 6981.431 2752.882 1666.022 2115.640 3815.333\n          [,9]    [,10]\n [1,] 3860.606 2634.733\n [2,] 3612.345 2358.403\n [3,] 4570.332 3255.033\n [4,] 8324.615 6981.431\n [5,] 2766.650 2752.882\n [6,] 2606.583 1666.022\n [7,] 3383.338 2115.640\n [8,] 5032.870 3815.333\n [9,]    0.000 1357.426\n[10,] 1357.426    0.000\n```\n:::\n:::\n\n\nNotice that the output *dist* is a matrix object class of R. Also notice that the column heanders and row headers are not labeled with the planning subzone codes.\n\n### 3.4.3 Labelling column and row heanders of a distance matrix\n\nFirst, we will create a list sorted according to the the distance matrix by planning sub-zone code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsz_names <- mpsz_busstop$SUBZONE_C\n```\n:::\n\n\nNext we will attach `SUBZONE_C` to row and column for distance matrix matching ahead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(DISTANCE) <- paste0(sz_names)\nrownames(DISTANCE) <- paste0(sz_names)\n```\n:::\n\n\n### 3.4.4 Pivoting distance value by SUBZONE_C\n\nNext, we will pivot the distance matrix into a long table by using the row and column subzone codes as show in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- melt(DISTANCE) %>%\n  rename(DISTANCE = value)\nhead(distPair, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Var1   Var2  DISTANCE\n1  RVSZ05 RVSZ05    0.0000\n2  SRSZ01 RVSZ05  305.7370\n3  MUSZ02 RVSZ05  951.8314\n4  MPSZ05 RVSZ05 5254.0664\n5  SISZ01 RVSZ05 4975.0021\n6  BMSZ17 RVSZ05 3176.1592\n7  DTSZ10 RVSZ05 2345.1741\n8  SVSZ01 RVSZ05 3455.5791\n9  BMSZ01 RVSZ05 3860.6063\n10 BMSZ15 RVSZ05 2634.7332\n```\n:::\n:::\n\n\nThe code chunk below is used to rename the origin and destination fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistPair <- distPair %>%\n  rename(ORIGIN_SZ = Var1,\n         DESTIN_SZ = Var2)\n```\n:::\n\n\nNow, `left_join()` of **dplyr** will be used to *flow_data* dataframe and *distPair* dataframe. The output is called *flow_data1*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow_data <- distPair %>%\n  left_join (od_data) %>%\n  mutate(TRIPS = coalesce(TRIPS, 0))\n```\n:::\n\n\n`mutate(TRIPS = coalesce(TRIPS, 0)` is used to replace NA into 0\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(flow_data, n = 10))\n```\n\n::: {.cell-output-display}\n|ORIGIN_SZ |DESTIN_SZ |  DISTANCE| TRIPS|\n|:---------|:---------|---------:|-----:|\n|RVSZ05    |RVSZ05    |    0.0000|    67|\n|SRSZ01    |RVSZ05    |  305.7370|   549|\n|MUSZ02    |RVSZ05    |  951.8314|     0|\n|MPSZ05    |RVSZ05    | 5254.0664|     0|\n|SISZ01    |RVSZ05    | 4975.0021|     0|\n|BMSZ17    |RVSZ05    | 3176.1592|     0|\n|DTSZ10    |RVSZ05    | 2345.1741|     0|\n|SVSZ01    |RVSZ05    | 3455.5791|     0|\n|BMSZ01    |RVSZ05    | 3860.6063|     0|\n|BMSZ15    |RVSZ05    | 2634.7332|     0|\n:::\n:::\n\n\nBefore moving on to the next task, let's save *flow_data* into an rds file by usign the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(flow_data, \"data/rds/mpsz_flow.rds\")\n```\n:::\n\n\n## 3.5 Preparing Explanatory Variables\n\nThe third input data of **spflow** is a data.frame that contains all the explanatory variables of the geographical unit (i.e. Planning Subzone).  \n\n### 3.5.1 Population by age group variables\n\nFor the purpose of this exercise, we will include three population age-groups as the explanatory variables.  They are population age 7-12, 13-24, and 25-64.  These information are available in a data file called *pop.csv*.  \n\nThe code chunk below will be used to import *pop.csv* into R environment and save it as an tibble data.frame object called *pop*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- read_csv(\"data/aspatial/pop.csv\")\n```\n:::\n\n\nIn the code chunk below, `left_join()` of **dplyr** package is used to append the population by the three age cohorts with `mpsz_busstop` and an output sf object called `mpsz_var` is created.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_var <- mpsz_busstop %>%\n  left_join(pop,\n            by = c(\"PLN_AREA_N\" = \"PA\",\n                   \"SUBZONE_N\" = \"SZ\")) %>%\n  select(1:2, 7:11) %>%\n  rename(SZ_NAME = SUBZONE_N,\n         SZ_CODE = SUBZONE_C)\n```\n:::\n\n\nThe `mpsz_var` should look similar the table below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(mpsz_var[, 1:6], n = 6))\n```\n\n::: {.cell-output-display}\n|SZ_NAME          |SZ_CODE | BUSSTOP_COUNT| AGE7_12| AGE13_24| AGE25_64|geometry                       |\n|:----------------|:-------|-------------:|-------:|--------:|--------:|:------------------------------|\n|INSTITUTION HILL |RVSZ05  |             2|     330|      360|     2260|MULTIPOLYGON (((28481.45 30... |\n|ROBERTSON QUAY   |SRSZ01  |            10|     320|      350|     2200|MULTIPOLYGON (((28087.34 30... |\n|FORT CANNING     |MUSZ02  |             6|       0|       10|       30|MULTIPOLYGON (((29542.53 31... |\n|MARINA EAST (MP) |MPSZ05  |             2|       0|        0|        0|MULTIPOLYGON (((35279.55 30... |\n|SENTOSA          |SISZ01  |             1|     200|      260|     1440|MULTIPOLYGON (((26879.04 26... |\n|CITY TERMINALS   |BMSZ17  |            10|       0|        0|        0|MULTIPOLYGON (((27891.15 28... |\n:::\n:::\n\n\n### 3.5.2  Deriving explanatory variables using Point-in-Polygon count\n\nFirst, we will import `schools.rds` into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschools <- read_rds(\"data/rds/schools.rds\")\n```\n:::\n\n\nThe, code chunk below will be used to perform Point-in-Polygon count analysis and save the derived values into a new field of *mpsz_var* called *SCHOOL_COUNT*. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_var$`SCHOOL_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, schools))\n```\n:::\n\n\nNext, we will import the rest of the shapefiles into R environemnt using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusiness <- st_read(dsn = \"data/geospatial\",\n                    layer = \"Business\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Business' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6550 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3669.148 ymin: 25408.41 xmax: 47034.83 ymax: 50148.54\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n```{.r .cell-code}\nretails <- st_read(dsn = \"data/geospatial\",\n                    layer = \"Retails\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Retails' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 37635 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4737.982 ymin: 25171.88 xmax: 48265.04 ymax: 50135.28\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n```{.r .cell-code}\nfinserv <- st_read(dsn = \"data/geospatial\",\n                    layer = \"FinServ\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `FinServ' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3320 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4881.527 ymin: 25171.88 xmax: 46526.16 ymax: 49338.02\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n```{.r .cell-code}\nentertn <- st_read(dsn = \"data/geospatial\",\n                    layer = \"entertn\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `entertn' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 114 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10809.34 ymin: 26528.63 xmax: 41600.62 ymax: 46375.77\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n```{.r .cell-code}\nfb <- st_read(dsn = \"data/geospatial\",\n                    layer = \"F&B\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `F&B' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1919 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25343.27 xmax: 45462.43 ymax: 48796.21\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n```{.r .cell-code}\nlr <- st_read(dsn = \"data/geospatial\",\n                    layer = \"Liesure&Recreation\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Liesure&Recreation' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex5\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1217 features and 30 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 6010.495 ymin: 25134.28 xmax: 48439.77 ymax: 50078.88\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n\nThen,we will perform Point-in-Polygon analysis for each of these sf object by using the code chunk below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_var$`BUSINESS_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, business))\n\nmpsz_var$`RETAILS_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, retails))\n\nmpsz_var$`FINSERV_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, finserv))\n\nmpsz_var$`ENTERTN_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, entertn))\n\nmpsz_var$`FB_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, fb))\n\nmpsz_var$`LR_COUNT`<- lengths(\n  st_intersects(\n    mpsz_var, lr))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz_var)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 313\nColumns: 14\n$ SZ_NAME        <chr> \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"FORT CANNING\", \"…\n$ SZ_CODE        <chr> \"RVSZ05\", \"SRSZ01\", \"MUSZ02\", \"MPSZ05\", \"SISZ01\", \"BMSZ…\n$ BUSSTOP_COUNT  <int> 2, 10, 6, 2, 1, 10, 5, 4, 21, 11, 2, 9, 6, 1, 4, 7, 24,…\n$ AGE7_12        <dbl> 330, 320, 0, 0, 200, 0, 0, 0, 350, 470, 0, 300, 390, 0,…\n$ AGE13_24       <dbl> 360, 350, 10, 0, 260, 0, 0, 0, 460, 1160, 0, 760, 890, …\n$ AGE25_64       <dbl> 2260, 2200, 30, 0, 1440, 0, 0, 0, 2600, 6260, 630, 4350…\n$ geometry       <MULTIPOLYGON [m]> MULTIPOLYGON (((28481.45 30..., MULTIPOLYG…\n$ SCHOOL_COUNT   <int> 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0…\n$ BUSINESS_COUNT <int> 6, 4, 7, 0, 1, 11, 15, 1, 10, 1, 17, 6, 0, 0, 51, 2, 3,…\n$ RETAILS_COUNT  <int> 26, 207, 17, 0, 84, 14, 52, 0, 460, 34, 263, 55, 37, 1,…\n$ FINSERV_COUNT  <int> 3, 18, 0, 0, 29, 4, 6, 0, 34, 4, 26, 4, 3, 6, 59, 3, 8,…\n$ ENTERTN_COUNT  <int> 0, 6, 3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0…\n$ FB_COUNT       <int> 4, 38, 4, 0, 38, 15, 5, 0, 20, 0, 9, 25, 0, 0, 9, 1, 3,…\n$ LR_COUNT       <int> 3, 11, 7, 0, 20, 0, 0, 0, 19, 2, 4, 4, 1, 1, 13, 0, 17,…\n```\n:::\n:::\n\n\nBefore moving to the next task, let's save *mpsz_var* into an rds file by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_var, \"data/rds/mpsz_var.rds\")\n```\n:::\n\n\n# 4 Preparing spflow objects\n\nThree **spflow** objects are required, they are:\n\n-   [`spflow_network-class`](https://lukece.github.io/spflow/reference/spflow_network-class.html), an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation.\n-   [`spflow_network_pair-class`](https://lukece.github.io/spflow/reference/spflow_network_pair-class.html), an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one `spflow_network-class`, and likewise for the destinations.\n-   [`spflow_network_multi-class`](https://lukece.github.io/spflow/reference/spflow_network_multi-class.html), an S4 class that gathers information on multiple objects of types `spflow_network-class` and `spflow_network_pair-class`. Its purpose is to ensure that the identification between the nodes that serve as origins or destinations, and the OD-pairs is consistent (similar to relational data bases).   \n\n## 4.1 From RDS\n\nLet us retrieve by using the code chunk below\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_nb <- read_rds(\"data/rds/mpsz_nb.rds\")\nmpsz_flow <- read_rds(\"data/rds/mpsz_flow.rds\")\nmpsz_var <- read_rds(\"data/rds/mpsz_var.rds\")\n```\n:::\n\n\n## 4.2 Creating `spflow_network-class` objects\n\n`spflow_network-class` is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation.  It can be created by using [`spflow_network()`](https://lukece.github.io/spflow/reference/spflow_network.html) of **spflow** package.  \n\nFor our model,  we choose the contiguity based neighborhood structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_net <- spflow_network(\n  id_net = \"sg\",\n  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),\n  node_data = mpsz_var,\n  node_key_column = \"SZ_CODE\")\n\nmpsz_net\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial network nodes with id: sg\n--------------------------------------------------\nNumber of nodes: 313\nAverage number of links per node: 6.077\nDensity of the neighborhood matrix: 1.94% (non-zero connections)\n\nData on nodes:\n                SZ_NAME SZ_CODE BUSSTOP_COUNT AGE7_12 AGE13_24 AGE25_64\n1      INSTITUTION HILL  RVSZ05             2     330      360     2260\n2        ROBERTSON QUAY  SRSZ01            10     320      350     2200\n3          FORT CANNING  MUSZ02             6       0       10       30\n4      MARINA EAST (MP)  MPSZ05             2       0        0        0\n5               SENTOSA  SISZ01             1     200      260     1440\n6        CITY TERMINALS  BMSZ17            10       0        0        0\n---                 ---     ---           ---     ---      ---      ---\n308            NEE SOON  YSSZ07            12      90      140      590\n309       UPPER THOMSON  BSSZ01            47    1590     3660    15980\n310          SHANGRI-LA  AMSZ05            12     810     1920     9650\n311          TOWNSVILLE  AMSZ04             9     980     2000    11320\n312           MARYMOUNT  BSSZ02            25    1610     4060    16860\n313 TUAS VIEW EXTENSION  TSSZ06            11       0        0        0\n    SCHOOL_COUNT BUSINESS_COUNT RETAILS_COUNT FINSERV_COUNT ENTERTN_COUNT\n1              1              6            26             3             0\n2              0              4           207            18             6\n3              0              7            17             0             3\n4              0              0             0             0             0\n5              0              1            84            29             2\n6              0             11            14             4             0\n---          ---            ---           ---           ---           ---\n308            0              0             7             0             0\n309            3             21           305            30             0\n310            3              0            53             9             0\n311            1              0            83            11             0\n312            3             19           135             8             0\n313            0             53             3             1             0\n    FB_COUNT LR_COUNT COORD_X COORD_Y\n1          4        3  103.84    1.29\n2         38       11  103.84    1.29\n3          4        7  103.85    1.29\n4          0        0  103.88    1.29\n5         38       20  103.83    1.25\n6         15        0  103.85    1.26\n---      ---      ---     ---     ---\n308        0        0  103.81     1.4\n309        5       11  103.83    1.36\n310        0        0  103.84    1.37\n311        1        1  103.85    1.36\n312        3       11  103.84    1.35\n313        0        0  103.61    1.26\n```\n:::\n:::\n\n\n## 4.3 Creating `spflow_network-class` object\n\n`spflow_network-class` object is an S4 class which holds information on origin-destination (OD) pairs. Each OD pair is composed of two nodes, each belonging to one network. All origin nodes must belong to the same origin network should be contained in one `spflow_network-class` object and likewise for the destinations.\n\nIn **spflow** package, [`spflow_network_pair()`](https://lukece.github.io/spflow/reference/spflow_network_pair.html)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_net_pairs <- spflow_network_pair(\n  id_orig_net = \"sg\",\n  id_dest_net = \"sg\",\n  pair_data = mpsz_flow,\n  orig_key_column = \"ORIGIN_SZ\",\n  dest_key_column = \"DESTIN_SZ\")\n\nmpsz_net_pairs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatial network pair with id: sg_sg\n--------------------------------------------------\nOrigin network id: sg (with 313 nodes)\nDestination network id: sg (with 313 nodes)\nNumber of pairs: 97969\nCompleteness of pairs: 100.00% (97969/97969)\n\nData on node-pairs:\n      DESTIN_SZ ORIGIN_SZ DISTANCE TRIPS\n1        RVSZ05    RVSZ05        0    67\n314      SRSZ01    RVSZ05   305.74   251\n627      MUSZ02    RVSZ05   951.83     0\n940      MPSZ05    RVSZ05  5254.07     0\n1253     SISZ01    RVSZ05     4975     0\n1566     BMSZ17    RVSZ05  3176.16     0\n---         ---       ---      ---   ---\n96404    YSSZ07    TSSZ06 26972.97     0\n96717    BSSZ01    TSSZ06 25582.48     0\n97030    AMSZ05    TSSZ06 26714.79     0\n97343    AMSZ04    TSSZ06 27572.74     0\n97656    BSSZ02    TSSZ06  26681.7     0\n97969    TSSZ06    TSSZ06        0   270\n```\n:::\n:::\n\n\n\n## 4.4 Creating `spflow_network_multi-class` object \n\nThe sp_multi_network-class combines information on the nodes and the node-pairs and also ensures that both data sources are consistent. For example, if some of the origins in the sp_network_pair-class are not identified with the nodes in the sp_network_nodes-class an error will be raised.\n\n[`spflow_network_multi()`](https://lukece.github.io/spflow/reference/spflow_network_multi.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_multi_net <-  spflow_network_multi(mpsz_net,\n                                   mpsz_net_pairs)\nmpsz_multi_net\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCollection of spatial network nodes and pairs\n--------------------------------------------------\nContains 1 spatial network nodes  \n    With id :  sg\nContains 1 spatial network pairs  \n    With id :  sg_sg\n\nAvailability of origin-destination pair information:\n\n ID_ORIG_NET ID_DEST_NET ID_NET_PAIR COMPLETENESS     C_PAIRS  C_ORIG  C_DEST\n          sg          sg       sg_sg      100.00% 97969/97969 313/313 313/313\n```\n:::\n:::\n\n\nGiven the information on origins, destinations and OD pairs we can use the spflow_map() method for a simple geographic representation of the largest flows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz$geometry)\nspflow_map(\n  mpsz_multi_net,\n  flow_var = \"TRIPS\",\n  add = TRUE, \n  legend_position = \"bottomleft\",\n  filter_lowest = .999, \n  remove_intra = TRUE,\n  cex = 1)\n```\n:::\n\n\n\n# 5 Correlation Analysis\n\n**Multicollinearity** refers to a situation in which more than two explanatory variables in a multiple regression model are highly linearly related.  In this situation, the coefficient estimates of the multiple regression may change erratically in response to small changes in the data or the procedure used to fit the model.  \n\nIn order to avoid including explanatory variables that are highly correlated, spflow provides two functions:\n\n-   [`pair_cor()`](https://lukece.github.io/spflow/reference/pair_cor.html) to create a correlation matrix, and\n-   [`cor_image()`](https://lukece.github.io/spflow/reference/cor_image.html) to plot the correlation matrix as a correlogram. \n\n::: {.panel-tabset}\n## Code\n\n::: {.cell}\n\n```{.r .cell-code}\ncor_formula <- log(1 + TRIPS) ~ \n    BUSSTOP_COUNT +\n    AGE7_12 +\n    AGE13_24 +\n    AGE25_64 +\n    SCHOOL_COUNT +\n    BUSINESS_COUNT +\n    RETAILS_COUNT +\n    FINSERV_COUNT +\n    P_(log(DISTANCE + 1))\n\ncor_mat <- pair_cor(\n  mpsz_multi_net, \n  spflow_formula = cor_formula, \n  add_lags_x = FALSE)\n\ncolnames(cor_mat) <- paste0(\n  substr(\n    colnames(cor_mat),1,3),\"...\")\n\ncor_image(cor_mat)\n```\n:::\n\n\n## Plot\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-class_Ex5_files/figure-html/unnamed-chunk-47-1.png){width=1152}\n:::\n:::\n\n:::\n\n# 7 Model Calibration\n\nThe core function of the package is `spflow()`.  It provides an interface to three different estimators of spatial econometric interaction models (Dargel 2021) that allow the user to estimate origin-destination flows with spatial autocorrelation.\n\nThe three different estimators currently supported by spflow are:\n\n-   **Maximum Likelihood Estimation (MLE)** which is the default estimation procedure. The matrix form estimation in the framework of this model was first developed by LeSage and Pace (2008) and then improved by Dargel (2021) .\nSpatial two-stage least squares (S2SLS)\n\n-   **Spatial Two-stage Least Squares (S2SLS)** estimator is an adaptation of the one proposed by Kelejian and Prucha (1998), to the case of origin-destination flows, with up to three neighborhood matrices Dargel (2021). A similar estimation is done by Tamesue and Tsutsumi (2016). The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = \"s2sls\").\n\n-   **Bayesian Markov Chain Monte Carlo (MCMC)** estimator is based on the ideas of LeSage and Pace (2009) and incorporates the improvements proposed in Dargel (2021) . The estimation is based on a tuned Metropolis-Hastings sampler for the auto-regressive parameters, and for the remaining parameters it uses Gibbs sampling. The routine uses 5500 iterations of the sampling procedure and considers the first 2500 as burn-in period. The user can activate the S2SLS estimation via the estimation_control argument using the input spflow_control(estimation_method = \"mcmc\").\n\nEstimation with default settings requires two arguments: an **sp_multi_network-class** and a **flow_formula**. The flow_formula specifies the model we want to estimate. \nThe function offers a formula interface adapted to spatial interaction models, which has the following structure: Y ~ O_(X1) + D_(X2) + I_(X3) + P_(X4). This structure reflects the different data sources involved in such a model. On the left hand side there is the independent variable Y which corresponds to the vector of flows. On the right hand side we have all the explanatory variables. The functions O_(...) and D_(...) indicate which variables are used as characteristics of the origins and destinations respectively. Similarly, I_(...) indicates variables that should be used for the intra-regional parameters. Finally, P_(...) declares which variables describe origin-destination pairs, which most frequently will include a measure of distance.\n\nAll the declared variables must be available in the provided `spflow_network_multi()` object, which gathers information on the origins and destinations (inside `spflow_network()` objects), as well as the information on the origin-destination pairs (inside a `spflow_network_pair()` object).\n\nUsing the short notation Y ~ . is possible and will be interpreted as usual, in the sense that we use all variables that are available for each data source. Also mixed formulas, such as Y ~ . + P_(log(X4) + 1), are possible. When the dot shortcut is combined with explicit declaration, it will only be used for the non declared data sources. \n\n## 7.1 The base model\n\nLet us calibrate a base model with the following configuration:\n\n-   Explanatory variables use as characteristics of the origins: BUSSTOP_COUNT and AGE25_64.\n-   Explanatory variables use as characteristics of the destinations: SCHOOL_COUNT, BUSINESS_COUNT, RETAILS_COUNT, FINSERV_COUNT.\n-   Explanatory variable describes origin-destination pairs: DISTANCE\n\nThe code chunk will be as follow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_model <- spflow(\n  spflow_formula = log(1 + TRIPS) ~ \n    O_(BUSSTOP_COUNT +\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n    BUSINESS_COUNT +\n    RETAILS_COUNT +\n    FINSERV_COUNT) +\n    P_(log(DISTANCE + 1)),\n  spflow_networks = mpsz_multi_net)\n\nbase_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_9)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd   t.stat  p.val\nrho_d                   0.680  0.004  192.555  0.000\nrho_o                   0.678  0.004  187.732  0.000\nrho_w                  -0.396  0.006  -65.591  0.000\n(Intercept)             0.410  0.065    6.267  0.000\n(Intra)                 1.313  0.081   16.262  0.000\nD_SCHOOL_COUNT          0.017  0.002    7.885  0.000\nD_SCHOOL_COUNT.lag1     0.002  0.004    0.551  0.581\nD_BUSINESS_COUNT        0.000  0.000    3.015  0.003\nD_BUSINESS_COUNT.lag1   0.000  0.000   -0.249  0.804\nD_RETAILS_COUNT         0.000  0.000   -0.306  0.759\nD_RETAILS_COUNT.lag1    0.000  0.000    0.152  0.880\nD_FINSERV_COUNT         0.002  0.000    6.787  0.000\nD_FINSERV_COUNT.lag1   -0.002  0.001   -3.767  0.000\nO_BUSSTOP_COUNT         0.002  0.000    6.806  0.000\nO_BUSSTOP_COUNT.lag1   -0.001  0.000   -2.364  0.018\nO_AGE25_64              0.000  0.000    7.336  0.000\nO_AGE25_64.lag1         0.000  0.000   -2.797  0.005\nP_log(DISTANCE + 1)    -0.050  0.007   -6.793  0.000\n\n--------------------------------------------------\nR2_corr: 0.6942946  \nObservations: 97969  \nModel coherence: Validated\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(base_model)\n```\n:::\n\n\n## 7.2 Residual diagnostics\n\nIn building explanatory models, it is important to check if the model calibrate conform to the statistical assumption of the statistical methods used.  The beauty of spflow package is that it provides several functions to support residual diagnostics needs. \n\nIn the code chunk below, `spflow_moran_plots()` is used. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nold_par <- par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\nspflow_moran_plots(base_model)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex5_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(old_par)\n```\n:::\n\n\nNext, `pair_cor()` can be used to inspect the relationship of the residual and the explanatory variables by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr_residual <- pair_cor(base_model)\ncolnames(corr_residual) <- substr(colnames(corr_residual),1,3)\ncor_image(corr_residual)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex5_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.df <- as_tibble(base_model@spflow_indicators) %>%\n  mutate(FITTED_Y = round(exp(FITTED),0))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_flow1 <- mpsz_flow %>%\n  left_join(model.df) %>%\n  select(1:4,8) %>%\n  mutate(diff = (FITTED_Y-TRIPS))\n```\n:::\n\n\n## 7.3 Working with model control\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspflow_formula <- log(1 + TRIPS) ~ \n    O_(BUSSTOP_COUNT +\n         AGE25_64) +\n    D_(SCHOOL_COUNT +\n    BUSINESS_COUNT +\n    RETAILS_COUNT +\n    FINSERV_COUNT) +\n    P_(log(DISTANCE + 1))\n\nmodel_control <- spflow_control(\n  estimation_method = \"mle\",\n  model = \"model_8\")\n\nmle_model8 <- spflow(\n  spflow_formula,\n  spflow_networks = mpsz_multi_net,\n  estimation_control = model_control)\n\nmle_model8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--------------------------------------------------\nSpatial interaction model estimated by: MLE  \nSpatial correlation structure: SDM (model_8)\nDependent variable: log(1 + TRIPS)\n\n--------------------------------------------------\nCoefficients:\n                          est     sd    t.stat  p.val\nrho_d                   0.689  0.003   196.830  0.000\nrho_o                   0.687  0.004   192.217  0.000\nrho_w                  -0.473  0.003  -142.469  0.000\n(Intercept)             1.086  0.049    22.274  0.000\n(Intra)                 0.840  0.075    11.255  0.000\nD_SCHOOL_COUNT          0.019  0.002     8.896  0.000\nD_SCHOOL_COUNT.lag1     0.019  0.004     5.130  0.000\nD_BUSINESS_COUNT        0.000  0.000     3.328  0.001\nD_BUSINESS_COUNT.lag1   0.000  0.000     1.664  0.096\nD_RETAILS_COUNT         0.000  0.000    -0.414  0.679\nD_RETAILS_COUNT.lag1    0.000  0.000    -0.171  0.864\nD_FINSERV_COUNT         0.002  0.000     6.150  0.000\nD_FINSERV_COUNT.lag1   -0.003  0.001    -4.601  0.000\nO_BUSSTOP_COUNT         0.003  0.000     7.676  0.000\nO_BUSSTOP_COUNT.lag1    0.000  0.000     0.552  0.581\nO_AGE25_64              0.000  0.000     6.870  0.000\nO_AGE25_64.lag1         0.000  0.000    -0.462  0.644\nP_log(DISTANCE + 1)    -0.125  0.005   -22.865  0.000\n\n--------------------------------------------------\nR2_corr: 0.6965977  \nObservations: 97969  \nModel coherence: Validated\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nold_par <- par(mfrow = c(1, 3), \n               mar = c(2,2,2,2))\nspflow_moran_plots(mle_model8)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex5_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(old_par)\n```\n:::\n",
    "supporting": [
      "In-class_Ex5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}