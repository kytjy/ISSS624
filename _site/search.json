[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to import and wrangle geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, we learn how to import and wrangle geospatial data using appropriate R packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Getting Started",
    "text": "Getting Started\nThe code chunk below installs and loads sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\n\nImport polygon feature data in shapefile formatImport polyline feature data in shapefile formImport GIS data in kml format\n\n\n\nst_read() function of sf package:\n\nread simple features form file/database, or retrieve layer names and their geometry types(s)\nimports MP14_SUBZONE_WEB_PL shapefile into R as polygon feature data frame\ndsn = defines data path; layer = provide the shapefile name\n\n\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nInterpretation:\n\nGeospatial objects = multipolygon features\n323 multipolygon features and 15 fields in mpsz simple feature data frame\nmpsz in svy21 projected coordinates systems\nBounding box provides x extend and y extend of the data\n\n\n\n\n\nImports CyclingPath shapefile into R as line feature data frame\n\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\kytjy\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nInterpretation:\n\n1625 features and 2 fields in cyclingpath linestring feature data\nsvy21 projected coordinates system\n\n\n\n\n\nPreSchoolsLocation is in kml format\nBelow code chunk used to important kml into R\n\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nInterpretation:\n\npreschool = point feature data frame"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Checking the Content of a Simple Feature Data Frame",
    "text": "Checking the Content of a Simple Feature Data Frame\n\nst_geometry()glimpse()head()\n\n\n\nColumn in sf data.frame that contains geometries is a list, of class sfc\nCan be retrieved by mpsz$geom or mpsz[[1]], else st_geometry() can also be used\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nPrints out basic info of feature class, eg type of geometry, geographic extent of feature and coordinate system of the data\n\n\n\n\nglimpse() report shows data types of each field\nFMEL-UPD_D field = date; X_ADDR, Y_ADDR, SHAPE_L, SHAPE_AREA = double-precision values\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n\nhead() used to display complete information of a feature object\nn = 5 shows the selected number of records to display\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\n\nplot() visualises geospatial features\nDefault plot is a multi-plot of all attributes\n\n\nplot(mpsz)\n\n\n\n\n\nCan choose to plot only the geometry\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nAlternatively can also choose to plot the sf object by using specific attribute\n\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Working with Projection",
    "text": "Working with Projection\n\nTo perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system\nProjection Transformation refers to projecting a simple feature data from one coordinate system to another coordinate system\n\n\nAssigning EPSG code to a simple feature data frame\n\nA common issue during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process\nBelow example shows the coordinate system of mpsz simple feature data frame by using st_crs() of sf package\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nInterpretation:\n\nAlthough mpsz data frame is projected in svy21 but EPSG is indicated as 9001. Correct EPSG code should be 3414.\n\nTo assign correct EPS code to mpsz data frame, st_set_crs() of sf package can be used\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\nCheck CSR again. Notice that EPSG code is now 3414.\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nTransforming the projection of preschool from wgs84 to svy21\n\nIn geospatial analytics, it is common to transform original data from geographic coordinate system to projected coordinate system, as geographic coordinate system is not appropriate if the analysis need to use distance and/or area measurement\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\n\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kytjy\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathematically\nPerform the projection transformation by using the code chunk below\n\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\n\nhead(preschool3414, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 24821.92 ymin: 31299.16 xmax: 28844.56 ymax: 46303.16\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                Description\n1           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2                    &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8675&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;22877550804213FD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3       &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S VINEYARD PRESCHOOL PTE. LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9308&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B2FE90E44AD494E3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9122&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;1384CDC0D14B76A1&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT2070&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FB24EAA6E73B2723&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (25089.46 31299.16 0)\n2 POINT Z (27189.07 32792.54 0)\n3 POINT Z (28844.56 36773.76 0)\n4 POINT Z (24821.92 46303.16 0)\n5 POINT Z (28637.82 35038.49 0)\n\n\n\nInterpretation:\n\nNotice that it is in svy21 projected coordinate system now\nIn Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Importing and Converting an Aspatial Data",
    "text": "Importing and Converting an Aspatial Data\n\nData such as listing of Inside Airbnb is called aspatial data, because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nWe will learn how to import an aspatial data into R environment &gt; save it as a tibble data frame &gt; convert it into a simple feature data frame\n\n\nImporting aspatial data\n\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame\n\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\n\nAfter importing the data file, we should examine if data file has been imported correctly\nWe can use list() instead of glimpse()\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,483 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,473 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\n\nInterpretation:\n\nlisting tibble data frame consists of 3,483 rows and 18 columns\nIncludes latitude and longitude, note that these are in decimal degree format\nAs a best guess, we will assume that the data is in wgs84 Geographic Coordinate System\n\n\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nCode chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages\n\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nArguments:\n\ncoords: requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs: requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;%: nests st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,483\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\n\nInterpretation:\n\nDisplays content of listing_sf\ngeometry: new column added\nlongitude and latitude columns dropped from data frame"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\n\nsf package offers a wide range of geoprocessing (also known as GIS analysis) functions, other than providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data\nIn this section, we will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\n\nBuffering\n\nScenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\nSolution:\n\nst_buffer() of sf package is used to compute the 5-meter buffers around cycling paths\n\nnQuadSegs = number of line segments used to approximate a quarter circle\n\n\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\n\n\nCalculate the area of the buffers\n\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nsum() of Base R will be used to drive the total land involved\n\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]\n\n\n\n\nPoint-in-polygon count\n\nScenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\n\nSolution:\n\nThe code chunk below performs two operations at one go.\n\nFirstly, identify pre-schools located inside each Planning Subzone by using st_intersects().\nNext, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\n\nmpsz3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nCheck summary statistics of the newly derived PreSch Count field by using summary().\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used.\n\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nScenario:\nCalculate the density of pre-school by planning subzone.\n\n\nUse st_area() of sf package to derive the area of each planning subzone\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;% \n  st_area()\n\n\nmutate() of dplyr package is used to compute the density\n\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nprint(mpsz3414)\n\nSimple feature collection with 323 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...            0\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...            6\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...            0\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...            5\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...            3\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...           13\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...            5\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...            1\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...           11\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...            1\n              Area    PreSch Density\n1  1630379.3 [m^2]  0.000000 [1/m^2]\n2   559816.2 [m^2] 10.717803 [1/m^2]\n3   160807.5 [m^2]  0.000000 [1/m^2]\n4   595428.9 [m^2]  8.397308 [1/m^2]\n5   387429.4 [m^2]  7.743345 [1/m^2]\n6  1030378.8 [m^2] 12.616719 [1/m^2]\n7   551732.0 [m^2]  9.062370 [1/m^2]\n8   290184.7 [m^2]  3.446082 [1/m^2]\n9  1084792.3 [m^2] 10.140190 [1/m^2]\n10  631644.3 [m^2]  1.583170 [1/m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1.1: Geospatial Data Wrangling with R",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\nMany geospatial analytics start with Exploratory Data Analysis.\nIn this section, we learn how to use ggplot2 functions to create functional and truthful statistical graphs for EDA purposes.\n\n\nPlot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used.\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nAlthough syntax is easy, the output is far from meeting publication quality. Function also has limited room for further customization.\n\n\nggplot(data=mpsz3414,\n       aes(x=as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  labs(title= \"Are pre-schools evenly distributed in Singapore?\",\n       subtitle = \"There are may planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools.\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")\n\n\n\n\n\nUsing ggplot2 method, we can also plot a scatterplot showing the relationship between pre-school density and pre-school count.\n\n\nggplot(data=mpsz3414,\n       aes(y = `PreSch Count`,\n           x=as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\",\n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title= \"\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we learn how to plot functional and truthful choropleth maps by using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#overview",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, we learn how to plot functional and truthful choropleth maps by using an R package called tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#getting-started",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file\ntidyr for tidying data\ndplyr for wrangling data\nsf for handling geospatial data\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#importing-data-into-r",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\n\nThe Data\nTwo data set will be used to create the choropleth map:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format.\n\nDownloaded from data.gov.sg\nGeospatial data\nConsists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv).\n\nAspatial data fie.\nDownloaded at Department of Statistics, Singapore\nAlthough it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\nImporting Geospatial Data into R\n\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kytjy\\ISSS624\\Hands-on_Ex\\Hands-on_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nExamine the content of mpsz by using the code chunk below:\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nImporting Attribute Data into R\n\nNext, we will import respopagsex2000to2018.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values.\nThe data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n\nData Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;% \n  filter(Time==2020) %&gt;% \n  group_by(PA, SZ, AG) %&gt;% \n  summarise(`POP`=sum(`Pop`)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from=AG,\n              values_from = POP) %&gt;% \n  mutate(YOUNG=rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\n  rowSums(.[13:15])) %&gt;% \n  mutate(`AGED`=rowSums(.[16:21])) %&gt;% \n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;% \n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %&gt;% \n    select(`PA`, `SZ`, `YOUNG`, \n           `ECONOMY ACTIVE`, `AGED`, \n           `TOTAL`, `DEPENDENCY`)\n\n\n\nJoining the attribute data and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase.\n\nThis is because the values of PA and SZ fields are made up of upper- and lowercase.\nOn the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%  \n  mutate_at(.vars=vars(PA, SZ),\n            .funs=funs(toupper)) %&gt;% \n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                  by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Choropleth Mapping Geospatial Data Using tmap",
    "text": "Choropleth Mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nPlotting a choropleth map quickly by using qtm()\n\nqtm():\n\nEasiest and quickest to draw a choropleth map using tmap\nConcise and provides a good default visualisation in many cases.\n\n\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill=\"DEPENDENCY\")\n\n\n\n\n\nNote:\n\ntmap_mode() with “plot” option: used to produce a static map. For interactive mode, “view” option should be used.\nfill argument: is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\nCreating a choropleth map by using tmap’s elements\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control.\nTo draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\nDrawing a base map\n\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\nDrawing a choropleth map using tm_fill() and tm_border()\n\ntm_polygons() is a wraper of tm_fill() and tm_border().\ntm_fill() shades the polygons by using the default colour scheme\ntm_borders() adds the borders of the shapefile onto the choropleth map.\n\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 0.3)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\n\nalpha argument: used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\n\n\ncol: border colour,\nlwd: border line width. The default is 1, and\nlty: border line type. The default is “solid”.\n\n\n\n\nData classification methods of tmap\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n\nPlotting choropleth maps with built-in classification methods\n\nQuantileJenks / Natural BreaksEqual IntervalStandard Deviation\n\n\n\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n2 Classes6 Classes10 Classes20 Classes\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nPlotting choropleth map with custom break\n\nFor all the built-in styles, the category breaks are computed internally.\nIn order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill().\nIt is important to note that, in tmap the breaks include a minimum and maximum.\nAs a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90.\nIn addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nColour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\nUsing ColourBrewer palette\n\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n\nMap Layouts\n\nMap layout refers to the combination of all map elements into a cohensive map.\nMap elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios.\nColour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n\nMap Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap style\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\nCartographic Furniture\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nTo reset the default style, use code chunk below:\n\n\ntmap_style(\"white\")\n\n\n\n\nDrawing Small Multiple Choropleth Maps\n\nSmall multiple maps aka facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically.\nSmall multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\nBy assigning multiple values to aesthetic arguments\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"quantile\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nBy defining a group-by variable in tm_facets()\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\nSplits maps into groups ie by region\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nBy creating multiple stand-alone maps with tmap_arrange()\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\nBelow code only displays portion of the map where Region = Central Region\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1_2.html#reference",
    "title": "Hands-on Exercise 1.2: Choropleth Mapping with R",
    "section": "Reference",
    "text": "Reference\n\n2.5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n2.5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n2.5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#getting-started",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Getting Started",
    "text": "Getting Started\n\nTaskSolution\n\n\nEnsure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\n\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#computing-contiguity-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#computing-contiguity-based-neighbours",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "6.1 Computing contiguity based neighbours",
    "text": "6.1 Computing contiguity based neighbours\n\nQueenRook\n\n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nInterpretation:\n\nThere are 88 area units in Hunan.\nMost connected area unit has 11 neighbours.\nThere are two area units with only one neighbour.\n\n\n\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nInterpretation:\n\nThere are 88 area units in Hunan.\nMost connect area unit has 10 neighbours.\nThere are two area units with only one neighbours.\n\n\n\n\n\nDisplay Neighbours for Specific CountyRetrieve County Name & Its NeighboursRetrieve GDPCC\n\n\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in Hunan SpatialPolygonsDataFrame class.\n\n\n\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nInterpretation:\n\nThe output reveals that Polygon ID=1 is Anxiang county.\n\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#visualising-contiguity-weights",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#visualising-contiguity-weights",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Visualising contiguity weights",
    "text": "Visualising contiguity weights\n\nA connectivity graph takes a point and displays a line to each neighboring point.\n\nWe are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs.\nThe most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids.\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function.\n\nThe mapping function applies a given function to each element of a vector and returns a vector of the same length.\nOur input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package.\n\n\n\nGet Long & LatCombine Long & Lat\n\n\nTo get our longitude values, we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[ ]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n\n\nPlotting contiguity-based neighbours map\n\nQueenRookBoth\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "6.2 Computing distance-based neighbours",
    "text": "6.2 Computing distance-based neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\n\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.\nIf unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\n6.2.1 Determine the cut-off distance / upper limit\n\nCreate neighbour listCalculate distanceObtain upper limit\n\n\n\nknearneigh() of spdep: returns a matrix with the indices of points belonging to the set of the k nearest neighbours of each other.\nknn2nb(): converts the knn object returned by knearneigh() into a neighbours list (class nb) with a list of integer vectors containing neighbour region number ids.\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 88 \nPercentage nonzero weights: 1.136364 \nAverage number of links: 1 \nNon-symmetric neighbours list\n\n\n\n\n\nnbdists() of spdep: calculates the length of neighbour relationship edges (ie distance between neighboring regions). Returns units of the coordinates if the coordinates are projected, in km otherwise.\nunlist(): removes the list structure of the returned object by using .\n\n\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nk1dists\n\n [1] 25.53398 43.03114 25.53398 29.28480 29.28480 45.98097 58.52704 28.95985\n [9] 34.45062 37.99885 44.49442 33.48816 35.98123 47.65184 37.73556 36.16613\n[17] 40.53569 49.02492 37.47543 42.97316 37.47543 36.16613 44.51898 39.77440\n[25] 33.92180 45.03425 40.15056 32.50795 40.15056 47.83345 38.35439 58.39365\n[33] 44.85211 27.85864 38.21510 32.12293 44.74688 41.53815 38.02669 46.02900\n[41] 44.51898 44.74688 32.13340 32.13340 27.85864 24.79082 24.79082 29.66852\n[49] 32.50795 39.19375 29.66852 28.43598 50.50645 28.43598 45.72100 48.22649\n[57] 31.82332 31.82332 59.98421 37.44866 35.83248 39.77577 33.48816 34.34758\n[65] 40.45791 32.58547 58.52704 32.58547 45.98097 37.99885 31.27538 44.49442\n[73] 43.88878 31.27538 53.12656 40.45791 43.93382 43.03114 47.45858 34.68711\n[81] 33.92180 37.80739 42.81869 34.45062 61.79116 34.90929 42.32891 48.59005\n\n\n\n\n\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\nInterpretation: The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n6.2.2 Computing fixed distance weight matrix\ndnearneigh() is used to compute the distance weight matrix.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nInterpretation: 88 regions in Hunan, 324 links amongst regions of distance up to 62km, Avg of 3-4 neighbours within this distance\nTo display the structure of wm_d62 weight matrix:\n\nstr()table() & card()\n\n\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, \n       # list number of neighbours for each area\n      card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n\n\n[n.comp.nb()] finds the number of disjoint connected subgraphs in the graph depicted by [nb.obj()] - a spatial neighbours list object.\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\nPlotting fixed distance weight matrix\n\nDistance-linkDistance-link and 1st nearest neighbours\n\n\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\n\n\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, col=\"cornflowerblue\", pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n6.2.3 Computing adaptive distance weight matrix\n\nFor fixed distance weight matrix, more densely settled areas (usually urban areas) tend to have more neighbours and the less densely settled areas (usually rural counties) tend to have lesser neighbours.\nHaving many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours (where k=n as specified), either accepting asymmetric neighbours or imposing symmetry.\n\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nEach county will have exactly six neighbours as specified.\n\n6.2.3.1 Plotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"#e0218a\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#step-1-compute-distance-between-areas",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#step-1-compute-distance-between-areas",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Step 1: Compute Distance between Areas",
    "text": "Step 1: Compute Distance between Areas\nWe use nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#step-2-row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#step-2-row-standardised-weights-matrix",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "Step 2: Row-standardised weights matrix",
    "text": "Step 2: Row-standardised weights matrix\n\nAssign weights to each neighboring polygon. Recall in lecture slides, it is calculated using the inverse of number of neigbours; total of each row in matrix adds to 1, which makes it a row-standardized.\nIn our case study, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values.\nWhile this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.\nStyle=“W” option used for this example for simplicity’s sake but more robust options are available, notably style=“B”.\nStyles:\n\nW: row standardised (sums over all links to n)\nB: basic binary coding\nC: globally standardised (sums over all links to n)\nU: equal to C divided by the number of neighbours (sums over all links to unity)\nS: variance-stabilizing coding scheme (sums over all links to n)\nminmax: divides the weights by min of the max row sums and max column sums of the input weights; similar to C/U\n\n\n\nWBZero.Policy = FALSE\n\n\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\nrswm_qB &lt;- nb2listw(wm_q, style=\"B\", zero.policy = TRUE)\nrswm_qB\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n\n\nrswm_qF &lt;- nb2listw(wm_q, style=\"W\", zero.policy = FALSE)\nrswm_qF\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\nzero.policy=TRUE: allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\n\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\nEach neighbor is assigned a 0.125 of the total weight. All same because style=“W” =&gt; equal weights.\nThis means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#a-spatial-lag-with-row-standardized-weights",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#a-spatial-lag-with-row-standardized-weights",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "(a) Spatial lag with row-standardized weights",
    "text": "(a) Spatial lag with row-standardized weights\n\nSums up GDPPC of all the neighbours, except the target location itself\n\n\nStep 1: Compute the avg neighbor GDPPC valueStep 2: Append values onto hunan dfStep 3: Plot both the GDPPC and spatial lag GDPPC\n\n\n\nThese values are often referred to as spatially lagged values.\n\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nIn the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\n\n\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\n\n\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#b-spatial-lag-as-a-sum-of-neighboring-values",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#b-spatial-lag-as-a-sum-of-neighboring-values",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "(b) Spatial lag as a sum of neighboring values",
    "text": "(b) Spatial lag as a sum of neighboring values\n\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights.\nThis requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\n\n\nCreate binary spatial weights matrixCompute lag variableAppend lag_sum GDPPC into hunanPlot & Compare\n\n\n\nWe start by applying a function that will assign a value of 1 per each neighbor.\nThis is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks.\nBasically it applies a function across each value in the neighbors structure.\n\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#c-spatial-window-average",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#c-spatial-window-average",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "(c) Spatial window average",
    "text": "(c) Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\n\nAdd diagonal elementCreate spatial weights listCreate lag variableConvert to data frameLeft joinComparePlot\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\n\n\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\n\n\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advicible to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#d-spatial-window-sum",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_1.html#d-spatial-window-sum",
    "title": "Hands-on Exercise 2.1: Spatial Weights and Applications",
    "section": "(d) Spatial window sum",
    "text": "(d) Spatial window sum\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nUses and includes the diagonal element.\nSums up GDPPC of all neighbours, including target location itself\n\n\nAdd diagonal elementAssign weightsCompute lag variableConvert to data frameLeft joinComparePlot\n\n\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\n\n\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor more effective comparison, it is advisable to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_2.html",
    "title": "Hands-on Exercise 2.2 & 2.3: Global & Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Continuation from Hands-on Exercise 2.1\n\n\n\n\n\n\n\nLearning how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using spdep package, including:\n\nimport geospatial data using appropriate function(s) of sf package\nimport csv file using appropriate function of readr package\nperform relational join using appropriate join function of dplyr package\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package\n\nplot Moran scatterplot\ncompute and plot spatial correlogram using appropriate function of spdep packag\n\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package\nvisualise the analysis output by using tmap package.\n\n\n\n\n\nThe Analytical QuestionThe Study Area and DataSetting the Analytical Tools\n\n\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China (https://en.wikipedia.org/wiki/Hunan).\n\n\nDatasets:\n\nGeospatial: Hunan province administrative boundary layer at county level; in ESRI shapefile format.\nAspatial: Hunan_2012.csv containing selected Hunan’s local development indicators in 2012.\n\n\n\nEnsure that spdep, sf, tmap and tidyverse packages are installed:\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n# -   Creates a package list containing the necessary R packages\n# -   Checks if the R packages in the package list have been installed\n# -   If not installed, will installed the missing packages & launch into R environment.\n\n\n\n\n\n\n\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into r environmentImport csv file into r environmentPerforming relational join\n\n\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\kytjy\\ISSS624\\Hands-on_Ex\\Hands-on_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.3)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_2.html#global-spatial-autocorrelation-gearys",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_2.html#global-spatial-autocorrelation-gearys",
    "title": "Hands-on Exercise 2.2 & 2.3: Global & Local Measures of Spatial Autocorrelation",
    "section": "4.4 Global Spatial Autocorrelation: Geary’s",
    "text": "4.4 Global Spatial Autocorrelation: Geary’s\nIn this section, you will learn how to perform Geary’s c statistics testing by using appropriate functions of spdep package.\n\nDescriptionGeary’s C testComputing Monte Carlo Geary’s CVisualising the Monte Carlo Geary’s C\n\n\n\nDescribes how features differ from their immediate neighbours.\nGeary c (Z value) is:\n\nLarge c value (&gt;1) : Dispersed, observations tend to be dissimilar;\nSmall c value (&lt;1) : Clustered, observations tend to be similar;\nc = 1: observations are arranged randomly over space.\n\n\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\n\n\n\nInterpretation\n\n\n\n\n\np-value &lt;0.05, reject null hypothesis. Conclude that Geary’s C statistic of 0.69 suggest variable is not randomly arranged, and is spatially clusters. Observations tend to be similar.\n\n\n\n\n\nPerforms permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\nPlot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2_2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2.2 & 2.3: Global & Local Measures of Spatial Autocorrelation",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nLocalised spatial statistics can be also used to detect hot spot and/or cold spot areas.\n\nGetis and Ord’s G-Statistics\n\nUsed to to detect spatial anomalies is the Getis and Ord’s G-statistics .\nLooks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\nHere, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\n\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n1. Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. While the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroidDetermine the cut-off distanceComputing fixed distance weight matrixComputing adaptive distance weight matrix\n\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\nThe output spatial weights object is called wm62_lw.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\n\n2. Computing Gi statistics\n\nGi statistics using fixed distanceMapping Gi values with fixed distance weightsGi statistics using adaptive distanceMapping Gi values with adaptive distance weights\n\n\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nhunan.gi\n\nSimple feature collection with 88 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC      Z.GDPPC lag_GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667 -0.049205949  24847.20\n2   Changde 21100   Hanshou      County   Hanshou 20981 -0.228341158  22724.80\n3   Changde 21101    Jinshi County City    Jinshi 34592  0.679406172  24143.25\n4   Changde 21102        Li      County        Li 24473  0.004547952  27737.50\n5   Changde 21103     Linli      County     Linli 25554  0.076642204  27270.25\n6   Changde 21104    Shimen      County    Shimen 27137  0.182215933  21248.80\n7  Changsha 21109   Liuyang County City   Liuyang 63118  2.581867439  43747.00\n8  Changsha 21110 Ningxiang      County Ningxiang 62202  2.520777398  33582.71\n9  Changsha 21111 Wangcheng      County Wangcheng 70666  3.085260051  45651.17\n10 Chenzhou 21112     Anren      County     Anren 12761 -0.776550918  32027.62\n   gstat_fixed                       geometry\n1   0.43607584 POLYGON ((112.0625 29.75523...\n2  -0.26550565 POLYGON ((112.2288 29.11684...\n3  -0.07303367 POLYGON ((111.8927 29.6013,...\n4   0.41301703 POLYGON ((111.3731 29.94649...\n5   0.27307058 POLYGON ((111.6324 29.76288...\n6  -0.37751078 POLYGON ((110.8825 30.11675...\n7   2.86389882 POLYGON ((113.9905 28.5682,...\n8   2.79435042 POLYGON ((112.7181 28.38299...\n9   5.21612540 POLYGON ((112.7914 28.52688...\n10  0.22823660 POLYGON ((113.1757 26.82734...\n\n\nCode chunk above performs three tasks:\n\nas.matrix(): to convert the output vector (i.e. gi.fixed) into r matrix object by using .\ncbind(): to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi.\nrename(): rename the field name of the gi values to gstat_fixed by using\n\n\n\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#overview",
    "href": "Hands-on_Ex1.html#overview",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting started paragraph"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Data Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "",
    "text": "Requirement: To prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.\n\nThe specific task of this in-class exercise are to:\n\nImport Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall in to RStudio environment,\nImport geospatial data in ESRI shapefile format into sf data frame format,\nPerform data wrangling by using appropriate functions from tidyverse and sf pakcges, and\nVisualise the distribution of passenger trip by using tmap methods and functions."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#task",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#task",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "",
    "text": "Requirement: To prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating Passenger Volume by Origin Destination Bus Stops and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 downloaded from data.gov.sg.\n\nThe specific task of this in-class exercise are to:\n\nImport Passenger Volume by Origin Destination Bus Stops data set downloaded from LTA DataMall in to RStudio environment,\nImport geospatial data in ESRI shapefile format into sf data frame format,\nPerform data wrangling by using appropriate functions from tidyverse and sf pakcges, and\nVisualise the distribution of passenger trip by using tmap methods and functions."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#getting-started",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "Getting Started",
    "text": "Getting Started\n\nTaskSolution\n\n\nThe code chunk below loads the necessary packages:\n\ntmap: for thematic mapping\nsf: for geospatial data handling\ntidyverse: for non-spatial data handling\n\nThis is similar to using library() to call the packages. Note that pacman itself is not loaded.\n\n\n\npacman::p_load(sf,tmap,tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-the-od-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-the-od-data",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "Importing the OD data",
    "text": "Importing the OD data\nFirstly, we will import the Passenger Volume by Origin Destination Bus Stops dataset downloaded from LTA DataMall by using read_csv() or readr package.\n\nTaskSolution\n\n\nImport origin_destination_bus_202308.csv downloaded from LTA DataMall into RStudio and save it as a tibble data frame called odbus.\n\n\n\nodbus &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n\n\n\n\nA quick check of odbus tibble data frame shows that the values in ORIGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\nTaskSolution\n\n\nUsing appropriate tidyverse functions to convert these data values into factor data type.\n\n\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\n\n\n\nNotice that both of them are in factor data type now.\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\nExtracting the study data\n\nTaskSolution\n\n\nFor the purpose of this exercise, we will extract commuting flows on weekday and between 7 and 9 o’clock time intervals. Call the output tibble data table as origin7_9.\n\n\n\norigin7_9 &lt;- odbus %&gt;% \n  filter(DAY_TYPE==\"WEEKDAY\") %&gt;% \n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;% \n  group_by(ORIGIN_PT_CODE) %&gt;% \n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\n\n\nIt should look similar to the data table below.\n\nknitr::kable(head(origin7_9))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1617\n\n\n01013\n813\n\n\n01019\n1620\n\n\n01029\n2383\n\n\n01039\n2727\n\n\n01059\n1415\n\n\n\n\n\nWe will save the output in rds format for future used.\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\nThe code chunk below will be used to import the save origin7_9.rds into R environment.\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#working-with-geospatial-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#working-with-geospatial-data",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "Working with Geospatial Data",
    "text": "Working with Geospatial Data\nIn this section, you are required to import two shapefile into RStudio, they are:\n\nBusStop: This data provides the location of bus stop as at last quarter of 2022.\nMPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.\n\n\nImporting geospatial data\nTwo geospatial data will be used in this exercise.\nNote that both geometry formats are different, we will need to transform the coordinates to 3414 in order to have the same projection system.\n\nTaskSolution\n\n\nImport BusStop downloaded from LTA DataMall into RStudio and save it as a sf data frame called busstop.\n\n\n\nbusstop &lt;-st_read(dsn=\"data/geospatial\",\n                  layer=\"BusStop\") %&gt;% \n  st_transform(crs=3414)\n\nReading layer `BusStop' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\n\n\n\nThe structure of busstop sf tibble data frame should look as below.\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\nTaskSolution\n\n\nImport MPSZ-2019 downloaded from eLearn into RStudio and save it as a sf data frame called mpsz.\n\n\n\nmpsz &lt;- st_read(dsn=\"data/geospatial\",\n                layer = \"MPSZ-2019\") %&gt;% \n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe structure of mpsz sf tibble data frame should look as below.\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_read() function of sf package is used to import the shapefile into R as sf data frame.\nst_transform() function of sf package is used to transform the projection to crs 3414."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#geospatial-data-wrangling",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nCombining Busstop and mpsz\nCode chunk below populates the planning subzone code (i.e. SUBZONE_C) of mpsz sf data frame into busstop sf data frame.\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_intersection() is used to perform point and polygon overlay and the output will be in point sf object.\nselect() of dplyr package is then used to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\n5 bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.\n\n\n\nBefore moving to the next step, it is wise to save the output into rds format.\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")  \n\n\nTaskSolution\n\n\nNext, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus7_9 data frame.\n\n\n\norigin_data &lt;- left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\n\n\n\n\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate\n\n# A tibble: 26 × 3\n   ORIGIN_BS TRIPS ORIGIN_SZ\n   &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;    \n 1 11009     13826 QTSZ01   \n 2 11009     13826 QTSZ01   \n 3 22501      9743 JWSZ09   \n 4 22501      9743 JWSZ09   \n 5 43709      1118 BKSZ07   \n 6 43709      1118 BKSZ07   \n 7 47201     23998 WDSZ07   \n 8 47201     23998 WDSZ07   \n 9 51071      6218 CCSZ01   \n10 51071      6218 CCSZ01   \n# ℹ 16 more rows\n\n\nIf duplicated records are found, the code chunk below will be used to retain the unique records.\n\norigin_data &lt;- unique(origin_data)\n\nIt will be a good practice to confirm if the duplicating records issue has been addressed fully.\n\nTaskSolution\n\n\nNext, write a code chunk to update od_data data frame with the planning subzone codes.\n\n\n\nmpsz_origtrip &lt;- left_join(mpsz, \n                           origin_data,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#choropleth-visualisation",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#choropleth-visualisation",
    "title": "In-class Exercise 1: First Date with Geospatial Data Analytics",
    "section": "Choropleth Visualisation",
    "text": "Choropleth Visualisation\n\nTaskSolution\n\n\nPrepare a choropleth map showing the distribution of passenger trips at planning sub-zone level.\n\n\n\ntm_shape(mpsz_origtrip)+\n  tm_fill(\"TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "",
    "text": "Notes from Class\n\n\n\n\n\n\n\n\nHigh chance they are not randomly distributed\nWhere are the areas with higher concentration of activity (crime, electricity consumption)\nWhat contributes to the difference –&gt; spatial inequality\n\n\n\n\n\nSpatial weights: help to define/understand spatial context\nneighbour = 1; not neighbour = 0\nTypes:\n\nadjacent: use geog area (next to each other)\n\nlagged: used to see when the neighbour effect subsides\n\nlagged 2 = 2nd degree\n\n\ndistance: within a threshold distance\n\ninverse distance: nearest distance = higher weightage\n\nFor example\n\nreal-world phenomena of neighbours who do not share same boundary eg islands\nfor take home exercise, distance should be better. With hexagon, we can make sure each area is equal and more precise to capture rather than using subzones.\n\n\nShould exclude areas (eg central catchments) before running tests (eg Moran’s I)\nUse row-standardised weight\nSummary statistics\n\nGlobal = more mathematically informed\n\nSpatial dependency: used to interpolate (eg goldmine discovery)\n\nSpatial autocorrelation:\n\nCompare observed value vs its neighbour\nTrying to reject H0 of spatial randomness\nSigns of clustering vs dispersion\n\nNegative = checkerbox pattenrs\nPositive = clumps / cluster\n\nShould do Monte Carlo permutations for THE1!\n\n\nLocal\n\nLocal Moran’s I\n\nHighlight both autocorrelation and where statistic test is significant\nCould also have autocorrelation bc not enough neighbours\nCould be applied to distance and proximity\n\nGi’s statistics\n\nOnly distance-based\nGi = doesnt count itself\nG*i = takes itself into consideration (Moran’s I and Geary’s C uses this)\n\n\n\nEmerging hotpot\n\nUsually used for time-series data\nMann-Kendall test: statistical, non-spatial\n\nif value at time k &gt; time j (reference value)\n\nEHSA: replaces x with G*i\n\ncube = 1. time, 2. passengers, 3. location"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#spatial-randomness",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#spatial-randomness",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "",
    "text": "High chance they are not randomly distributed\nWhere are the areas with higher concentration of activity (crime, electricity consumption)\nWhat contributes to the difference –&gt; spatial inequality"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#spatial-context",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#spatial-context",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "",
    "text": "Spatial weights: help to define/understand spatial context\nneighbour = 1; not neighbour = 0\nTypes:\n\nadjacent: use geog area (next to each other)\n\nlagged: used to see when the neighbour effect subsides\n\nlagged 2 = 2nd degree\n\n\ndistance: within a threshold distance\n\ninverse distance: nearest distance = higher weightage\n\nFor example\n\nreal-world phenomena of neighbours who do not share same boundary eg islands\nfor take home exercise, distance should be better. With hexagon, we can make sure each area is equal and more precise to capture rather than using subzones.\n\n\nShould exclude areas (eg central catchments) before running tests (eg Moran’s I)\nUse row-standardised weight\nSummary statistics\n\nGlobal = more mathematically informed\n\nSpatial dependency: used to interpolate (eg goldmine discovery)\n\nSpatial autocorrelation:\n\nCompare observed value vs its neighbour\nTrying to reject H0 of spatial randomness\nSigns of clustering vs dispersion\n\nNegative = checkerbox pattenrs\nPositive = clumps / cluster\n\nShould do Monte Carlo permutations for THE1!\n\n\nLocal\n\nLocal Moran’s I\n\nHighlight both autocorrelation and where statistic test is significant\nCould also have autocorrelation bc not enough neighbours\nCould be applied to distance and proximity\n\nGi’s statistics\n\nOnly distance-based\nGi = doesnt count itself\nG*i = takes itself into consideration (Moran’s I and Geary’s C uses this)\n\n\n\nEmerging hotpot\n\nUsually used for time-series data\nMann-Kendall test: statistical, non-spatial\n\nif value at time k &gt; time j (reference value)\n\nEHSA: replaces x with G*i\n\ncube = 1. time, 2. passengers, 3. location"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#import-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#import-data",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "Import Data",
    "text": "Import Data\n\nGeospatialAspatialLeft JoinChoropleth Map\n\n\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\kytjy\\ISSS624\\In-class_Ex\\In-class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nclass(hunan)\n\n[1] \"sf\"         \"data.frame\"\n\n\n\ntibble df, each observation represents 1 geographical area as it has geometry that allows you to plot polygon feature\neach record is a simple feature (sf) if it has geometry data\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\nnon-spatial data\ntypical tibble data frame\n\n\n\n\nIn order to retain the geospatial properties, the left dataframe must be the sf data.frame (ie hunan)\nIf reversed, geometry will be dropped\nThis left_join is from dplyr, rather than from Base R\n\n\nhunan_GDPPC &lt;- left_join(hunan,\n                         hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\n# by = c('County' = 'County')) not specified bc matched automatically\n\nglimpse(hunan_GDPPC)\n\nRows: 88\nColumns: 7\n$ NAME_2    &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 0.8,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.text.size = 0.6,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#identify-contiguity-neighbours-queens-method",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#identify-contiguity-neighbours-queens-method",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "3.1 Identify contiguity neighbours: Queen’s Method",
    "text": "3.1 Identify contiguity neighbours: Queen’s Method\n\nNeighbours List1st Lag Neighbour ListView ContentDisplay as Table\n\n\n\nnb_queen &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\n\n\n# queen = TRUE by default\n\n\n\n\nsummary(nb_queen$nb)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n# 88 area units in Hunan\n# Most connected area unit has 11 neighbours\n# 2 are units with only 1 neighbour\n\n\n\n\nnb_queen\n\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb   NAME_2  ID_3    NAME_3   ENGTYPE_3\n1                 2, 3, 4, 57, 85  Changde 21098   Anxiang      County\n2               1, 57, 58, 78, 85  Changde 21100   Hanshou      County\n3                     1, 4, 5, 85  Changde 21101    Jinshi County City\n4                      1, 3, 5, 6  Changde 21102        Li      County\n5                     3, 4, 6, 85  Changde 21103     Linli      County\n6                4, 5, 69, 75, 85  Changde 21104    Shimen      County\n7                  67, 71, 74, 84 Changsha 21109   Liuyang County City\n8       9, 46, 47, 56, 78, 80, 86 Changsha 21110 Ningxiang      County\n9           8, 66, 68, 78, 84, 86 Changsha 21111 Wangcheng      County\n10 16, 17, 19, 20, 22, 70, 72, 73 Chenzhou 21112     Anren      County\n      County GDPPC                       geometry\n1    Anxiang 23667 POLYGON ((112.0625 29.75523...\n2    Hanshou 20981 POLYGON ((112.2288 29.11684...\n3     Jinshi 34592 POLYGON ((111.8927 29.6013,...\n4         Li 24473 POLYGON ((111.3731 29.94649...\n5      Linli 25554 POLYGON ((111.6324 29.76288...\n6     Shimen 27137 POLYGON ((110.8825 30.11675...\n7    Liuyang 63118 POLYGON ((113.9905 28.5682,...\n8  Ningxiang 62202 POLYGON ((112.7181 28.38299...\n9  Wangcheng 70666 POLYGON ((112.7914 28.52688...\n10     Anren 12761 POLYGON ((113.1757 26.82734...\n\n# Shows that polygon 1 has five neighbours (polygons #2, 3, 4, 57,and 85)\n\n\n\n\nkable(head(nb_queen,\n           n=3))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnb\nNAME_2\nID_3\nNAME_3\nENGTYPE_3\nCounty\nGDPPC\ngeometry\n\n\n\n\n2, 3, 4, 57, 85\nChangde\n21098\nAnxiang\nCounty\nAnxiang\n23667\nPOLYGON ((112.0625 29.75523…\n\n\n1, 57, 58, 78, 85\nChangde\n21100\nHanshou\nCounty\nHanshou\n20981\nPOLYGON ((112.2288 29.11684…\n\n\n1, 4, 5, 85\nChangde\n21101\nJinshi\nCounty City\nJinshi\n34592\nPOLYGON ((111.8927 29.6013,…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#identify-contiguity-neighbours-rooks-method",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#identify-contiguity-neighbours-rooks-method",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "3.2 Identify Contiguity Neighbours: Rooks’ Method",
    "text": "3.2 Identify Contiguity Neighbours: Rooks’ Method\n\nNeighbours ListIdentify hogher order neigbours1st and 2nd Order Neighbours\n\n\n\nnb_rook &lt;- hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         .before = 1)\n\n\n\n\nDerive contiguity neighbour list using lag 2 Queen’s method\n\n\nnb2_queen &lt;-  hunan_GDPPC %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\n\n## nb column shows neighbours list for each county, note that Queen's method has more neighbours in some cases!\n\n\n\n\nnb2_queen\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                        nb2\n1                                     2, 3, 4, 5, 6, 32, 56, 57, 58, 64, 69, 75, 76, 78, 85\n2                           1, 3, 4, 5, 6, 8, 9, 32, 56, 57, 58, 64, 68, 69, 75, 76, 78, 85\n3                                                 1, 2, 4, 5, 6, 32, 56, 57, 69, 75, 78, 85\n4                                                             1, 2, 3, 5, 6, 57, 69, 75, 85\n5                                                 1, 2, 3, 4, 6, 32, 56, 57, 69, 75, 78, 85\n6                                         1, 2, 3, 4, 5, 32, 53, 55, 56, 57, 69, 75, 78, 85\n7                                                     9, 19, 66, 67, 71, 73, 74, 76, 84, 86\n8  2, 9, 19, 21, 31, 32, 34, 35, 36, 41, 45, 46, 47, 56, 58, 66, 68, 74, 78, 80, 84, 85, 86\n9               2, 7, 8, 19, 21, 35, 46, 47, 56, 58, 66, 67, 68, 74, 76, 78, 80, 84, 85, 86\n10               11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 70, 71, 72, 73, 74, 82, 83, 86\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#global-measure-of-spatial-association",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#global-measure-of-spatial-association",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "5.1 Global Measure of Spatial Association",
    "text": "5.1 Global Measure of Spatial Association\n\nCompute Global Moran’s IPerform Global Moran’s I Test\n\n\n\n# Output: tibble format\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\n\n\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n# default: “two.sided”; can also be “greater” or “less”. \n# default: randomization =  TRUE. If FALSE, under the assumption of normality.\n\n\nGlobal Moran’s I Permutation Test\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n# no. of simulations = nsim + 1, ie nsim = 99, 100 simulations will be performed."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#compute-local-morans-i",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#compute-local-morans-i",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "5.2 Compute Local Moran’s I",
    "text": "5.2 Compute Local Moran’s I\n\nComputeVisualise Local Moran’s IVisual p-value of Local Moran’s ISide-by-Side ComparisonVisualise LISA map\n\n\n\nlisa &lt;- wm_q %&gt;%  \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim=99),\n    .before=1) %&gt;% \n  # unlist the data\n  unnest(local_moran)\n\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii     var_ii    z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.00147  0.00177   0.000418   -0.158  0.874       0.82         0.41   -0.812\n 2  0.0259   0.00641   0.0105      0.190  0.849       0.96         0.48   -1.09 \n 3 -0.0120  -0.0374    0.102       0.0796 0.937       0.76         0.38    0.824\n 4  0.00102 -0.0000349 0.00000437  0.506  0.613       0.64         0.32    1.04 \n 5  0.0148  -0.00340   0.00165     0.449  0.654       0.5          0.25    1.64 \n 6 -0.0388  -0.00339   0.00545    -0.480  0.631       0.82         0.41    0.614\n 7  3.37    -0.198     1.41        3.00   0.00266     0.08         0.04    1.46 \n 8  1.56    -0.265     0.804       2.04   0.0417      0.08         0.04    0.459\n 9  4.42     0.0450    1.79        3.27   0.00108     0.02         0.01    0.746\n10 -0.399   -0.0505    0.0859     -1.19   0.234       0.28         0.14   -0.685\n# ℹ 78 more rows\n# ℹ 13 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;\n\n# The quadrants (HH, LH, HL, LL) is automatically calculated for us.\n\n\ncolnames(lisa)\n\n [1] \"ii\"           \"eii\"          \"var_ii\"       \"z_ii\"         \"p_ii\"        \n [6] \"p_ii_sim\"     \"p_folded_sim\" \"skewness\"     \"kurtosis\"     \"mean\"        \n[11] \"median\"       \"pysal\"        \"nb\"           \"wt\"           \"NAME_2\"      \n[16] \"ID_3\"         \"NAME_3\"       \"ENGTYPE_3\"    \"County\"       \"GDPPC\"       \n[21] \"geometry\"    \n\n\n\nNumber of simulation is always = nsim + 1, nsim = 99 means 100 simulations\nii: local moran statistic\neii: expectation of local moran statistics\nVar_ii: variance of local moran statistic\nz_ii:\nhigh-high/low-low columns based on mean, median and pysal (if highly skewed, should use median. Look at distribution of variables.)\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") + \n  tm_borders(alpha = 0.5) +\n   tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +  ##check distribution to know if should use mean/median\n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#hot-spot-cold-spot-area-analysis-hcsa",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#hot-spot-cold-spot-area-analysis-hcsa",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "5.3 Hot Spot & Cold Spot Area Analysis (HCSA)",
    "text": "5.3 Hot Spot & Cold Spot Area Analysis (HCSA)\n\nHCSA uses spatial weights to identify locations of statistically significant hot/cold spots in a spatially weighted attribute that are in proximity of one another based on calculated dist.\n\n\nDerive Inverse Distance Weights MatrixCompute Gi* StatsVisualise Gi*Visualise p-value of HCSAVisualise local Gi* stat and p-value of local HCSAVisualise hot spot & cold spots\n\n\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n\n\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n   gi_star   e_gi    var_gi p_value   p_sim p_folded_sim skewness kurtosis nb   \n     &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;nb&gt; \n 1  0.0416 0.0114   6.41e-6  0.0493 9.61e-1         0.7      0.35    0.875 &lt;int&gt;\n 2 -0.333  0.0106   3.84e-6 -0.0941 9.25e-1         1        0.5     0.661 &lt;int&gt;\n 3  0.281  0.0126   7.51e-6 -0.151  8.80e-1         0.9      0.45    0.640 &lt;int&gt;\n 4  0.411  0.0118   9.22e-6  0.264  7.92e-1         0.6      0.3     0.853 &lt;int&gt;\n 5  0.387  0.0115   9.56e-6  0.339  7.34e-1         0.62     0.31    1.07  &lt;int&gt;\n 6 -0.368  0.0118   5.91e-6 -0.583  5.60e-1         0.72     0.36    0.594 &lt;int&gt;\n 7  3.56   0.0151   7.31e-6  2.61   9.01e-3         0.06     0.03    1.09  &lt;int&gt;\n 8  2.52   0.0136   6.14e-6  1.49   1.35e-1         0.2      0.1     1.12  &lt;int&gt;\n 9  4.56   0.0144   5.84e-6  3.53   4.17e-4         0.04     0.02    1.23  &lt;int&gt;\n10  1.16   0.0104   3.70e-6  1.82   6.86e-2         0.12     0.06    0.416 &lt;int&gt;\n# ℹ 78 more rows\n# ℹ 8 more variables: wts &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;\n\nis_tibble(HCSA)\n\n[1] TRUE\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\n\n\n\n\n\nPlot the significant (i.e. p-values &lt;0.05) hot spot and cold spot areas:\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05) #alpha = 5%\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#time-series-cube",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#time-series-cube",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "6.1 Time Series Cube",
    "text": "6.1 Time Series Cube\n\nCreate a Time Series CubeVerify if created correctly\n\n\n\nGDPPC_st &lt;- spacetime(GDPPC, hunan,\n                      .loc_col = 'County',  #assign location \n                      .time_col = 'Year')   #assign time\n\nclass(GDPPC_st)\n\n[1] \"spacetime\"   \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\nstr(GDPPC_st)\n\nspacetim [1,496 × 3] (S3: spacetime/spec_tbl_df/tbl_df/tbl/data.frame)\n $ Year  : num [1:1496] 2005 2005 2005 2005 2005 ...\n $ County: chr [1:1496] \"Longshan\" \"Changsha\" \"Wangcheng\" \"Ningxiang\" ...\n $ GDPPC : num [1:1496] 3469 24612 14659 11687 13406 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Year = col_double(),\n  ..   County = col_character(),\n  ..   GDPPC = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n - attr(*, \"active\")= chr \"data\"\n - attr(*, \"data\")= spc_tbl_ [1,496 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n  ..$ Year  : num [1:1496] 2005 2005 2005 2005 2005 ...\n  ..$ County: chr [1:1496] \"Longshan\" \"Changsha\" \"Wangcheng\" \"Ningxiang\" ...\n  ..$ GDPPC : num [1:1496] 3469 24612 14659 11687 13406 ...\n  ..- attr(*, \"spec\")=\n  .. .. cols(\n  .. ..   Year = col_double(),\n  .. ..   County = col_character(),\n  .. ..   GDPPC = col_double()\n  .. .. )\n  ..- attr(*, \"problems\")=&lt;externalptr&gt; \n - attr(*, \"geometry\")=Classes 'sf' and 'data.frame':   88 obs. of  8 variables:\n  ..$ NAME_2    : chr [1:88] \"Changde\" \"Changde\" \"Changde\" \"Changde\" ...\n  ..$ ID_3      : int [1:88] 21098 21100 21101 21102 21103 21104 21109 21110 21111 21112 ...\n  ..$ NAME_3    : chr [1:88] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n  ..$ ENGTYPE_3 : chr [1:88] \"County\" \"County\" \"County City\" \"County\" ...\n  ..$ Shape_Leng: num [1:88] 1.87 2.36 1.43 3.47 2.29 ...\n  ..$ Shape_Area: num [1:88] 0.101 0.2 0.053 0.189 0.115 ...\n  ..$ County    : chr [1:88] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n  ..$ geometry  :sfc_POLYGON of length 88; first list element: List of 1\n  .. ..$ : num [1:427, 1:2] 112 112 112 112 112 ...\n  .. ..- attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n  ..- attr(*, \"sf_column\")= chr \"geometry\"\n  ..- attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA\n  .. ..- attr(*, \"names\")= chr [1:7] \"NAME_2\" \"ID_3\" \"NAME_3\" \"ENGTYPE_3\" ...\n - attr(*, \"loc_col\")= chr \"County\"\n - attr(*, \"locs\")= chr [1:88] \"Anxiang\" \"Hanshou\" \"Jinshi\" \"Li\" ...\n - attr(*, \"n_locs\")= int 88\n - attr(*, \"time_col\")= chr \"Year\"\n - attr(*, \"times\")= num [1:17] 2005 2006 2007 2008 2009 ...\n - attr(*, \"n_times\")= int 17\n\n\n\n\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#computing-gi",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#computing-gi",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "6.2 Computing Gi*",
    "text": "6.2 Computing Gi*\n\nDerive Spatial WeightsCompute Gi*\n\n\n\nactivate(): to activate geometry context\nmutate(): to create 2 new cols nb and wt\nset_nbs() and set_wts(): activate data context again & copy over the nb & wt cols to each time-slice\n\n\nGDPPC_nb &lt;- GDPPC_st %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, \n                                  geometry, \n                                  scale = 1, \n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(GDPPC_nb)\n\n# A tibble: 6 × 5\n   Year County  GDPPC nb        wt       \n  &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1  2005 Anxiang  8184 &lt;int [6]&gt; &lt;dbl [6]&gt;\n2  2005 Hanshou  6560 &lt;int [6]&gt; &lt;dbl [6]&gt;\n3  2005 Jinshi   9956 &lt;int [5]&gt; &lt;dbl [5]&gt;\n4  2005 Li       8394 &lt;int [5]&gt; &lt;dbl [5]&gt;\n5  2005 Linli    8850 &lt;int [5]&gt; &lt;dbl [5]&gt;\n6  2005 Shimen   9244 &lt;int [6]&gt; &lt;dbl [6]&gt;\n\n\n\n\n\ngi_stars &lt;- GDPPC_nb %&gt;% \n  group_by(Year) %&gt;% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt)) %&gt;% \n  tidyr::unnest(gi_star)\n\nglimpse(gi_stars)\n\nRows: 1,496\nColumns: 13\nGroups: Year [17]\n$ Year         &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ GDPPC        &lt;dbl&gt; 8184, 6560, 9956, 8394, 8850, 9244, 13406, 11687, 14659, …\n$ nb           &lt;list&gt; &lt;1, 2, 3, 4, 57, 85&gt;, &lt;1, 2, 57, 58, 78, 85&gt;, &lt;1, 3, 4, …\n$ wt           &lt;list&gt; &lt;0.00000000, 0.01526149, 0.03515537, 0.02176677, 0.02836…\n$ gi_star      &lt;dbl&gt; 0.39812392, -0.23690950, 1.05308649, 0.96565566, 1.047539…\n$ e_gi         &lt;dbl&gt; 0.011503828, 0.010904067, 0.012643127, 0.011729795, 0.011…\n$ var_gi       &lt;dbl&gt; 2.689913e-06, 2.640805e-06, 3.327364e-06, 3.235001e-06, 3…\n$ p_value      &lt;dbl&gt; 0.382095046, 0.001990885, 0.507080740, 0.920309942, 0.884…\n$ p_sim        &lt;dbl&gt; 0.7023908659, 0.9984115046, 0.6120981684, 0.3574108152, 0…\n$ p_folded_sim &lt;dbl&gt; 0.608, 0.892, 0.528, 0.308, 0.352, 0.920, 0.008, 0.396, 0…\n$ skewness     &lt;dbl&gt; 0.304, 0.446, 0.264, 0.154, 0.176, 0.460, 0.004, 0.198, 0…\n$ kurtosis     &lt;dbl&gt; 0.8925173, 0.8204179, 0.9285558, 1.1852446, 0.8742758, 0.…"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#mann-kendall-test",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#mann-kendall-test",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "6.3 Mann-Kendall Test",
    "text": "6.3 Mann-Kendall Test\nWith these Gi* measures by year we can then evaluate each location for a trend using the Mann-Kendall test. The code chunk below uses Changsha county.\n\nCodeInteractive PlotAnalyse Trend\n\n\n\ncbg &lt;- gi_stars %&gt;% \n  ungroup() %&gt;% \n  filter(County == \"Changsha\") |&gt; \n  select(County, Year, gi_star)\n\nglimpse(cbg)\n\nRows: 17\nColumns: 3\n$ County  &lt;chr&gt; \"Changsha\", \"Changsha\", \"Changsha\", \"Changsha\", \"Changsha\", \"C…\n$ Year    &lt;dbl&gt; 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 20…\n$ gi_star &lt;dbl&gt; 5.028300, 5.169201, 5.295889, 5.603954, 6.278886, 5.935746, 5.…\n\n\n\n\n\np &lt;- ggplot(data = cbg, \n       aes(x = Year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n\n\n\n\n\n\n\n\ncbg %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.485 0.00742    66  136.  589.\n\n\nsl = p-value, tau = trend This result tells us that there is a slight upward but insignificant trend. We can replicate this for each location by using group_by() of dplyr package.\n\nehsa &lt;- gi_stars %&gt;%\n  group_by(County) %&gt;%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %&gt;%\n  tidyr::unnest_wider(mk)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#emerging-hot-spot-analysis",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#emerging-hot-spot-analysis",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "6.4 Emerging Hot Spot Analysis",
    "text": "6.4 Emerging Hot Spot Analysis\n:::panel-tabset ## Arrange to show sig emerging hot/cold spots\n\nemerging &lt;- ehsa %&gt;% \n  arrange(sl, abs(tau)) %&gt;% \n  slice(1:5)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#performing-emerging-hotspot-analysis",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#performing-emerging-hotspot-analysis",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nemerging_hotspot_analysis() of sfdep package: - spacetime object x (i.e. GDPPC_st), - quoted name of the variable of interest (i.e. GDPPC) for .var argument. - k argument is used to specify the number of time lags which is set to 1 by default - nsim map numbers of simulation to be performed.\n\nehsa &lt;- emerging_hotspot_analysis(\n  x = GDPPC_st, \n  .var = \"GDPPC\", \n  k = 1, \n  nsim = 99\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#visualise-distribution-of-ehsa-classes",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#visualise-distribution-of-ehsa-classes",
    "title": "In-class Exercise 2: SW, GLSA, EHSA",
    "section": "Visualise distribution of EHSA classes",
    "text": "Visualise distribution of EHSA classes\n\nggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\n\n\n\n\n\nVisualising EHSA\nVisualise the geographic distribution EHSA classes. However, before we can do so, we need to join both hunan and ehsa together by using the code chunk below.\n\nwhen using tmaps, not significant will be greyed out\n\n\nhunan_ehsa &lt;- hunan %&gt;%\n  left_join(ehsa,\n            by = join_by(County == location))\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\nehsa_sig &lt;- hunan_ehsa  %&gt;%\n  filter(p_value &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(hunan_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/test.html",
    "href": "In-class_Ex/In-class_Ex2/test.html",
    "title": "In-class Ex 2",
    "section": "",
    "text": "Geospatial Analysis using sfdep"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/test.html#joining-the-dataframes",
    "href": "In-class_Ex/In-class_Ex2/test.html#joining-the-dataframes",
    "title": "In-class Ex 2",
    "section": "2.1 Joining the dataframes",
    "text": "2.1 Joining the dataframes\nSpatial features are added to the attribute dataframe as geometry column:\n\nhunan_GDPPC&lt;- left_join(hunan, \n                         GDPPC, \n                         by = \"County\")\n\nglimpse(hunan_GDPPC)\n\nRows: 1,496\nColumns: 10\n$ NAME_2     &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       &lt;int&gt; 21098, 21098, 21098, 21098, 21098, 21098, 21098, 21098, 210…\n$ NAME_3     &lt;chr&gt; \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anx…\n$ ENGTYPE_3  &lt;chr&gt; \"County\", \"County\", \"County\", \"County\", \"County\", \"County\",…\n$ Shape_Leng &lt;dbl&gt; 1.869074, 1.869074, 1.869074, 1.869074, 1.869074, 1.869074,…\n$ Shape_Area &lt;dbl&gt; 0.1005619, 0.1005619, 0.1005619, 0.1005619, 0.1005619, 0.10…\n$ County     &lt;chr&gt; \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anxiang\", \"Anx…\n$ Year       &lt;dbl&gt; 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,…\n$ GDPPC      &lt;dbl&gt; 8184.00, 10995.00, 12670.00, 14128.00, 16763.00, 19817.00, …\n$ geometry   &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.0625 …"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/test.html#confirm-if-the-new-dataframe-is-a-spacetime-cube-object",
    "href": "In-class_Ex/In-class_Ex2/test.html#confirm-if-the-new-dataframe-is-a-spacetime-cube-object",
    "title": "In-class Ex 2",
    "section": "6.1 Confirm if the new dataframe is a spacetime cube object",
    "text": "6.1 Confirm if the new dataframe is a spacetime cube object\n\nis_spacetime_cube(GDPPC_st)\n\n[1] TRUE"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello, Stranger",
    "section": "",
    "text": "Welcome to ISSS624 Geospatial Analytics Applications!\nIn this webpage, I am going to share with you my learning journey of geospatial analytics. Join me in my adventure :)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/data/geospatial/hexagon.html",
    "href": "Take-Home_Ex/Take-Home_Ex1/data/geospatial/hexagon.html",
    "title": "Geospatial Data Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n                 +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs 0 0     false"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/data/geospatial/MPSZ-2019.html",
    "href": "Take-Home_Ex/Take-Home_Ex1/data/geospatial/MPSZ-2019.html",
    "title": "Geospatial Data Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "As urban infrastructures, including public transportation systems like buses, taxis, mass rapid transit, public utilities, and roads, become increasingly digitised, the data generated becomes a valuable resource for tracking the movements of people and vehicles over space and time. This transformation has been facilitated by pervasive computing technologies such as Global Positioning System (GPS) and Radio Frequency Identification (RFID) tags on vehicles. An example of this is the collection of data on bus routes and ridership, amassed from the use of smart cards and GPS devices available on public buses.\nThe data collected from these sources is likely to contain valuable patterns that offer insights into various aspects of human movement and behavior within a city. Analyzing and comparing these patterns can provide a deeper understanding of urban mobility. Such insights can be instrumental in improving urban management and can also serve as valuable information for both public and private sector stakeholders involved in urban transportation services. This information can aid them in making informed decisions and gaining a competitive edge in their respective domains.\n\n\n\n\nAimTasks\n\n\nThe objective of this study is to utilize appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) techniques to uncover spatial and spatio-temporal mobility patterns among public bus passengers in Singapore.\n\n\nThis will include the following tasks:\n\nGeovisualisation and Analysis:\n\nCompute the passenger trips generated by origin at the hexagon level\nDisplay the geographical distribution of the passenger trips\nExplore spatial patterns revealed by the geovisualisation\n\n\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\n\nLocal Indicators of Spatial Association (LISA) Analysis - Compute LISA of the passenger trips generate by origin - Display and draw statistical conclusions of LISA maps\nEmerging Hot Spot Analysis (EHSA)\n\nPerform Mann-Kendall Test by using the spatio-temporal local Gi* values\nDisplay EHSA maps of the Gi* values, describe the spatial patterns revealed"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#background",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#background",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "As urban infrastructures, including public transportation systems like buses, taxis, mass rapid transit, public utilities, and roads, become increasingly digitised, the data generated becomes a valuable resource for tracking the movements of people and vehicles over space and time. This transformation has been facilitated by pervasive computing technologies such as Global Positioning System (GPS) and Radio Frequency Identification (RFID) tags on vehicles. An example of this is the collection of data on bus routes and ridership, amassed from the use of smart cards and GPS devices available on public buses.\nThe data collected from these sources is likely to contain valuable patterns that offer insights into various aspects of human movement and behavior within a city. Analyzing and comparing these patterns can provide a deeper understanding of urban mobility. Such insights can be instrumental in improving urban management and can also serve as valuable information for both public and private sector stakeholders involved in urban transportation services. This information can aid them in making informed decisions and gaining a competitive edge in their respective domains."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#objectives",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#objectives",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "",
    "text": "AimTasks\n\n\nThe objective of this study is to utilize appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) techniques to uncover spatial and spatio-temporal mobility patterns among public bus passengers in Singapore.\n\n\nThis will include the following tasks:\n\nGeovisualisation and Analysis:\n\nCompute the passenger trips generated by origin at the hexagon level\nDisplay the geographical distribution of the passenger trips\nExplore spatial patterns revealed by the geovisualisation\n\n\n\n\n\nPeak hour period\nBus tap on time\n\n\n\n\nWeekday morning peak\n6am to 9am\n\n\nWeekday afternoon peak\n5pm to 8pm\n\n\nWeekend/holiday morning peak\n11am to 2pm\n\n\nWeekend/holiday evening peak\n4pm to 7pm\n\n\n\n\nLocal Indicators of Spatial Association (LISA) Analysis - Compute LISA of the passenger trips generate by origin - Display and draw statistical conclusions of LISA maps\nEmerging Hot Spot Analysis (EHSA)\n\nPerform Mann-Kendall Test by using the spatio-temporal local Gi* values\nDisplay EHSA maps of the Gi* values, describe the spatial patterns revealed"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#the-data",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#the-data",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "3.1 The Data",
    "text": "3.1 The Data\nThe following data are used for this study:\n\nAspatial:\n\nPassenger Volume by Origin Destination Bus Stops for August, September and October 2023, downloaded from LTA DataMall using API.\n\nGeospatial\n\nBus Stop Location from LTA DataMall. It provides information about all the bus stops currently being serviced by buses, including the bus stop code (identifier) and location coordinates.\nhexagon, a hexagon layer of 250m is provided to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#import-preparation",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#import-preparation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "3.2 Import & Preparation",
    "text": "3.2 Import & Preparation"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#aspatial",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#aspatial",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "3.2.1 Aspatial",
    "text": "3.2.1 Aspatial\n\nImport into RData ExplorationData Wrangling\n\n\nWe will be importing the Passenger Volume by Origin Destination Bus Stops dataset from August to October 2023, downloaded from LTA DataMall by using read_csv() or readr package.\n\nodbus08 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202308.csv\")\n#odbus09 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202309.csv\")\n#odbus10 &lt;- read_csv(\"data/aspatial/origin_destination_bus_202310.csv\")\n\n\n\n\n(a) Attributes\nglimpse() of the dplyr package allows us to learn more about the attribute information.\n\nglimpse(odbus08)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;chr&gt; \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE &lt;chr&gt; \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n#glimpse(odbus09)\n#glimpse(odbus10)\n\nInsights:\n\nThere are 7 variables in the odbus08 tibble data, they are:\n\nYEAR_MONTH: Month in which data is collected\nDAY_TYPE: Weekdays or weekends/holidays\nTIME_PER_HOUR: Hour which the passenger trip is based on, in intervals from 0 to 23 hours\nPT_TYPE: Type of public transport, i.e. bus\nORIGIN_PT_CODE: Origin bus stop ID\nDESTINATION_PT_CODE: Destination bus stop ID\nTOTAL_TRIPS: Number of trips\n\nWe also note that values in ORIGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type.\n\n\n\n(c) Unique Bus Stops\nn_distinct() of the dplyr package allows us to count the unique bus stops in the data set.\n\nn_distinct(odbus08$ORIGIN_PT_CODE)\n\n[1] 5067\n\nn_distinct(odbus08$DESTINATION_PT_CODE)\n\n[1] 5071\n\n\nThe results reveal that there are 5067 distinct origin bus stops and 5071 unique destination bus stops.\n\n\n(d) Distributions of Trips\nsummary() function allows us to take a quick look into the distribution of the passenger trips\n\nsummary(odbus08$TOTAL_TRIPS)\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n    1.00     2.00     4.00    21.04    13.00 35049.00 \n\n\nInsights: - Average passenger volume is 21, minimum is 1, and maximum is 35049 - 75% of the time, there are ≤13 passengers\n\nmax &lt;- odbus08 %&gt;% filter(TOTAL_TRIPS==35049)\nmax\n\n# A tibble: 1 × 7\n  YEAR_MONTH DAY_TYPE TIME_PER_HOUR PT_TYPE ORIGIN_PT_CODE DESTINATION_PT_CODE\n  &lt;chr&gt;      &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;          &lt;chr&gt;              \n1 2023-08    WEEKDAY             18 BUS     46101          46211              \n# ℹ 1 more variable: TOTAL_TRIPS &lt;dbl&gt;\n\n\nFurther investigation suggests that the maximum passenger volume was from a weekday at 6pm - 7pm, from original bus stop 46101 to bus stop 46211.\n\n\n\n\n(a) Convert Data Type\nas.factor() can be used to convert the variables ORIGIN_PT_CODE and DESTINATON_PT_CODE from numeric to categorical data type. We use glimpse() again to check the results.\n\nodbus08$ORIGIN_PT_CODE &lt;- as.factor(odbus08$ORIGIN_PT_CODE)\nodbus08$DESTINATION_PT_CODE &lt;- as.factor(odbus08$DESTINATION_PT_CODE)\n\nglimpse(odbus08)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\nNote that both of them are in factor data type now.\n\n\n(b) Duplicates Check\nBefore moving on to the next step, it is a good practice for us to check for duplicated records to prevent double counting of passenger trips.\n\nduplicate &lt;- odbus08 %&gt;% \n  group_by_all() %&gt;% \n  filter(n()&gt;1) %&gt;% \n  ungroup()\n  \nduplicate\n\n# A tibble: 0 × 7\n# ℹ 7 variables: YEAR_MONTH &lt;chr&gt;, DAY_TYPE &lt;chr&gt;, TIME_PER_HOUR &lt;dbl&gt;,\n#   PT_TYPE &lt;chr&gt;, ORIGIN_PT_CODE &lt;fct&gt;, DESTINATION_PT_CODE &lt;fct&gt;,\n#   TOTAL_TRIPS &lt;dbl&gt;\n\n\nResults confirm that there are no duplicated records found.\n\n\n(c) Extracting the Study Data\nIn our study, we would like to know patterns for 4 peak hour periods. Therefore, we can create a new column period using the ifelse() that states whether an observation occurred during peak period using the code chunk below.\n\npeak &lt;- odbus08 %&gt;%\n  # Weekday morning peak\n  mutate(period= ifelse(DAY_TYPE==\"WEEKDAY\" & (TIME_PER_HOUR &gt;= 6 & TIME_PER_HOUR &lt;= 9), \"WDM\", \n                        # Weekday afternoon peak\n                        ifelse(DAY_TYPE==\"WEEKDAY\" & (TIME_PER_HOUR &gt;= 17 & TIME_PER_HOUR &lt;= 20), \"WDA\", \n                               # Weekend/holiday morning peak\n                               ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\" & (TIME_PER_HOUR &gt;= 11 & TIME_PER_HOUR &lt;= 14), \"WEM\",\n                                      # Weekend/holiday evening peak\n                                      ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\" & (TIME_PER_HOUR &gt;= 16 & TIME_PER_HOUR &lt;= 19), \"WEE\",\n                                             # Return off-peak if neither of the peak hour periods\n                                             \"Off-peak\")))))\n\nWe can then filter for peak-period data using the newly created period column and aggregate the total trips for each origin bus stop during peak period.\n\npeakperiods &lt;- peak %&gt;% \n  # filter helps to keep records that occurred during period periods\n  filter(period !=\"Off-peak\") %&gt;% \n  # aggregate the total passenger trips for each origin bus stop\n  group_by(period, ORIGIN_PT_CODE) %&gt;% \n  summarise(TRIPS=sum(TOTAL_TRIPS))\n\n\n\n\n\n\n3.2.2 Geospatial\n\nImport into RGeospatial Data Wrangling\n\n\n\n(a) Bus Stop Shapefile\nIn this section, we import BusStop shapefile into RStudio using st_read() function of sf package. This data provides the locations of all bus stops as at Q2 of 2023. crs = 3414 ensures coordinate reference system (CRS) is 3414, which is the EPSG code for the SVY21 projection used in Singapore.\n\nbusstop &lt;- st_read(dsn = \"data/geospatial\",\n                   layer = \"BusStop\") %&gt;% \n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `C:\\kytjy\\ISSS624\\Take-Home_Ex\\Take-Home_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe imported shape file is simple features object of sf. From the output, we can see that there are 5161 points with 3 fields, and confirm that the datum SVY21 is correct.\n\nmapview::mapview(busstop)\n\n\n\n\n\n\n\n\n(b) Hexagon Layer\nA hexagonal grid is used to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA. Hexagons have a number of advantages over these other shapes:\n\n\n\n\n\n\nWhy hexagons?\n\n\n\n\nThe distance between the centroid of a hexagon to all neighboring centroids is the same in all directions.\nThe lack of acute angles in a regular hexagon means that no areas of the shape are outliers in any direction.\nAll neighboring hexagons have the same spatial relationship with the central hexagon, making spatial querying and joining a more straightforward process.\nUnlike square-based grids, the geometry of hexagons are well-structured to represent curves of geographic features which are rarely perpendicular in shape, such as rivers and roads.\nThe “softer” shape of a hexagon compared to a square means it performs better at representing gradual spatial changes.\n\n\n\nFirstly, we create a hexagonal grid layer of 250m (refers to the perpendicular distance between the centre of the hexagon and its edges) with st_make_grid, and st_sf to convert the grid into an sf object with the codes below.\n\n\n\n\n\n\nst_make_grid Arguments\n\n\n\nst_make_grid function is used to create a grid over a spatial object. It takes 4 arguments, they are: - x: sf object; the input spatial data - cellsize: for hexagonal cells the distance between opposite edges in the unit of the crs the spatial data is using. In this case, we take cellsize to be 250m * 2 = 500m\n![](images/hex-01.PNG){width=\"276\"}\n\nwhat: character; one of: \"polygons\", \"corners\", or \"centers\"\nsquare: indicates whether you are a square grid (TRUE) or hexagon grid (FALSE)\n\n\n\n\narea_hexagon_grid = st_make_grid(busstop, 500, what = \"polygons\", square = FALSE)\n\n# Converts grid to sf\nhexagon_grid_sf = st_sf(area_hexagon_grid) %&gt;%\n  # Assign unique ID to each grid\n  mutate(grid_id = 1:length(lengths(area_hexagon_grid)))\n\nSecondly, we count the number of points in each grid and keep grids with bus stops using the code chunks below.\n\n# Create a column containing the count of bus stops in each grid\nhexagon_grid_sf$busstops = lengths(st_intersects(hexagon_grid_sf, busstop))\n\n# Remove if no bus stop in side that grid, ie only keep hexagons with bus stops\nhexagon_w_busstops = filter(hexagon_grid_sf, busstops &gt; 0)\n\nBefore we proceed, let’s confirm that all bus stops have been accounted for in our hexagon layer.\n\nsum(hexagon_w_busstops$busstops)\n\n[1] 5161\n\n\nThis is in line with the 5161 points of the busstop shapefile.\nLastly, using qtm() of tmap, we can quickly visualise the results of the hexagon grids we have created.\n\nqtm(hexagon_w_busstops, fill=\"busstops\")\n\n\n\n\n\n\n\n\n(a) Combining Busstop and hexagon layer\nCode chunk below populates the grid ID (i.e. grid_id) of hexagon_w_busstops sf data frame into busstop sf data frame.\n\nhexlayer &lt;- st_intersection(busstop, hexagon_w_busstops) %&gt;% \n  select(BUS_STOP_N, grid_id) %&gt;% \n  st_drop_geometry\n\nhexlayer\n\n     BUS_STOP_N grid_id\n3269      25059      34\n2570      25751      65\n254       26379      99\n2897      25761     127\n2827      25719     129\n4203      26389     129\n2403      26369     130\n1565      26299     131\n2829      25741     159\n2828      25711     160\n2781      25701     161\n2782      25709     161\n2672      26279     163\n2707      26289     163\n2564      25729     190\n1715      26399     191\n1072      26451     192\n4512      26461     192\n2060      26269     194\n2629      26261     194\n1464      26409     222\n981       26441     223\n2751      25621     223\n729       26311     224\n1875      26349     225\n1502      26251     226\n1700      26259     226\n2843      26249     226\n4239      26241     226\n2487      26209     227\n3550      26201     227\n2823      25771     251\n2678      25801     252\n2752      25631     253\n5156      26419     253\n2750      25611     254\n1778      26331     255\n5027      26321     255\n2741      25579     256\n2742      25571     256\n2573      26081     257\n2623      26089     257\n2172      25469     258\n2535      25451     258\n3614      25461     258\n4240      26429     284\n3647      26431     285\n4158      26221     285\n2748      25601     286\n2749      25609     286\n2746      25599     287\n2747      25591     287\n2739      25561     288\n2740      25569     288\n566       26099     289\n2785      26091     289\n1911      25459     290\n2770      25681     290\n4460      25449     290\n4643      25441     290\n749       25429     291\n1589      25781     313\n2893      25791     314\n5070      26211     315\n2896      25651     316\n2578      26071     319\n4931      26079     319\n136       25391     320\n366       25399     320\n2732      24719     320\n2769      25689     320\n2293      25439     321\n3343      25499     321\n3894      25491     321\n4188      25431     321\n308       25411     322\n2238      25269     322\n5057      25009     322\n5105      25419     322\n2689      25641     347\n2768      25671     347\n2825      25661     347\n2826      25669     347\n356       26069     350\n2562      26061     350\n2837      26059     350\n2784      26101     351\n2861      25691     351\n4376      26109     351\n4437      26141     351\n813       25479     352\n915       25471     352\n2525      25421     353\n3553      26049     380\n4073      26051     380\n4074      26041     380\n679       26151     381\n738       25079     382\n1241      25071     382\n2088      25519     382\n2731      24711     382\n3093      25811     382\n5039      25511     382\n840       25259     384\n1382      25069     413\n1435      25061     413\n2737      25551     413\n2738      25559     413\n13        25099     414\n85        25509     414\n632       25091     414\n1081      25501     414\n2733      25539     414\n2734      25531     414\n3419      25819     414\n4048      25249     415\n1471      26031     442\n4075      26039     442\n1992      26171     443\n2488      26161     443\n2735      25541     444\n2736      25549     444\n1605      25231     445\n2316      25239     445\n325       26131     474\n1768      26129     474\n2571      26029     474\n2572      26019     474\n2730      24709     474\n3495      26021     474\n3691      26011     474\n58        25379     475\n1804      25389     475\n2743      25589     475\n3552      25371     475\n4833      25381     475\n203       25119     476\n1219      25101     476\n5062      25109     476\n5073      25111     476\n769       24621     503\n5031      24629     503\n2729      24701     505\n3879      25359     505\n3973      25341     505\n4935      25349     505\n3825      25151     506\n4363      25129     506\n4407      25121     506\n2329      24549     534\n2126      24619     535\n2222      24611     535\n2341      25339     536\n2824      25821     536\n4150      25331     536\n4221      26121     536\n575       25161     537\n1679      25369     537\n1988      25169     537\n3639      25361     537\n4234      25351     537\n221       25221     538\n4049      25229     538\n1269      24431     565\n2100      24531     565\n3187      24539     565\n1638      26119     566\n3363      24601     566\n3877      26111     566\n4208      24609     566\n4209      24691     566\n4518      24699     566\n4753      25219     568\n538       24559     596\n801       24541     596\n1296      24681     597\n4507      24689     597\n509       24521     598\n1331      25321     598\n1527      24529     598\n3162      24519     598\n3789      25329     598\n4921      25201     598\n5157      25209     598\n967       25171     599\n4331      25179     599\n3901      24441     627\n5130      24421     627\n422       24209     628\n4238      24199     628\n1820      25189     629\n2040      25191     629\n3878      25199     629\n4226      25181     629\n2428      24411     658\n2541      24189     659\n2839      24671     659\n4925      24679     659\n3785      24511     660\n3979      24219     660\n267       24461     688\n3955      24401     688\n4806      24391     688\n2838      24381     689\n3804      24451     689\n4483      24661     689\n4715      24669     689\n4837      24389     689\n3815      24301     690\n4230      24641     690\n332       24501     691\n3640      24509     691\n328       24379     720\n3811      24369     720\n1128      24169     721\n4144      24179     721\n1112      24229     722\n755       24581     723\n1723      24359     750\n4421      24351     750\n4116      24339     751\n4530      24331     751\n453       24089     752\n3493      24651     752\n530       24571     753\n1955      24021     753\n4085      24239     753\n1624      24349     781\n4272      24341     781\n3587      23229     783\n3636      24299     783\n3792      23221     783\n386       24249     784\n2397      24599     785\n2548      24139     785\n3483      24489     785\n3613      24129     785\n1960      24029     815\n1396      24049     816\n1812      24041     816\n2550      23311     844\n4205      23321     844\n1585      23239     845\n3485      24289     845\n3960      23231     845\n1704      24269     846\n2520      24259     846\n1495      24149     847\n3638      23499     847\n4149      24159     847\n4608      24499     847\n1966      27051     850\n2386      23331     875\n3959      23281     875\n2201      24279     876\n3536      23449     876\n3540      23441     876\n3975      23359     876\n93        24011     877\n584       24631     877\n1742      24019     877\n4175      24639     877\n621       23081     878\n1135      23089     878\n3976      23491     878\n1294      27221     880\n2605      23301     906\n3908      23291     906\n1445      23249     907\n3963      23349     907\n4200      23341     907\n4229      23241     907\n1945      23479     908\n3855      23471     908\n3881      23369     908\n4196      23361     908\n4649      23351     908\n4014      24009     909\n4018      23519     909\n4189      23481     909\n4484      23489     909\n4598      23379     909\n4603      23371     909\n1132      27231     911\n3288      27241     911\n798       27211     912\n2014      27031     912\n3092      27219     912\n3428      27041     912\n1005      23439     937\n4847      23421     937\n3888      23031     939\n4923      23039     939\n2325      23079     940\n3165      23071     940\n2587      27021     943\n2941      27071     943\n652       23411     968\n3489      23429     968\n3882      23419     968\n1141      23251     969\n3796      23259     969\n3904      23269     969\n4187      23431     969\n672       23199     970\n2663      23191     970\n4819      23201     970\n4820      23209     970\n11        23151     971\n1120      23141     971\n1208      23121     971\n1393      23159     971\n1760      23129     971\n2216      23149     971\n2223      23139     971\n5058      23131     971\n3150      27251     973\n4599      27539     973\n1825      27069     974\n2622      27311     974\n3432      27061     974\n3436      27209     974\n3438      27011     975\n4186      31009     977\n3479      23261    1000\n170       23029    1001\n4810      23021    1001\n1429      23061    1002\n2545      23059    1002\n3989      23069    1002\n94        27149    1003\n107       27141    1003\n4402      27531    1003\n1500      27291    1004\n2485      27281    1004\n4089      27261    1004\n2438      27199    1005\n503       31121    1007\n1329      31129    1007\n2188      23401    1030\n4491      23409    1030\n661       23211    1032\n1058      23219    1032\n639       23109    1033\n1453      23169    1033\n2582      23179    1033\n3491      23119    1033\n3646      23161    1033\n4928      23111    1033\n628       23049    1034\n742       23051    1034\n5068      23041    1034\n1845      27131    1035\n2565      27271    1035\n3728      27139    1035\n4906      27279    1035\n5045      27159    1035\n2294      27189    1037\n4808      27181    1037\n1314      31139    1039\n2560      31131    1039\n739       23399    1061\n1644      23391    1061\n4285      23271    1062\n4895      23279    1062\n1249      23019    1063\n3807      23101    1063\n3846      23011    1063\n1710      23171    1064\n4023      27511    1065\n4602      27509    1065\n240       27419    1066\n1914      27411    1066\n3631      27329    1066\n4012      27321    1066\n806       27171    1067\n1075      31029    1068\n4393      31021    1068\n3003      22141    1094\n461       23189    1095\n2559      23091    1095\n3780      23181    1095\n3783      23099    1095\n482       22479    1096\n4601      27529    1096\n4965      22471    1096\n86        27301    1097\n280       22369    1097\n805       27369    1097\n2266      27361    1097\n2585      22361    1097\n2665      27519    1097\n3729      27429    1097\n4011      27309    1097\n4171      27421    1097\n4600      27501    1097\n686       31011    1099\n952       27169    1099\n2062      27129    1099\n2402      27179    1099\n3837      27121    1099\n4944      31019    1099\n369       31039    1100\n2576      31031    1100\n157       31059    1101\n968       31149    1101\n969       31141    1101\n1194      31051    1101\n7         23389    1123\n452       23381    1123\n640       22091    1123\n1549      23469    1123\n3798      23461    1123\n394       22399    1124\n3616      22059    1124\n4451      22391    1124\n1655      23509    1125\n1744      23501    1125\n3697      22159    1125\n4716      22151    1125\n2648      22609    1126\n3790      22179    1126\n3957      22171    1126\n522       22451    1127\n662       22459    1127\n1660      22529    1127\n2389      22521    1127\n2507      22469    1127\n4450      22461    1127\n4609      27521    1127\n4779      22531    1127\n141       27409    1128\n2790      27401    1128\n3834      27341    1128\n4531      27351    1128\n4722      27349    1128\n4749      27359    1128\n499       31041    1131\n4106      31049    1131\n949       31079    1132\n2495      31069    1132\n3934      31061    1132\n4731      31071    1132\n1223      32109    1133\n1569      32101    1133\n4812      34109    1133\n4813      34101    1133\n1542      23451    1154\n391       22401    1155\n763       22409    1155\n1029      22099    1155\n3004      22149    1156\n1956      22229    1157\n3497      22169    1157\n3641      22161    1157\n3992      22221    1157\n1566      22549    1158\n2000      22181    1158\n3644      22189    1158\n5003      22541    1158\n270       22359    1159\n1438      22231    1159\n4778      22249    1159\n4780      22239    1159\n4781      22241    1159\n5005      22351    1159\n234       27431    1160\n274       27391    1160\n1326      27439    1160\n1718      27381    1160\n2232      27389    1160\n4419      27399    1160\n558       31169    1163\n2683      31151    1163\n2848      31159    1163\n158       31081    1164\n478       31089    1164\n1958      31201    1164\n2627      31211    1164\n1476      32061    1168\n1614      22421    1185\n2249      22081    1185\n2659      22089    1185\n4538      22429    1185\n333       22041    1186\n1461      22049    1186\n5132      22051    1186\n1466      22039    1187\n3354      22031    1187\n3971      22029    1187\n3787      22191    1188\n3883      22199    1188\n3887      22299    1188\n4232      22271    1188\n4502      22511    1189\n4866      22519    1189\n4867      22539    1189\n339       27379    1190\n900       27371    1190\n1220      22341    1190\n3511      27331    1190\n4974      22349    1190\n787       27109    1191\n3509      27101    1191\n1110      32119    1197\n1587      32111    1197\n1968      32039    1197\n3775      32031    1197\n1196      32051    1198\n2140      32069    1198\n3682      32059    1198\n2         32071    1199\n1136      32081    1199\n1684      32079    1199\n2589      32089    1199\n1711      22331    1216\n691       22219    1219\n1650      22559    1220\n2139      22309    1220\n3015      22561    1220\n4490      22569    1220\n5034      22551    1220\n151       22259    1221\n409       22449    1221\n2122      22441    1221\n5049      22251    1221\n246       27449    1222\n677       27091    1222\n812       27459    1222\n1327      27441    1222\n1852      27099    1222\n1950      27451    1222\n228       31171    1225\n656       31179    1225\n1001      31161    1225\n1380      32049    1229\n2494      32041    1229\n282       33029    1231\n1431      33019    1231\n4985      33021    1231\n5077      33011    1231\n1         22069    1248\n799       22061    1248\n2287      22071    1248\n809       22019    1249\n5124      22021    1249\n208       22281    1250\n966       22289    1250\n2457      22329    1250\n3643      22319    1250\n397       22509    1251\n501       22501    1251\n743       22491    1251\n1996      22579    1251\n2092      22501    1251\n2253      22009    1251\n3927      22499    1251\n5151      22571    1251\n323       21379    1252\n676       21371    1252\n986       22411    1252\n1432      22419    1252\n4625      22599    1252\n5140      22591    1252\n3468      27461    1253\n3469      27469    1253\n1037      33049    1262\n2503      33039    1262\n5069      33031    1262\n3891      21329    1281\n4233      21321    1281\n1567      21349    1282\n1720      21341    1282\n3488      22439    1282\n4525      22431    1282\n263       21369    1283\n1117      22481    1283\n2203      21361    1283\n4788      22489    1283\n890       27479    1284\n1046      21381    1284\n4056      21389    1284\n1153      33059    1294\n1244      33041    1294\n1930      33051    1294\n1560      34039    1295\n3893      34021    1295\n4344      34031    1295\n4361      34029    1295\n1254      34051    1296\n2336      34059    1296\n3010      34009    1296\n682       22079    1310\n2213      21291    1310\n2451      21299    1310\n82        21319    1311\n1319      21311    1311\n2011      22011    1311\n297       21331    1312\n2082      21339    1312\n2353      21509    1312\n3909      21501    1312\n418       21351    1313\n850       21259    1313\n4242      21359    1313\n4703      21251    1313\n72        21421    1314\n341       21399    1314\n500       21391    1314\n1286      21411    1314\n4384      21429    1314\n123       27471    1315\n4005      31191    1317\n4739      31199    1317\n596       34019    1325\n1384      34011    1325\n2393      34041    1326\n2546      34049    1326\n464       21099    1341\n692       21301    1342\n1666      21309    1342\n2841      21489    1343\n4210      21481    1343\n4257      21499    1343\n4922      21491    1343\n3289      21511    1344\n3290      21519    1344\n3543      21261    1344\n3967      21269    1344\n1482      21409    1345\n1685      21419    1345\n1920      21691    1345\n4951      21699    1345\n936       21439    1346\n1899      21249    1346\n3229      21241    1346\n3456      21161    1346\n3457      21169    1346\n1015      30019    1349\n1752      21119    1372\n1901      21129    1372\n4971      21111    1372\n239       21431    1376\n706       21451    1376\n1034      21449    1376\n1193      21711    1376\n1857      21459    1376\n1861      21441    1376\n4955      21719    1376\n415       21469    1405\n1165      21479    1405\n2840      21461    1405\n4506      21471    1405\n248       21531    1406\n330       21521    1406\n3270      21529    1406\n197       21211    1407\n1639      21689    1407\n2075      21681    1407\n3795      21219    1407\n4861      21231    1407\n4948      21229    1407\n9         28531    1408\n1016      28409    1408\n4764      28411    1408\n5063      28539    1408\n725       30029    1411\n1425      30011    1411\n4385      30021    1411\n564       21139    1434\n599       21149    1434\n623       21141    1434\n1625      21131    1434\n3395      21121    1434\n4064      21049    1435\n4065      21041    1435\n484       21541    1436\n3695      21539    1436\n4227      21549    1436\n192       21611    1437\n846       21201    1437\n1151      21209    1437\n4545      21619    1437\n353       28091    1438\n2398      21239    1438\n3387      28421    1438\n4805      28099    1438\n2377      28541    1439\n3598      28551    1439\n1838      21109    1465\n2225      21069    1465\n4040      21089    1465\n1787      21151    1466\n3717      21159    1466\n346       21559    1467\n1156      21029    1467\n1378      21171    1467\n4094      21551    1467\n4441      21179    1467\n539       21591    1468\n856       21279    1468\n1772      21191    1468\n1773      21199    1468\n3340      21271    1468\n4183      21599    1468\n2502      21669    1469\n3524      21661    1469\n81        28521    1470\n1305      28391    1470\n1677      28401    1470\n1749      28399    1470\n2012      28529    1470\n4260      28611    1470\n68        28161    1471\n757       28151    1471\n3738      28169    1471\n4406      28159    1471\n2317      30039    1473\n2909      30041    1473\n4029      30031    1473\n388       21079    1496\n2442      21071    1496\n2480      21021    1497\n636       21181    1498\n1815      21581    1498\n2613      21571    1498\n3565      21751    1498\n3584      21589    1498\n3813      21189    1498\n4412      21579    1498\n4641      21759    1498\n4988      21569    1498\n4989      21561    1498\n713       21609    1499\n1125      21621    1499\n1632      21659    1499\n2117      21601    1499\n2364      21679    1499\n4143      21629    1499\n4275      21651    1499\n4348      21671    1499\n1292      28601    1500\n1611      28389    1500\n1683      28381    1500\n2753      28379    1500\n3630      28371    1500\n1186      28561    1501\n2155      21019    1529\n2426      21769    1529\n3478      21779    1529\n4434      21761    1529\n4993      21771    1529\n2252      21641    1530\n3885      21639    1530\n4002      21649    1530\n4241      21631    1530\n161       28501    1532\n736       28581    1532\n917       28511    1532\n2073      28519    1532\n4844      28509    1532\n66        30059    1535\n1262      30051    1535\n2910      30049    1535\n41        49249    1543\n1641      28369    1562\n4593      28361    1562\n4737      28591    1562\n171       28141    1563\n198       28571    1563\n931       28149    1563\n528       49239    1574\n2727      21059    1589\n2728      21051    1589\n2226      21011    1591\n303       28351    1593\n5000      28499    1594\n5076      28491    1594\n4026      30091    1598\n4028      30099    1598\n306       49209    1606\n1392      29019    1619\n4256      28271    1623\n457       28461    1624\n3597      28469    1624\n3802      28471    1624\n4292      28359    1624\n408       28139    1625\n1287      28131    1625\n4453      30089    1628\n2118      49229    1636\n2017      29021    1651\n4103      29011    1651\n454       29039    1652\n1691      29031    1652\n2313      28261    1654\n404       28281    1655\n412       28349    1655\n579       28459    1655\n611       28341    1655\n1129      28451    1655\n1138      28279    1655\n2357      28289    1655\n403       28129    1656\n437       28121    1656\n106       29041    1681\n2583      29049    1681\n688       29029    1682\n473       20121    1683\n3558      20249    1683\n3562      20241    1683\n1149      28081    1685\n1504      28269    1685\n3516      28079    1685\n5113      28089    1685\n1143      28291    1686\n1448      28111    1686\n1670      28481    1686\n1835      28119    1686\n4152      28299    1686\n3412      43759    1687\n4145      43751    1687\n909       44689    1690\n1337      44559    1690\n1558      44071    1690\n2098      44079    1690\n2153      44629    1690\n2254      30081    1690\n3873      44551    1690\n4479      44621    1690\n2423      49211    1698\n4369      49199    1698\n4616      49219    1698\n389       20129    1714\n3670      20179    1714\n4705      20171    1714\n1800      20081    1715\n1853      29159    1715\n4263      20089    1715\n200       28439    1716\n574       28259    1716\n912       28441    1716\n3030      28211    1716\n3183      28301    1716\n4341      28431    1716\n4858      28251    1716\n4860      28249    1716\n1222      28331    1717\n1311      28339    1717\n2053      28329    1717\n3177      28321    1717\n1054      43769    1718\n1226      43761    1718\n2778      43453    1718\n2779      43452    1718\n2900      40321    1718\n2901      40329    1718\n3895      43459    1718\n4130      43349    1718\n2129      43789    1719\n2340      43781    1719\n2890      40311    1719\n3094      40361    1719\n2830      30119    1721\n2834      30109    1721\n2835      30101    1721\n295       44501    1722\n993       44509    1722\n3388      44519    1722\n1348      45249    1723\n2461      45241    1723\n534       29129    1743\n4920      29121    1743\n580       20211    1745\n4236      20219    1745\n4276      20239    1745\n4899      20231    1745\n1389      28239    1746\n2076      28201    1746\n3843      28241    1746\n4954      28231    1746\n1108      28311    1747\n1275      28069    1747\n1282      28319    1747\n1288      28449    1747\n1905      28071    1747\n3692      43351    1748\n4080      43359    1748\n681       40301    1749\n2836      40309    1749\n2888      40351    1749\n2889      40359    1749\n2898      40341    1749\n2899      40349    1749\n2904      40339    1749\n5060      40331    1749\n2961      43771    1750\n2962      43779    1750\n430       44589    1752\n433       44581    1752\n612       44081    1752\n731       44089    1752\n1303      44511    1752\n2905      44591    1752\n2906      44599    1752\n3060      45451    1752\n3612      44569    1752\n4310      44571    1752\n4685      44561    1752\n163       44499    1753\n1100      45239    1753\n1946      44491    1753\n4360      45231    1753\n1795      45259    1754\n2135      45311    1754\n2435      45319    1754\n3610      45251    1754\n1452      46239    1767\n1428      29051    1774\n3995      29059    1774\n47        20251    1776\n777       20169    1776\n872       20161    1776\n4219      20209    1776\n4957      20259    1776\n165       28221    1777\n298       20061    1777\n147       28061    1778\n2686      28009    1778\n4721      28199    1778\n139       28631    1779\n372       28621    1779\n641       28639    1779\n1056      28629    1779\n292       43531    1780\n601       43341    1780\n2240      43331    1780\n2902      43339    1780\n3672      43539    1780\n3709      43329    1780\n5161      43321    1780\n3203      40369    1781\n4076      40379    1781\n4077      40371    1781\n416       43671    1782\n460       43679    1782\n2831      30111    1783\n2832      30129    1783\n2833      30121    1783\n3370      44181    1783\n3372      44189    1783\n2138      44459    1784\n2144      44451    1784\n3166      44529    1784\n3324      44481    1784\n3335      44489    1784\n4192      44469    1784\n4251      44461    1784\n4436      44521    1784\n2851      45341    1786\n3128      45271    1786\n4653      45279    1786\n138       49149    1791\n4115      29111    1804\n718       20069    1807\n3210      20201    1807\n3556      20059    1807\n3978      20051    1807\n4515      20261    1807\n4523      20269    1807\n1003      28051    1808\n2241      28649    1809\n5056      28641    1809\n335       43379    1810\n1386      43691    1810\n2530      43699    1810\n3222      43381    1810\n4081      43369    1810\n4093      43371    1810\n4787      43361    1810\n1910      43401    1811\n4467      43409    1811\n432       43681    1812\n1333      43481    1812\n1717      43841    1812\n2214      43489    1812\n2338      43499    1812\n3633      44171    1813\n214       44091    1814\n1531      44579    1814\n1827      44101    1814\n4527      44109    1814\n3017      44009    1815\n3333      44539    1815\n3718      44549    1815\n4799      44531    1815\n1547      45299    1816\n1776      45309    1816\n1951      45301    1816\n2022      45291    1816\n2813      45461    1816\n2850      45469    1816\n3127      45261    1816\n3747      45269    1816\n4319      45479    1816\n3119      45331    1817\n3120      45339    1817\n4020      45409    1817\n4053      45389    1817\n4607      45381    1817\n5008      45401    1817\n1770      45449    1821\n1881      45441    1821\n2469      49141    1822\n1356      29069    1836\n3481      29119    1836\n3907      29149    1836\n715       20189    1838\n1702      20159    1838\n2411      20151    1838\n2498      20191    1838\n2933      20149    1838\n2934      20141    1838\n4777      20199    1838\n4933      20181    1838\n3174      28309    1839\n3181      20271    1839\n3529      28229    1839\n2913      28059    1840\n3723      28651    1840\n3801      28659    1840\n4120      43391    1842\n4137      43399    1842\n702       43601    1843\n2875      43471    1843\n2876      43469    1843\n2877      43461    1843\n2878      43479    1843\n17        43659    1844\n124       43831    1844\n2221      43839    1844\n2489      43491    1844\n3875      43669    1844\n4009      44179    1844\n5114      44899    1845\n5115      44891    1845\n5116      44879    1845\n5117      44871    1845\n235       44441    1846\n987       44111    1846\n1325      44399    1846\n3327      44479    1846\n3698      44119    1846\n3998      44449    1846\n4408      44391    1846\n5107      44471    1846\n3334      44541    1847\n364       45329    1848\n655       45321    1848\n3118      45349    1848\n3121      45351    1848\n3123      45359    1848\n1370      45411    1849\n4308      45419    1849\n1167      49069    1852\n1601      49079    1852\n1841      49061    1852\n2526      49071    1852\n144       49169    1853\n619       49089    1853\n1044      49151    1853\n2464      49159    1853\n4382      49081    1853\n1860      29101    1866\n2492      29099    1866\n3874      29109    1866\n945       20329    1868\n2425      20331    1868\n2957      20139    1868\n2958      20131    1868\n2911      28041    1870\n2912      28049    1870\n1479      28661    1871\n4154      28679    1871\n4950      28669    1871\n183       43591    1872\n385       43511    1872\n1268      43519    1872\n1351      43389    1872\n3103      43749    1872\n3104      43741    1872\n4088      43599    1872\n705       43809    1873\n3105      43411    1873\n3782      43801    1873\n4774      43419    1873\n710       43589    1874\n714       43581    1874\n1583      43521    1875\n2598      43529    1875\n3634      44161    1875\n3635      44169    1875\n450       44129    1876\n1810      44121    1876\n2903      44881    1876\n5118      44889    1876\n2812      45489    1878\n4485      45361    1878\n4894      45369    1878\n526       45391    1879\n3122      45399    1879\n3684      45439    1879\n4016      45429    1879\n4329      45421    1879\n4690      45431    1879\n1199      49031    1881\n1562      49039    1881\n1420      49059    1882\n1987      49051    1882\n242       29089    1898\n847       29081    1898\n1170      29071    1898\n2434      29139    1898\n342       20319    1899\n493       20341    1899\n3808      20309    1899\n1626      28039    1901\n3791      28031    1901\n1609      43709    1904\n2625      43179    1904\n3109      43421    1904\n3410      43701    1904\n3411      43709    1904\n3983      43009    1904\n4190      43429    1904\n684       43571    1905\n693       43561    1905\n700       43609    1905\n708       43579    1905\n1575      43569    1905\n1415      43649    1906\n3520      43641    1906\n996       44151    1907\n1514      44159    1907\n1379      44291    1908\n2267      44281    1908\n2296      44299    1908\n2399      44439    1908\n4645      44289    1908\n2798      45031    1910\n2799      45039    1910\n2800      45379    1910\n2801      45371    1910\n1126      49019    1912\n1127      49021    1912\n1367      49011    1912\n1421      49029    1912\n1052      49049    1913\n1150      49041    1913\n1437      49171    1915\n1918      49179    1915\n2210      49181    1915\n4258      49189    1915\n1318      29091    1928\n2915      20281    1930\n2922      20289    1930\n3515      20039    1931\n4133      20031    1931\n1580      28671    1933\n2649      28689    1933\n4532      28681    1933\n396       43739    1934\n671       43509    1934\n2855      43501    1934\n3350      43731    1934\n3351      43141    1934\n3194      43541    1935\n3208      43549    1935\n343       44131    1938\n610       44271    1938\n947       44421    1938\n1873      44139    1938\n4246      44411    1938\n2780      43991    1939\n2802      45021    1940\n2803      45029    1940\n2891      44999    1940\n2892      45491    1940\n648       45159    1941\n2473      45161    1941\n2796      45041    1941\n5033      45151    1941\n2168      49139    1942\n2808      45071    1942\n2809      45061    1942\n4909      49131    1942\n59        45101    1943\n1358      45109    1943\n1813      45091    1943\n3897      49119    1945\n4897      49101    1945\n4938      49111    1945\n4328      20299    1961\n4370      20291    1961\n3182      20021    1962\n3620      20029    1962\n2979      28029    1963\n3886      28021    1963\n1513      28699    1964\n4952      28691    1964\n111       43311    1965\n822       43219    1965\n1203      43211    1965\n3352      43149    1965\n319       43439    1966\n631       43431    1966\n1390      43169    1966\n1465      43171    1966\n4367      43161    1966\n4743      44279    1970\n2804      45011    1971\n2805      44061    1971\n2806      45019    1971\n2797      45049    1972\n606       45171    1973\n2054      45179    1973\n2795      45059    1973\n2810      45069    1973\n2811      45051    1973\n4940      45169    1973\n605       45229    1974\n1395      45099    1974\n1727      45221    1974\n2807      45079    1974\n765       45111    1975\n4718      45119    1975\n2219      49109    1976\n2816      49091    1976\n2817      49099    1976\n1247      49121    1977\n1339      49129    1977\n2916      17339    1991\n2917      17331    1991\n2918      17329    1991\n4202      28011    1993\n3486      28709    1994\n3547      28181    1994\n4194      28189    1994\n4946      28701    1994\n1317      43319    1995\n3490      42319    1995\n4519      42311    1995\n146       43611    1996\n1724      43619    1996\n1991      43191    1996\n3227      43181    1996\n3447      43199    1996\n4695      43189    1996\n901       43449    1997\n1027      43231    1997\n1224      43239    1997\n5109      43441    1997\n2263      43719    1999\n2321      44149    2000\n4846      44141    2000\n1355      44051    2001\n1357      44791    2001\n2311      44861    2001\n3591      44069    2001\n4466      44059    2001\n4539      44801    2001\n4848      44869    2001\n4945      44809    2001\n944       45149    2006\n1134      45121    2006\n1324      45141    2006\n1737      45129    2006\n2963      45131    2006\n2101      17279    2022\n2443      17311    2022\n2919      17321    2022\n2921      17319    2022\n190       17079    2023\n468       20011    2023\n922       17071    2023\n563       17051    2024\n683       20101    2024\n998       17009    2024\n4141      17059    2024\n1688      28019    2025\n3939      28109    2026\n5047      28101    2026\n638       43621    2027\n3211      43629    2027\n2322      43229    2028\n2483      43221    2028\n40        43301    2029\n219       43309    2029\n624       43289    2029\n1481      43249    2029\n2042      43259    2029\n2183      43251    2029\n2199      43241    2029\n2360      43291    2029\n1183      44011    2031\n3652      43119    2031\n3654      43111    2031\n288       44401    2032\n2077      44259    2032\n2094      44649    2032\n2312      44799    2032\n2691      44909    2032\n2974      44049    2032\n3539      44041    2032\n3793      44641    2032\n5079      44251    2032\n3236      44811    2033\n5152      44819    2033\n202       45181    2036\n4714      45189    2036\n2862      46029    2038\n2866      46021    2038\n1158      17361    2052\n4495      17369    2052\n4838      17081    2052\n117       17269    2053\n3896      17069    2053\n5155      17061    2053\n2235      20019    2054\n2980      17179    2054\n3048      17171    2054\n871       17371    2055\n1304      20109    2055\n2028      17379    2055\n266       42299    2057\n1368      42209    2057\n1369      42201    2057\n3899      42291    2057\n1310      43201    2058\n4628      43209    2058\n758       43268    2060\n1865      43267    2060\n2886      43261    2060\n658       43721    2061\n3655      43109    2061\n3658      43099    2061\n3659      43091    2061\n1130      44029    2062\n2556      44859    2062\n2679      44031    2062\n2849      45009    2062\n4283      44019    2062\n4327      44021    2062\n4565      44731    2062\n4566      44739    2062\n109       44651    2063\n1212      44669    2063\n1523      44661    2063\n1697      44659    2063\n3916      44829    2063\n3917      44821    2063\n4100      44721    2063\n2359      45199    2066\n4708      45191    2066\n2964      45139    2068\n2078      46031    2069\n2081      46039    2069\n2109      46609    2073\n337       17011    2083\n852       17021    2083\n1398      17019    2083\n4211      17309    2083\n4513      17301    2083\n5048      17359    2083\n26        17049    2084\n552       17039    2084\n1391      17041    2084\n1741      17289    2084\n4131      17031    2084\n905       17139    2085\n982       17141    2085\n1033      17131    2085\n1682      17149    2085\n2482      17239    2085\n2984      17259    2085\n2986      17251    2085\n3405      17161    2085\n1109      17219    2086\n2453      17181    2086\n3407      17189    2086\n5142      17211    2086\n1019      17409    2087\n1469      12209    2087\n1615      17419    2087\n2308      12201    2087\n4193      42211    2089\n4199      42219    2089\n1166      43819    2091\n2675      43811    2091\n4569      43829    2091\n4570      43821    2091\n600       43151    2092\n3653      43071    2092\n3656      43089    2092\n3660      43081    2092\n4959      43159    2092\n618       44639    2094\n1511      44241    2094\n2020      44631    2094\n3169      44249    2094\n3860      44831    2095\n3861      44839    2095\n3862      44729    2095\n3712      45201    2098\n2704      46381    2100\n2705      46389    2100\n466       46041    2101\n711       46049    2101\n3618      46101    2102\n548       47701    2104\n1699      16081    2113\n2642      17351    2113\n3566      17291    2113\n4750      16089    2113\n5032      17299    2113\n379       17389    2114\n2269      17029    2114\n3283      16149    2114\n4135      16141    2114\n4840      17381    2114\n2400      17191    2115\n4025      16991    2115\n673       17241    2116\n978       17249    2116\n3404      17169    2116\n2406      17201    2117\n2579      17399    2117\n837       17439    2118\n4740      17429    2118\n186       42229    2119\n824       42241    2119\n2306      42249    2119\n4237      42221    2119\n4509      42309    2119\n4926      42301    2119\n256       42191    2120\n1763      42199    2120\n4207      43631    2120\n1921      43041    2121\n4571      43049    2121\n853       43271    2122\n2212      43059    2122\n2777      42991    2122\n2966      43061    2122\n3176      43051    2122\n3657      43069    2122\n4910      43279    2122\n262       43121    2123\n1496      43129    2123\n2051      43879    2123\n365       44191    2124\n381       44219    2124\n660       44201    2124\n685       44211    2124\n1863      44239    2124\n3767      44199    2124\n4758      44209    2124\n230       44671    2125\n1633      44679    2125\n4295      44619    2125\n4862      44611    2125\n1588      45209    2128\n2187      46059    2132\n3527      46051    2132\n3806      46091    2132\n1769      46109    2133\n2121      46211    2135\n5139      46219    2135\n913       16009    2145\n2335      16139    2145\n3281      16199    2145\n3284      16191    2145\n4462      16131    2145\n811       17129    2146\n1360      17121    2146\n1774      16151    2146\n3232      16159    2146\n1012      17091    2147\n1470      16891    2147\n2345      17159    2147\n4911      17151    2147\n2211      12119    2148\n3408      17229    2148\n3741      17119    2148\n4669      17221    2148\n4696      17111    2148\n2432      42171    2151\n3496      42239    2151\n3545      42181    2151\n4117      42231    2151\n4524      42179    2151\n5129      42189    2151\n3541      43019    2152\n3814      43639    2152\n4572      43029    2152\n4573      43021    2152\n1352      43869    2154\n1779      43859    2154\n4082      43899    2154\n4083      43891    2154\n1525      43139    2155\n3745      43131    2155\n3         44331    2156\n1250      44341    2156\n1822      44321    2156\n2003      44609    2156\n2470      44231    2156\n2965      44339    2156\n3737      44601    2156\n4528      44349    2156\n726       44691    2157\n1204      44699    2157\n4688      44701    2157\n4692      44709    2157\n3991      45211    2160\n2506      46519    2163\n2706      46088    2164\n3477      46069    2164\n663       16061    2175\n690       16071    2175\n1880      16069    2175\n2669      16079    2175\n4537      16241    2175\n114       16171    2176\n355       16181    2176\n1631      16169    2176\n2356      16189    2176\n5136      16179    2176\n4526      19059    2177\n4834      17099    2177\n3740      17101    2178\n3742      17109    2178\n406       12079    2179\n2352      12071    2179\n3661      12061    2179\n3662      12069    2179\n1943      42161    2181\n1849      43011    2182\n2844      42111    2182\n3964      42119    2182\n4761      43889    2185\n828       44221    2186\n1281      44301    2186\n1871      44269    2186\n3504      44261    2186\n4557      44229    2186\n3858      44779    2187\n3859      44771    2187\n3865      44919    2187\n3866      44911    2187\n120       46529    2193\n436       46499    2193\n1422      46511    2193\n1736      46521    2193\n2395      46591    2193\n3098      46491    2193\n753       46119    2194\n3889      46501    2194\n4278      46019    2194\n4610      46509    2194\n4811      46011    2194\n4990      46111    2194\n1234      46159    2195\n4849      46151    2195\n2405      16249    2206\n2176      16161    2208\n3217      19041    2209\n3221      19049    2209\n3548      19051    2209\n1508      12051    2210\n3739      12111    2210\n4817      12059    2210\n1114      12081    2211\n4287      12089    2211\n2114      42169    2213\n3498      42151    2213\n3965      42159    2213\n4079      42099    2213\n4520      42091    2213\n207       44369    2216\n2044      44361    2216\n3016      43961    2216\n4084      43969    2216\n1540      44379    2217\n1868      44389    2217\n2363      44371    2217\n2640      44381    2217\n3863      44929    2218\n3864      44921    2218\n4111      44329    2218\n4939      44311    2218\n164       48011    2222\n3690      48019    2222\n863       46379    2224\n938       46369    2224\n1617      45591    2224\n1678      46361    2224\n2089      46371    2224\n3330      45599    2224\n384       46589    2225\n1672      46579    2225\n1743      46581    2225\n3385      46571    2225\n977       46169    2226\n1178      46161    2226\n3599      46149    2226\n4153      46141    2226\n4522      46129    2226\n4924      46121    2226\n42        16051    2237\n264       16041    2237\n2620      16059    2237\n2676      16049    2237\n1168      18311    2238\n1175      16099    2238\n1753      18319    2238\n3530      18329    2238\n4250      18321    2238\n455       19061    2239\n2091      19069    2239\n80        12199    2240\n3809      12179    2240\n958       12041    2241\n2282      12049    2241\n344       12099    2242\n762       12091    2242\n2193      12109    2242\n2722      42079    2243\n3480      42141    2243\n4212      42071    2243\n4243      42109    2244\n1006      44359    2247\n5145      44351    2247\n788       46531    2255\n2177      46539    2255\n19        46709    2256\n128       46189    2256\n361       46079    2256\n1232      46201    2256\n2236      46181    2256\n2422      46209    2256\n4854      46071    2256\n462       46139    2257\n2661      46131    2257\n1177      16029    2268\n1598      16039    2268\n1948      16231    2268\n2409      16239    2268\n3266      16101    2268\n3765      16031    2268\n3821      16109    2268\n4336      16021    2268\n358       19021    2271\n2717      19039    2271\n2718      19031    2271\n4224      12211    2272\n4354      12151    2272\n4807      12169    2272\n1242      12101    2274\n4114      42149    2274\n12        42089    2275\n3437      42259    2275\n363       48029    2284\n1834      48021    2284\n1944      46611    2286\n3685      46629    2286\n4288      46621    2286\n4553      46619    2286\n2342      46559    2287\n3384      46561    2287\n3386      46569    2287\n2133      46241    2288\n2927      46319    2288\n2928      46311    2288\n3923      46249    2288\n4611      46171    2288\n4856      46179    2288\n3977      47019    2289\n4220      47011    2289\n451       16011    2298\n2674      16019    2298\n4818      16229    2298\n5013      16221    2298\n1919      18301    2300\n1986      16091    2300\n3172      18309    2300\n814       19091    2301\n3247      19099    2301\n4197      19071    2301\n4677      19079    2301\n620       12141    2302\n1949      12189    2302\n4510      12149    2302\n1729      12039    2303\n2128      12031    2303\n2471      42061    2305\n4918      42059    2305\n1180      48111    2314\n3833      48119    2314\n112       46549    2317\n1754      46359    2317\n4071      45581    2317\n4072      45589    2317\n4675      46541    2317\n223       46191    2318\n4170      46199    2318\n864       16209    2329\n1274      15229    2329\n2027      16211    2329\n2430      16219    2329\n2887      16201    2329\n3373      15221    2329\n56        15109    2330\n76        16121    2330\n420       15119    2330\n2162      15121    2330\n2558      16119    2330\n2764      16111    2330\n3607      15111    2330\n4413      15101    2330\n4755      15129    2330\n990       18221    2331\n992       18239    2331\n2532      18339    2331\n4478      18331    2331\n4859      18071    2331\n5094      18079    2331\n3321      19081    2332\n4835      19089    2332\n199       19029    2333\n3326      11299    2334\n3406      12029    2334\n5051      12021    2334\n3487      42049    2336\n3788      42051    2336\n1313      48039    2346\n1544      48031    2346\n182       46299    2349\n973       46551    2349\n1703      46008    2349\n2644      46291    2349\n2938      46309    2350\n3876      46301    2350\n3974      47029    2351\n4832      47021    2351\n597       15099    2360\n940       15091    2360\n3563      15071    2360\n2682      15189    2361\n3153      18249    2361\n3420      15181    2361\n3421      18241    2361\n3430      15139    2361\n3518      15131    2361\n4422      18101    2361\n368       18129    2362\n2449      18059    2362\n2630      18119    2362\n4033      18121    2362\n4995      18051    2362\n3980      19011    2363\n4060      19019    2363\n2647      12139    2364\n5054      12131    2364\n145       46349    2379\n1884      46341    2379\n3537      46221    2379\n3538      46229    2379\n3823      46351    2379\n2143      46269    2380\n4543      46271    2380\n5141      46279    2380\n278       47201    2381\n4624      47201    2381\n425       15219    2391\n1200      15079    2391\n4733      15211    2391\n4294      18279    2392\n4401      18271    2392\n88        18099    2393\n791       18081    2393\n1225      18109    2393\n1993      18089    2393\n3148      18021    2393\n3348      18069    2393\n3349      18061    2393\n3841      18029    2393\n3117      18141    2394\n4975      18149    2394\n741       12129    2395\n3124      11351    2395\n3125      11199    2395\n3126      11009    2395\n3665      11009    2395\n4222      11359    2395\n5042      12121    2395\n118       11291    2396\n1279      11301    2396\n2134      11311    2396\n2361      11281    2396\n2368      11309    2396\n60        42039    2398\n976       42031    2398\n4235      42041    2398\n2771      48131    2407\n4418      48041    2408\n4529      48049    2408\n71        58479    2410\n1780      58439    2410\n4536      58449    2410\n334       46649    2411\n830       46339    2411\n2178      46009    2411\n3006      46321    2411\n4359      46641    2411\n4782      46639    2411\n4783      46631    2411\n4784      46329    2411\n14        46261    2412\n204       46451    2412\n370       46449    2412\n2472      46459    2412\n3188      46441    2412\n351       47039    2413\n2305      47031    2413\n2285      15209    2421\n2424      15191    2421\n4656      15201    2421\n1160      18251    2423\n1497      18269    2423\n2633      18131    2423\n4067      18049    2423\n4482      18261    2423\n2231      18159    2424\n4746      18151    2424\n2156      11191    2425\n3839      11189    2425\n4198      11369    2425\n4476      11181    2425\n4929      11361    2425\n1122      11271    2426\n2166      11279    2426\n3164      11289    2426\n1142      11329    2427\n1207      11331    2427\n1462      11321    2427\n3445      11319    2427\n331       46979    2441\n1316      46331    2441\n4706      46971    2441\n5098      58461    2441\n5144      46951    2441\n1902      46251    2442\n3007      46281    2442\n3008      46289    2442\n1767      18041    2454\n4019      18281    2454\n4691      18289    2454\n1731      18199    2455\n2791      18201    2455\n779       11379    2457\n2511      11259    2457\n3272      11389    2457\n196       11349    2459\n2310      11339    2459\n4713      11341    2459\n1543      42029    2460\n2664      42021    2460\n1839      46969    2472\n2786      46981    2472\n2787      46989    2472\n3733      46961    2472\n405       46661    2473\n2401      47581    2473\n2549      46679    2473\n3623      46671    2473\n3734      46669    2473\n4001      47589    2473\n2318      46431    2474\n2618      46411    2474\n4934      46439    2474\n4969      46419    2474\n1009      47041    2475\n2638      47049    2475\n3417      15169    2483\n3435      15161    2483\n4390      15199    2483\n3049      18211    2485\n1255      18171    2486\n1410      18179    2486\n1895      18189    2486\n4364      18181    2486\n735       11171    2487\n2501      11179    2487\n3115      11381    2487\n3116      11409    2487\n3902      11401    2487\n3522      11269    2488\n3523      11261    2488\n899       42129    2490\n1889      42139    2490\n4663      42011    2490\n4664      42019    2490\n5018      42131    2490\n421       47571    2503\n1557      47509    2503\n2058      46659    2503\n2173      47579    2503\n2658      46651    2503\n4166      47511    2503\n5102      47501    2503\n810       46391    2504\n1076      46401    2504\n1373      46399    2504\n2563      46699    2504\n4280      46421    2504\n4694      46691    2504\n4736      46429    2504\n5143      46409    2504\n3759      46461    2505\n3824      46469    2505\n637       47051    2506\n3810      47059    2506\n696       18209    2517\n4900      18191    2517\n543       11459    2518\n889       11161    2518\n3606      11169    2518\n4415      11429    2518\n4614      11451    2518\n3969      11419    2519\n1347      46999    2534\n1603      47539    2534\n4400      46991    2534\n257       46689    2535\n1456      46851    2535\n1846      46681    2535\n2914      46859    2535\n20        46831    2536\n1030      46811    2536\n2104      46841    2536\n2191      46821    2536\n3500      47179    2538\n2518      14419    2544\n318       15159    2545\n1161      15151    2545\n3929      11039    2547\n4279      11031    2547\n3151      11059    2548\n3715      11449    2548\n3766      11441    2548\n4132      11051    2548\n4719      11041    2548\n4340      11439    2549\n2344      41089    2552\n4665      41081    2552\n1922      48059    2563\n4893      48051    2563\n1554      47499    2565\n1555      47491    2565\n1584      47521    2565\n1595      47529    2565\n2158      47569    2565\n4006      47561    2565\n1443      46769    2566\n1900      46779    2566\n4454      46761    2566\n4937      46771    2566\n97        46809    2567\n176       46791    2567\n544       46801    2567\n669       46799    2567\n2814      46479    2567\n2815      46471    2567\n424       47069    2568\n3383      46711    2568\n3418      46719    2568\n4253      47061    2568\n285       15149    2576\n2220      14401    2576\n2281      15141    2576\n3898      14409    2576\n1063      18011    2577\n1894      18019    2577\n513       11511    2578\n1068      11519    2578\n4090      11599    2579\n5026      11049    2579\n910       11469    2580\n1520      11061    2580\n3778      11069    2580\n1023      11081    2581\n1936      11089    2581\n3424      11231    2581\n4264      11239    2581\n99        47551    2597\n2152      47559    2597\n2354      46869    2597\n4087      46861    2597\n4839      46871    2597\n5015      46879    2597\n2111      47601    2598\n4148      46781    2598\n4312      47661    2598\n4786      46789    2598\n2307      46489    2599\n3555      46481    2599\n4831      46729    2599\n4927      46721    2599\n439       47079    2600\n1066      47071    2600\n3161      47189    2600\n3642      47199    2600\n3817      47169    2600\n4223      47141    2601\n4514      47131    2601\n2677      14429    2606\n91        15051    2607\n95        15041    2607\n96        15049    2607\n3926      15059    2607\n907       14369    2608\n4734      14211    2608\n5         11561    2609\n486       11021    2609\n1302      11579    2609\n1817      11609    2609\n2023      11589    2609\n2268      11029    2609\n4983      11541    2609\n4984      11551    2609\n491       11159    2610\n1473      11151    2610\n3376      11489    2610\n3379      11471    2610\n4544      11481    2610\n4638      11479    2610\n885       11079    2611\n1372      11071    2611\n3501      11099    2612\n4712      11091    2612\n5106      11109    2612\n1401      41071    2614\n3167      41079    2614\n3546      48061    2625\n3812      48069    2625\n1174      47549    2628\n1400      47609    2628\n2720      47759    2628\n2788      47751    2628\n3356      47599    2628\n3357      47641    2628\n3722      47659    2628\n4323      47649    2628\n4654      47541    2628\n4775      47591    2628\n2149      46731    2629\n2229      46739    2629\n2234      47671    2629\n609       47091    2631\n1701      47089    2631\n2204      47081    2631\n3239      47121    2631\n3258      47129    2631\n4505      47099    2631\n668       14171    2638\n1231      14179    2638\n2528      14189    2638\n3367      14499    2638\n4729      14491    2638\n2703      14501    2639\n861       11521    2640\n866       10131    2640\n1455      10139    2640\n2639      11529    2640\n3213      11019    2640\n167       11131    2641\n1053      11141    2641\n4206      11149    2641\n243       11221    2643\n2083      11229    2643\n2420      11219    2643\n49        11101    2644\n426       11119    2644\n1903      11111    2644\n960       41069    2645\n2575      41061    2645\n4030      41051    2645\n1627      48089    2655\n3569      48071    2656\n4960      48079    2656\n703       47611    2660\n2657      47619    2660\n3724      47651    2660\n4322      47681    2660\n2247      46941    2661\n2491      46931    2661\n4508      46881    2661\n1013      47821    2662\n1818      47829    2662\n2493      47151    2663\n894       14329    2669\n1613      14509    2669\n2378      14399    2669\n1090      14209    2670\n1173      14471    2670\n1649      14201    2670\n2702      14219    2670\n119       11531    2671\n1796      11539    2671\n2599      11139    2671\n1121      11499    2672\n1521      11491    2672\n1042      11211    2673\n3645      48149    2687\n3786      48141    2687\n102       46749    2691\n505       46741    2691\n1630      46901    2691\n1940      47629    2691\n3180      47621    2691\n3499      46891    2691\n201       47819    2693\n2519      47811    2693\n1798      14169    2700\n1893      14161    2700\n3369      14359    2700\n3378      14351    2700\n4399      14391    2701\n132       10419    2702\n142       10401    2702\n302       10119    2702\n802       10441    2702\n2510      10111    2702\n3451      10599    2702\n4487      10409    2702\n5035      10449    2702\n1828      10309    2703\n4597      10301    2703\n4956      10461    2703\n4796      11209    2705\n268       41109    2706\n1942      41101    2706\n1315      41041    2707\n1407      41049    2707\n1926      48081    2717\n4852      48099    2717\n4151      58301    2722\n5075      58309    2722\n1599      46911    2723\n1648      46921    2723\n3492      58369    2724\n1409      47119    2725\n2277      47111    2725\n3549      47109    2725\n3966      47101    2725\n1411      14151    2730\n924       14051    2731\n1529      14049    2731\n1802      14349    2731\n3743      14339    2731\n3744      14331    2731\n4096      14041    2731\n4403      14341    2731\n73        10659    2732\n150       14199    2732\n1833      10101    2732\n3559      14191    2732\n4105      10109    2732\n84        10289    2733\n920       10281    2733\n991       10211    2733\n1097      10411    2733\n1681      10219    2733\n2043      10291    2733\n3133      10429    2733\n4457      10299    2733\n4824      10469    2734\n979       13029    2735\n1758      13021    2735\n1840      11201    2735\n665       41119    2737\n3252      41111    2737\n4078      41031    2737\n687       41131    2738\n2010      41139    2738\n804       48109    2747\n3999      48091    2747\n1349      58389    2753\n1705      58279    2753\n4379      58381    2753\n4448      58271    2753\n1298      58351    2754\n2631      58359    2754\n1176      47801    2755\n2433      47809    2755\n3905      58361    2755\n795       14159    2762\n5133      14241    2763\n1000      10451    2764\n2339      10439    2764\n3134      10431    2764\n3141      10459    2764\n5159      10421    2764\n807       10319    2765\n963       10311    2765\n2407      10321    2765\n3143      10329    2765\n4789      10479    2765\n4949      10471    2765\n327       41129    2769\n2591      41121    2769\n831       48101    2779\n1217      58281    2784\n3455      58289    2784\n995       58349    2785\n1480      58329    2785\n2758      58321    2785\n3736      58341    2785\n876       58459    2786\n2362      58451    2786\n1026      14009    2792\n1433      14139    2792\n4358      14131    2792\n50        14281    2793\n790       14059    2793\n2239      14279    2793\n3615      14271    2793\n1258      10091    2794\n2090      10009    2794\n2497      10099    2794\n3453      10331    2794\n4416      10651    2794\n1276      10271    2795\n2619      10209    2795\n3140      10201    2795\n3142      10279    2795\n79        13031    2796\n4282      13039    2796\n3461      13019    2797\n3465      13011    2797\n1171      41029    2799\n2671      41011    2799\n3019      41021    2799\n255       41159    2801\n4346      41151    2801\n1751      56081    2808\n3686      56089    2808\n253       57149    2809\n3394      57011    2809\n3397      57019    2809\n4477      57141    2809\n3585      58571    2814\n3588      58579    2814\n2724      58319    2815\n2726      58229    2815\n2756      58221    2815\n2763      58259    2815\n3254      58251    2815\n2026      58409    2816\n3594      58411    2816\n4635      58401    2816\n4962      58419    2816\n2615      58141    2817\n4267      58149    2817\n2137      14121    2823\n4827      14489    2824\n15        10339    2825\n2159      14259    2825\n2601      14249    2825\n3086      14269    2825\n492       10489    2826\n1115      10181    2826\n3139      10199    2826\n3475      10481    2826\n4828      10191    2826\n169       13041    2828\n3835      13049    2828\n2256      41141    2832\n2396      41149    2832\n3872      41169    2832\n2136      56079    2839\n2459      56071    2839\n3393      56091    2840\n3402      56099    2840\n3716      57039    2841\n3993      57029    2841\n4465      57021    2841\n279       58299    2846\n2653      58371    2846\n2655      58379    2846\n3260      58291    2846\n312       58121    2847\n644       58129    2847\n902       58311    2847\n1990      58211    2847\n2029      58421    2847\n2041      58111    2847\n2288      58429    2847\n2757      58119    2847\n4380      58219    2847\n4389      58161    2848\n4420      58169    2848\n1451      14129    2854\n3138      14119    2854\n5084      14141    2854\n999       14031    2855\n1195      14319    2855\n1674      14299    2855\n2116      14291    2855\n3696      14039    2855\n542       10341    2856\n1608      10349    2856\n2202      10089    2856\n3997      10081    2856\n659       10261    2857\n1652      10241    2857\n2198      10269    2857\n2621      10189    2857\n3669      09141    2859\n4568      09149    2859\n4699      13201    2859\n1024      41019    2861\n2466      40091    2861\n4091      40099    2861\n105       56061    2869\n1645      56069    2869\n950       57049    2872\n2170      57031    2872\n3961      57041    2872\n767       57051    2873\n64        58151    2877\n137       58101    2877\n2084      58009    2877\n3710      58109    2877\n4112      58241    2877\n4657      58159    2877\n4727      58249    2877\n2260      58131    2878\n4172      58139    2878\n1184      14519    2884\n1709      14379    2886\n2373      14021    2886\n2666      14309    2886\n4274      14029    2886\n546       10369    2887\n1761      10501    2887\n2175      10361    2887\n1782      10171    2888\n1824      10179    2888\n3189      10389    2888\n3209      10359    2888\n3216      10351    2888\n1155      13181    2890\n1785      13209    2890\n4552      09139    2890\n4814      13189    2890\n5137      09131    2890\n3458      40229    2892\n3463      40221    2892\n774       40259    2895\n818       40251    2895\n3704      56051    2900\n1866      57059    2904\n523       57061    2905\n657       57069    2905\n1092      58399    2908\n2333      58391    2908\n3851      58029    2908\n3852      58021    2908\n4179      58011    2908\n1864      58331    2909\n1887      58491    2909\n2297      58339    2909\n2597      58481    2909\n3528      58489    2909\n4352      58499    2909\n630       58189    2910\n1909      58171    2910\n2227      58179    2910\n1099      14019    2916\n1312      14101    2916\n2197      14109    2916\n3694      14011    2916\n3366      14381    2917\n4468      14389    2917\n4118      10379    2918\n4435      10371    2918\n476       10231    2919\n1493      10519    2919\n1746      10249    2919\n2099      10381    2919\n4184      13051    2919\n5134      13059    2919\n593       13179    2920\n1441      13171    2920\n2315      13169    2920\n287       09191    2921\n1119      09169    2921\n3800      09159    2921\n964       40219    2922\n2611      40211    2922\n4195      40209    2922\n4917      40201    2922\n943       40231    2923\n3459      40081    2923\n3460      40239    2923\n3464      40089    2923\n4757      53071    2928\n2716      56011    2929\n184       56039    2930\n3822      56031    2930\n1206      56059    2931\n1661      59011    2933\n2033      59019    2933\n904       59559    2936\n1035      57071    2936\n1541      57079    2936\n4366      59551    2936\n322       57111    2937\n1221      57129    2937\n2125      57119    2937\n2292      57121    2937\n44        58019    2938\n540       57131    2938\n752       57139    2938\n148       58039    2939\n149       58031    2939\n338       58031    2939\n666       58049    2939\n2055      58041    2939\n2939      58261    2939\n2940      58269    2939\n972       14089    2948\n1032      14239    2948\n1144      14081    2948\n1526      14229    2948\n1989      14231    2948\n4550      14221    2948\n581       10069    2949\n1008      10071    2949\n1426      10079    2949\n2551      10061    2949\n1074      10161    2950\n2314      10169    2950\n4987      10151    2950\n2049      13069    2951\n2304      13062    2951\n4486      13063    2951\n893       09121    2952\n1467      09111    2952\n3462      13199    2952\n3467      13191    2952\n2523      40071    2954\n2719      40079    2954\n4449      40249    2955\n212       40261    2957\n3984      40269    2957\n440       53061    2959\n1252      53069    2959\n313       53091    2960\n380       53089    2960\n1014      53081    2960\n5081      53099    2960\n2715      56029    2961\n5160      56021    2961\n211       56041    2962\n3764      56049    2962\n1340      55281    2964\n3779      55289    2964\n362       57081    2968\n782       59309    2968\n1363      59111    2968\n1651      59301    2968\n2179      59119    2968\n2650      59511    2968\n3826      57089    2968\n1486      59121    2969\n1561      59129    2969\n4032      59279    2969\n4547      59271    2969\n1581      58541    2970\n1591      58549    2970\n1458      58051    2971\n2417      58509    2971\n3197      58501    2971\n3204      58059    2971\n3347      58069    2971\n602       58191    2972\n642       58199    2972\n2261      58181    2972\n1600      10391    2979\n3130      10399    2979\n4311      10121    2980\n4991      10129    2980\n797       10239    2981\n2303      06131    2981\n4458      10229    2981\n5019      10221    2981\n1300      13159    2982\n4738      13141    2982\n1093      09213    2983\n1885      09179    2983\n2151      09212    2983\n2894      40191    2984\n2895      40199    2984\n3157      53059    2989\n3158      53041    2989\n352       53079    2990\n1107      53361    2990\n2592      53369    2990\n3057      53351    2990\n3061      53359    2990\n1572      56019    2991\n1593      56261    2991\n4540      56289    2991\n570       56191    2992\n3850      56199    2992\n4043      59021    2996\n4342      59029    2996\n4720      59041    2997\n937       59331    2998\n1695      59089    2998\n2147      59081    2998\n3091      59549    2998\n3423      59541    2998\n1293      59139    2999\n2439      59131    2999\n2460      59149    2999\n2584      59269    3000\n4615      59529    3000\n4634      59521    3000\n2879      58519    3001\n2880      58511    3001\n2881      58529    3001\n2882      58521    3001\n3365      58619    3001\n3374      58601    3001\n3377      58611    3001\n4994      58609    3001\n156       58201    3002\n3605      58209    3002\n1620      14071    3010\n1535      10051    3011\n3985      10059    3011\n1457      06081    3012\n2513      10141    3012\n2542      06069    3012\n4265      10149    3012\n4726      06071    3012\n941       13121    3013\n974       13139    3013\n1338      13119    3013\n3277      13079    3013\n4262      13071    3013\n126       09011    3014\n622       09022    3014\n3958      09048    3014\n3972      09047    3014\n4428      09023    3014\n3603      40111    3016\n4201      40119    3016\n4549      40069    3016\n187       51099    3017\n3818      51091    3017\n2347      51111    3019\n4546      51119    3019\n1111      56269    3022\n2478      54069    3022\n3051      05349    3022\n3070      53341    3022\n4159      54061    3022\n1403      56241    3023\n4710      56249    3023\n1673      56201    3024\n2476      56209    3024\n1444      55371    3025\n3629      55271    3026\n2477      59031    3028\n2695      59721    3028\n2696      59729    3028\n4351      59039    3028\n4943      59499    3028\n474       59321    3029\n475       59561    3029\n481       59329    3029\n865       59051    3029\n1519      59059    3029\n4769      59569    3029\n948       59079    3030\n1859      59311    3030\n2960      59319    3030\n3193      59141    3030\n4070      59671    3030\n357       59251    3031\n3679      59261    3031\n4007      59109    3031\n4008      59101    3031\n4488      59259    3031\n2883      58531    3032\n2885      58539    3032\n2884      58061    3033\n2690      10039    3041\n2701      10499    3041\n3534      10049    3041\n3535      10041    3041\n1272      06051    3042\n5041      06049    3042\n832       06141    3043\n3705      06149    3043\n4842      06129    3043\n77        09059    3044\n2529      09219    3045\n2059      40051    3046\n895       51059    3049\n233       53189    3051\n720       53291    3051\n1843      53171    3051\n3155      53049    3051\n3156      53041    3051\n3159      53179    3051\n836       53331    3052\n2186      53339    3052\n4097      54211    3053\n4456      54219    3053\n4997      54181    3053\n4998      54189    3053\n5046      54161    3053\n5147      54169    3053\n1816      56259    3054\n1957      55121    3054\n2185      56251    3054\n4617      55129    3054\n3446      55341    3055\n3449      55349    3055\n882       55279    3056\n1344      55269    3056\n3842      55261    3056\n892       59049    3059\n2444      59421    3059\n2446      59429    3059\n2512      59481    3059\n707       59061    3060\n1882      59339    3060\n2148      59361    3060\n2394      59069    3060\n2792      58991    3060\n3731      59691    3060\n4321      59699    3060\n4815      59619    3060\n4816      59611    3060\n3192      59159    3061\n3198      59091    3061\n3199      59099    3061\n4044      59072    3061\n955       59221    3062\n5009      59229    3062\n5036      59219    3062\n3368      58621    3063\n3699      58071    3064\n4121      58079    3064\n1610      14061    3072\n5103      14069    3072\n1459      10021    3073\n1933      10011    3073\n3154      10017    3073\n3325      06011    3073\n3466      10018    3073\n839       06151    3074\n1394      06031    3074\n1424      06039    3074\n2566      06159    3074\n244       13091    3075\n1346      13099    3075\n4496      13081    3075\n5067      13089    3075\n1251      09037    3076\n2374      09038    3076\n1025      40171    3077\n3482      40189    3077\n3678      40179    3077\n3803      40181    3077\n1038      40059    3078\n849       51101    3079\n2131      51109    3079\n667       51049    3080\n1062      51051    3080\n1690      51041    3080\n65        51069    3081\n3380      51089    3081\n3470      51071    3081\n3471      51079    3081\n3472      51071    3081\n4469      51081    3081\n717       53039    3082\n728       53299    3082\n2673      53129    3082\n3224      53021    3082\n3225      53029    3082\n4357      53121    3082\n554       53191    3083\n2130      53181    3083\n4277      53199    3083\n4119      54629    3084\n4134      54621    3084\n3144      54199    3085\n4999      54191    3085\n2069      55141    3086\n3444      55011    3086\n3450      55019    3086\n4168      55149    3086\n33        55351    3087\n646       55361    3087\n1973      55331    3087\n4320      55381    3087\n4992      55339    3087\n2907      59509    3090\n4751      59501    3090\n467       59379    3091\n1643      59431    3091\n1925      59369    3091\n2095      59371    3091\n3185      59073    3092\n3195      59169    3092\n3332      59161    3092\n4015      59669    3092\n4317      59661    3092\n1551      59241    3093\n1890      59231    3093\n5017      59239    3093\n1253      58099    3096\n1530      58089    3096\n1964      58081    3096\n471       05519    3103\n1637      05521    3103\n4069      05431    3103\n4169      05631    3103\n3099      06029    3104\n3331      05012    3104\n965       13211    3105\n1999      06161    3105\n2309      06169    3105\n39        08137    3106\n45        08111    3106\n3329      08121    3106\n1436      40121    3108\n2200      40129    3108\n3903      40041    3108\n4684      40039    3108\n4930      40049    3108\n1218      50049    3109\n4864      50031    3109\n5044      50041    3109\n92        51029    3110\n1330      51039    3110\n3836      51019    3110\n4430      51031    3110\n4446      51021    3110\n701       52249    3111\n3096      52211    3111\n3426      52219    3111\n3429      52551    3111\n3440      52559    3111\n4878      52241    3111\n348       53019    3112\n508       51131    3112\n1897      51139    3112\n2050      53111    3112\n3107      53319    3112\n3108      53311    3112\n4698      53011    3112\n4744      53119    3112\n653       53139    3113\n4109      53131    3113\n2334      53201    3114\n4459      53209    3114\n4724      53329    3114\n4725      53321    3114\n557       54229    3115\n2534      54231    3115\n3680      54221    3115\n62        54201    3116\n858       55139    3116\n1533      55119    3116\n1844      55111    3116\n2145      54209    3116\n2208      54459    3116\n2454      54451    3116\n5074      55131    3116\n180       55159    3117\n2209      55021    3117\n4470      55029    3117\n4551      55151    3117\n517       55251    3118\n1010      55259    3118\n174       59441    3121\n477       59439    3121\n594       59449    3121\n723       59349    3122\n1235      59341    3122\n3727      59701    3122\n4021      59709    3122\n4362      59281    3122\n178       59179    3123\n675       59249    3123\n862       59171    3123\n2074      59381    3123\n989       59201    3124\n1698      59211    3124\n4809      59209    3124\n1665      58091    3127\n504       05629    3134\n515       05641    3134\n3531      05649    3134\n3799      05651    3134\n1102      05421    3135\n2150      05241    3135\n3135      05271    3135\n3136      05259    3135\n3328      05069    3135\n3338      05019    3135\n4176      05239    3135\n1045      06189    3136\n3884      06171    3136\n1064      13101    3137\n1197      13109    3137\n2552      08019    3137\n4481      04311    3137\n2086      08138    3138\n175       40031    3139\n3805      40021    3139\n4919      40029    3139\n887       50069    3140\n1260      50038    3140\n3399      50061    3140\n5083      50021    3140\n52        50059    3141\n393       50169    3141\n916       50051    3141\n1532      51011    3141\n2036      50161    3141\n1842      52139    3142\n347       53159    3145\n1552      53141    3145\n1877      53149    3145\n4936      53151    3145\n502       54011    3146\n2708      54019    3146\n4658      54611    3146\n5020      54619    3146\n1334      55181    3148\n3200      55199    3148\n3207      55169    3148\n4095      55189    3148\n592       55031    3149\n877       55249    3149\n1539      55241    3149\n1658      55039    3149\n2774      59731    3152\n2775      59739    3152\n411       59299    3153\n1145      59289    3153\n1154      59291    3153\n2776      59761    3153\n3173      59579    3153\n3400      59711    3153\n4534      59571    3153\n1002      59459    3154\n1059      59351    3154\n2349      59359    3154\n4604      59651    3154\n1192      59199    3155\n3936      59191    3155\n4031      59189    3155\n5138      59181    3155\n1106      05419    3165\n1764      05411    3165\n2244      05429    3165\n2414      03223    3165\n2699      03241    3165\n3129      03222    3165\n1669      05131    3166\n2245      05049    3166\n3137      05269    3166\n3687      05039    3166\n4424      05189    3166\n4772      05013    3166\n3028      04321    3167\n3029      04329    3167\n3542      04339    3167\n435       08057    3168\n3794      08011    3168\n4473      08058    3168\n4676      08031    3168\n1997      50029    3170\n1994      50037    3171\n1322      52071    3172\n1788      52079    3172\n4290      52131    3172\n57        52141    3173\n74        52149    3173\n722       52159    3173\n1216      52169    3173\n4068      52151    3173\n3273      52011    3174\n3274      52019    3174\n2331      53161    3176\n2467      53169    3176\n4167      53371    3176\n4612      53379    3176\n160       54031    3177\n1634      54039    3177\n2431      54248    3177\n3190      54241    3177\n3986      54239    3177\n98        54059    3178\n1202      54259    3178\n2714      55209    3178\n3074      54469    3178\n3075      54461    3178\n3087      55201    3178\n3666      54051    3178\n4404      54251    3178\n399       55301    3179\n613       55179    3179\n724       55309    3179\n1528      55219    3179\n1982      55171    3179\n3913      55211    3179\n3235      55041    3180\n2697      59741    3183\n2765      59759    3183\n2766      59751    3183\n2767      59749    3183\n2978      59719    3183\n395       59411    3184\n1714      59639    3184\n1829      59419    3184\n3170      59631    3184\n4281      59451    3184\n446       59389    3185\n561       59399    3185\n1049      59649    3185\n1291      59391    3185\n2783      59621    3185\n4017      59641    3185\n2388      03219    3196\n2484      03211    3196\n533       03111    3197\n4110      03151    3197\n851       05059    3198\n1011      05029    3198\n1668      05023    3198\n2246      05129    3198\n3848      04239    3198\n3849      04222    3198\n5082      05022    3198\n16        50011    3201\n3484      40101    3201\n3816      40109    3201\n3962      40279    3201\n4204      40271    3201\n4472      50019    3201\n1570      50111    3202\n4836      50119    3202\n1962      50171    3203\n2107      52471    3203\n2337      50179    3203\n3215      52479    3203\n4630      50189    3203\n732       52199    3204\n1307      52181    3204\n1463      52191    3204\n3276      52231    3204\n3748      52008    3204\n3749      52009    3204\n3797      52189    3204\n511       52029    3205\n4410      52179    3205\n4444      52161    3205\n5050      52171    3205\n3688      53231    3206\n4259      53239    3206\n4356      53309    3206\n4371      53301    3206\n1377      53389    3207\n4535      53381    3207\n1998      54079    3208\n4061      54071    3208\n2617      54041    3209\n3069      54341    3209\n4397      54049    3209\n4463      54349    3209\n51        55509    3210\n1689      55329    3210\n567       55221    3211\n1098      55229    3211\n3233      55049    3211\n1836      59581    3215\n2694      59589    3215\n928       59409    3216\n2634      59401    3216\n463       03239    3227\n2284      03217    3227\n4996      03218    3227\n537       03021    3228\n1693      05319    3228\n2652      03031    3228\n2854      03041    3228\n5029      05199    3228\n24        04149    3229\n518       04251    3229\n1984      04229    3229\n2365      04223    3229\n4066      04249    3229\n4302      04219    3229\n4303      04211    3229\n1018      07509    3230\n3567      08079    3230\n4439      08041    3230\n4583      04019    3230\n4584      08069    3230\n2013      40019    3231\n2490      40011    3231\n1263      50079    3232\n3268      50321    3232\n4228      50071    3232\n4707      50351    3232\n689       52501    3234\n1404      52509    3234\n470       52271    3235\n820       52201    3235\n1256      52229    3235\n1374      52221    3235\n2561      52209    3235\n4542      52279    3235\n177       53211    3236\n340       53219    3236\n551       53401    3236\n1353      53221    3236\n1553      52021    3236\n1891      53419    3236\n205       53391    3237\n1086      53399    3237\n4129      53249    3237\n838       54091    3238\n1416      54081    3238\n3994      54089    3238\n768       54247    3239\n1616      54339    3239\n2262      54391    3239\n3476      54261    3239\n4426      54009    3239\n4771      54399    3239\n1364      54351    3240\n1538      55321    3240\n5072      54359    3240\n32        55231    3241\n536       55311    3241\n541       55319    3241\n1215      55239    3241\n1696      55009    3241\n4058      55059    3242\n4286      55051    3242\n1732      59461    3246\n4330      59469    3246\n3568      59809    3247\n4101      59801    3247\n764       03529    3259\n1619      03071    3259\n2206      03059    3259\n3649      03129    3259\n2376      05009    3260\n5091      02181    3260\n5093      02011    3260\n704       04142    3261\n975       04143    3261\n1159      04179    3261\n1854      04167    3261\n2018      04121    3261\n3987      04159    3261\n4438      04111    3261\n4701      04151    3261\n2021      07021    3262\n2272      07571    3262\n2274      07518    3262\n2276      07517    3262\n3890      07539    3262\n4414      07011    3262\n4521      07531    3262\n535       50121    3264\n2554      50129    3264\n4678      50089    3264\n4679      50081    3264\n577       52409    3265\n1664      50201    3265\n2196      50199    3265\n3506      52401    3265\n4326      50191    3265\n191       52269    3266\n410       52251    3266\n845       52261    3266\n2174      52259    3266\n4759      52239    3266\n3291      52031    3267\n3293      52449    3267\n3297      52441    3267\n4776      52039    3267\n304       53229    3268\n1060      53009    3268\n572       54531    3269\n2015      54539    3269\n4140      53241    3269\n251       54321    3270\n2031      54331    3270\n4365      54329    3270\n1201      54409    3271\n1328      54441    3271\n1783      54449    3271\n3196      54401    3271\n2692      59471    3277\n2693      59479    3277\n1239      59591    3278\n1995      59601    3278\n2324      59599    3278\n2448      59609    3278\n3601      59811    3278\n3726      59819    3278\n3131      03569    3289\n3132      03561    3289\n760       03381    3290\n817       03011    3290\n4825      03019    3290\n608       02031    3291\n1750      02119    3291\n2119      04168    3291\n3271      02029    3291\n5092      02111    3291\n87        01013    3292\n289       01119    3292\n293       01112    3292\n459       01019    3292\n1335      01012    3292\n2072      04029    3292\n2874      07569    3292\n5149      07561    3292\n4562      07031    3293\n5078      07111    3293\n730       50301    3294\n3970      50279    3294\n4086      50261    3294\n317       50211    3295\n1498      50159    3295\n1654      50209    3295\n4672      50229    3295\n4673      50221    3295\n506       52411    3296\n2350      52321    3296\n2387      52419    3296\n3711      52329    3296\n301       52439    3297\n914       52291    3297\n2259      52299    3297\n3292      52369    3297\n3298      52539    3297\n3301      52361    3297\n3304      52359    3297\n3305      52351    3297\n311       53409    3298\n345       53289    3298\n2080      53251    3298\n2163      53259    3298\n4142      53281    3298\n785       53269    3299\n911       53261    3299\n744       54099    3300\n2184      54319    3300\n3918      54311    3300\n556       54271    3301\n3519      54269    3301\n3921      54279    3301\n808       54479    3302\n1341      54471    3302\n4057      55079    3304\n4986      55071    3304\n172       59789    3308\n294       59781    3308\n2789      59771    3308\n2818      59779    3308\n3604      59791    3308\n879       03391    3321\n4010      03539    3321\n559       01639    3323\n1213      80151    3323\n2711      01611    3323\n3371      01631    3323\n3533      01619    3323\n4063      01029    3323\n4741      02049    3323\n1342      07589    3324\n2070      07529    3324\n2504      07551    3324\n2995      01113    3324\n2996      01059    3324\n4254      01559    3324\n4266      01109    3324\n497       07231    3325\n4024      50251    3325\n4318      50259    3325\n962       50331    3326\n1188      50239    3326\n2604      50231    3326\n3683      50249    3326\n4558      50241    3326\n1397      52499    3327\n1858      52099    3327\n3829      52451    3327\n472       52281    3328\n747       52289    3328\n1091      52319    3328\n1518      52349    3328\n1978      52341    3328\n2920      52309    3328\n2923      52301    3328\n2924      52339    3328\n2925      52331    3328\n5154      52311    3328\n3299      52529    3329\n3302      52051    3329\n3303      52059    3329\n4963      52371    3329\n519       53271    3330\n3510      53279    3330\n367       54109    3331\n1057      54609    3331\n3920      54101    3331\n4261      54369    3331\n4857      54601    3331\n4343      54381    3332\n4556      54389    3332\n8         54411    3333\n321       54571    3333\n727       54589    3333\n942       54419    3333\n1427      54489    3333\n4461      54579    3333\n4632      54439    3333\n4297      68171    3340\n4298      68179    3340\n3915      03421    3350\n4036      03339    3351\n4822      03519    3352\n4823      03511    3352\n218       02151    3353\n545       02061    3353\n2251      02089    3353\n3847      02051    3353\n427       01039    3354\n898       01621    3354\n1067      01629    3354\n1419      01139    3354\n1781      01511    3354\n2258      01549    3354\n3924      01541    3354\n4970      01519    3354\n4347      07331    3355\n5108      07419    3355\n1721      07241    3356\n1961      07221    3356\n2533      07249    3356\n3259      07211    3356\n284       50991    3357\n2773      52059    3358\n25        52429    3359\n261       52389    3359\n401       52391    3359\n1447      52399    3359\n1979      52381    3359\n6         66191    3362\n2224      66201    3362\n3286      54371    3362\n3503      54379    3362\n841       54291    3363\n1157      54281    3363\n1308      54429    3363\n1602      54299    3363\n3574      54581    3363\n4700      54289    3363\n78        54481    3364\n1039      55089    3366\n4394      55081    3366\n1163      03501    3384\n953       02149    3385\n1082      02141    3385\n1140      80159    3385\n1172      02169    3385\n1912      02159    3385\n116       01239    3386\n603       01129    3386\n868       01521    3386\n881       01231    3386\n956       01229    3386\n1646      01121    3386\n2290      01529    3386\n870       07329    3387\n1687      07319    3387\n3956      07361    3387\n3206      60199    3388\n3401      60101    3388\n4270      60191    3388\n4405      50349    3388\n1343      52129    3389\n2772      52049    3389\n5153      52109    3389\n586       52481    3390\n2577      52489    3390\n3294      52061    3391\n3300      52069    3391\n1041      66011    3392\n4054      66029    3392\n5158      66021    3392\n4455      66181    3393\n247       66211    3394\n3988      66291    3394\n3953      55109    3397\n3954      55101    3397\n4296      68121    3399\n4596      68129    3399\n1179      03341    3413\n4037      03331    3413\n4627      03349    3413\n4821      03509    3414\n635       02171    3415\n1139      02101    3415\n1259      02099    3415\n1797      02161    3415\n2160      80169    3416\n2286      80161    3416\n1757      01211    3417\n2950      01319    3417\n3396      01311    3417\n3948      01339    3417\n4875      01329    3417\n4876      01219    3417\n4916      01341    3417\n2700      07351    3418\n2865      60019    3418\n2867      07359    3418\n2868      60011    3418\n3507      60099    3418\n444       60121    3419\n1837      60141    3419\n3202      60241    3419\n4314      60249    3419\n5001      60251    3419\n434       52089    3420\n4902      52081    3420\n1073      66061    3422\n2257      66069    3422\n4345      66019    3422\n2103      66099    3423\n2586      66091    3423\n4252      66171    3424\n1725      66221    3425\n2161      54301    3425\n3184      66231    3425\n4659      54309    3425\n529       54491    3426\n1537      54599    3426\n1896      54509    3426\n2794      54501    3426\n3706      54499    3426\n4291      54591    3426\n4670      68161    3430\n4671      68169    3430\n48        68131    3431\n458       68139    3431\n3168      68149    3431\n54        03411    3444\n179       03419    3444\n181       01429    3448\n2948      01411    3448\n3689      01419    3448\n4004      01421    3448\n3230      07369    3449\n3949      07371    3449\n5087      07379    3449\n3935      60029    3450\n4255      60119    3450\n5010      60021    3450\n4155      60161    3451\n115       61101    3452\n1048      61089    3452\n1078      61079    3452\n1969      61009    3452\n860       66401    3454\n1069      66409    3454\n1124      66399    3454\n3827      66391    3454\n2712      66271    3456\n4647      66261    3456\n750       54641    3457\n939       54529    3457\n2102      66341    3457\n3012      54511    3457\n3013      54519    3457\n3919      54521    3457\n1546      67021    3459\n2544      67011    3459\n4245      67019    3459\n4826      67029    3459\n1805      68101    3461\n4300      68109    3461\n3146      68141    3463\n844       90079    3478\n3502      01349    3479\n220       60059    3480\n3390      60051    3480\n2005      60139    3481\n2612      60159    3481\n525       60201    3482\n1388      60089    3482\n2079      60261    3482\n2516      60209    3482\n2521      61099    3482\n3517      60081    3482\n469       66071    3484\n1740      66031    3485\n2278      66361    3485\n2302      66369    3485\n3624      66039    3485\n520       66161    3486\n1635      66121    3486\n2602      66151    3486\n2606      66129    3486\n296       66251    3487\n629       66241    3487\n4763      66349    3487\n1104      54631    3488\n4480      54659    3488\n4702      54651    3488\n1597      67091    3490\n4213      68089    3492\n1929      68159    3494\n4396      68151    3494\n2436      03369    3507\n4735      03371    3507\n2065      90011    3509\n2522      90019    3509\n429       80011    3511\n3981      80029    3511\n371       60039    3512\n400       60071    3513\n1582      60181    3513\n2668      60179    3513\n3382      60079    3513\n2242      61069    3514\n3772      61011    3514\n4325      61019    3514\n4386      61061    3514\n598       66089    3515\n925       61049    3515\n2124      66081    3515\n2637      61041    3515\n3663      66079    3515\n329       66389    3516\n507       66381    3516\n3561      66411    3516\n4104      66419    3516\n1205      66049    3517\n1209      66041    3517\n2646      66119    3517\n3768      66111    3517\n3389      66139    3518\n3186      66599    3519\n5123      66331    3519\n236       66451    3520\n69        67659    3521\n1568      67049    3521\n1908      67039    3521\n3152      67041    3521\n3632      67089    3521\n3713      67081    3521\n4912      67651    3521\n4216      68081    3523\n135       90021    3540\n1271      90029    3540\n188       80101    3542\n3940      80319    3542\n3944      80311    3542\n4872      80109    3542\n445       60031    3543\n793       60229    3543\n2590      60069    3543\n5014      60221    3543\n110       60219    3544\n1784      60211    3544\n2243      60269    3544\n1659      61029    3545\n3320      61021    3545\n3322      61039    3545\n3337      61031    3545\n1021      62111    3546\n1738      62119    3546\n3280      62121    3546\n4874      62129    3546\n627       66371    3547\n3831      66059    3547\n4717      66379    3547\n281       66149    3548\n1870      63181    3548\n2164      66131    3548\n4730      66141    3548\n1182      66339    3549\n1449      66309    3549\n3595      66301    3549\n252       66511    3550\n3179      66509    3550\n3422      66459    3550\n3425      66461    3550\n3441      66519    3550\n883       68011    3552\n1596      67099    3552\n3052      67999    3552\n3760      68021    3552\n3761      68029    3552\n4499      68019    3552\n238       68059    3553\n489       68111    3553\n1321      68091    3553\n1954      68119    3553\n2024      68051    3553\n2656      68099    3553\n1191      68201    3554\n3752      68091    3554\n3753      68099    3554\n4377      68061    3554\n5071      68069    3554\n173       80199    3572\n194       80051    3573\n275       80031    3573\n1586      80009    3573\n3982      80039    3573\n4871      80049    3573\n4888      80111    3573\n3941      80291    3574\n3942      80309    3574\n3945      80299    3574\n4958      80301    3574\n210       70349    3575\n2413      70341    3575\n3572      70361    3575\n3596      70359    3575\n3307      61111    3576\n5066      61119    3576\n55        62109    3577\n4332      62101    3577\n1534      62179    3578\n1563      66009    3578\n2120      62139    3578\n2351      66359    3578\n3214      66351    3578\n4181      62131    3578\n4711      62171    3578\n4760      62189    3578\n826       66051    3579\n1855      63369    3579\n2112      63161    3579\n2132      63169    3579\n4126      63361    3579\n1790      63201    3580\n1927      66329    3580\n2713      66321    3580\n4161      63209    3580\n4307      63191    3580\n4674      63199    3580\n585       66101    3581\n1189      66429    3581\n1284      66431    3581\n1439      66439    3581\n2002      66539    3581\n3702      66421    3581\n3832      66529    3581\n4903      66521    3581\n770       67059    3583\n903       67051    3583\n3514      67281    3583\n4589      67499    3583\n4648      67289    3583\n781       68031    3584\n821       67741    3584\n1362      68049    3584\n1791      68039    3584\n3055      67991    3584\n3932      67571    3584\n4177      67579    3584\n829       68239    3586\n3361      68209    3586\n1246      90039    3602\n3951      80179    3602\n4333      90031    3602\n5043      80191    3602\n4886      80211    3603\n4887      80219    3603\n354       80071    3604\n740       70329    3605\n1671      60061    3605\n1686      70321    3605\n413       70111    3606\n4392      70109    3606\n5040      70119    3606\n5086      70101    3606\n3867      70061    3607\n3868      70069    3607\n18        62099    3608\n633       62091    3608\n2271      62161    3608\n3933      62159    3608\n4756      62151    3608\n4762      62169    3608\n1290      63149    3609\n1361      63019    3609\n2929      62141    3609\n3242      62149    3609\n3582      63141    3609\n4162      63159    3609\n4655      63151    3609\n1640      63179    3610\n2710      63189    3610\n1706      66109    3611\n1762      63219    3611\n3050      63211    3611\n3701      66319    3611\n4107      66311    3611\n766       64111    3612\n1131      64119    3612\n1789      66531    3612\n3525      66471    3612\n3526      66479    3612\n1981      67061    3613\n4337      67069    3613\n1622      67489    3614\n2034      67631    3614\n2452      67639    3614\n3448      67481    3614\n3581      67491    3614\n3950      80171    3634\n309       80251    3635\n512       80069    3635\n792       80259    3635\n4889      80119    3635\n2025      80229    3636\n2636      80231    3636\n3375      80249    3636\n699       70041    3638\n923       70051    3638\n1931      70049    3638\n4879      70059    3638\n532       62071    3639\n4765      62081    3639\n4766      62089    3639\n4829      62079    3639\n776       62059    3640\n4301      62051    3640\n588       64491    3643\n1786      64109    3643\n1801      64509    3643\n1831      64499    3643\n5002      64101    3643\n61        64121    3644\n131       64129    3644\n152       66581    3644\n498       66589    3644\n2385      66481    3644\n2524      67079    3644\n3721      66611    3644\n3725      66619    3644\n4683      67071    3644\n2985      67701    3646\n4442      67561    3646\n4541      67569    3646\n1267      90059    3664\n1667      90061    3664\n2603      90051    3664\n189       80149    3665\n310       80141    3665\n3628      80189    3665\n4391      80181    3665\n800       80091    3666\n1707      81231    3666\n3145      80289    3666\n3938      80269    3666\n3943      80089    3666\n2001      70311    3667\n2063      70319    3667\n3359      70019    3667\n3360      70011    3667\n2066      70121    3668\n4642      70129    3668\n4913      70039    3668\n4967      70031    3668\n1169      62039    3670\n1278      62031    3670\n1516      62041    3670\n2217      62219    3671\n2859      63011    3671\n134       63389    3673\n1499      63319    3673\n2068      63321    3673\n2595      63311    3673\n3707      63399    3673\n4368      63329    3673\n4850      63391    3673\n291       64489    3674\n1408      66489    3674\n1747      64091    3674\n2819      64099    3674\n2820      64251    3674\n2821      64089    3674\n2822      64081    3674\n3776      64481    3674\n1775      66579    3675\n3344      66601    3675\n3345      66571    3675\n3346      66609    3675\n129       67479    3676\n3452      67471    3676\n3014      91091    3696\n326       81169    3697\n5055      81161    3697\n2233      80239    3698\n2465      81099    3698\n3946      81089    3698\n3947      81081    3698\n4164      81209    3698\n4440      81201    3698\n5085      81091    3698\n1004      70151    3699\n3353      70029    3699\n3355      70241    3699\n3439      70021    3699\n5111      70161    3699\n5112      70231    3699\n5030      70139    3700\n2660      62021    3701\n2845      62011    3701\n2846      62019    3701\n2847      62029    3701\n2864      62069    3701\n2872      62061    3701\n1590      62229    3702\n1612      62049    3702\n1917      62221    3702\n2856      63029    3703\n2858      63021    3703\n277       63381    3705\n771       64479    3705\n1148      64471    3705\n3573      64519    3705\n258       66499    3706\n495       66569    3706\n1270      66491    3706\n1489      66559    3706\n1490      66561    3706\n2943      66551    3706\n5011      66541    3706\n5024      66549    3706\n2574      67329    3707\n1592      67559    3708\n3226      67551    3708\n4034      91081    3726\n4035      91089    3726\n4464      90069    3726\n35        80271    3727\n227       80279    3727\n3925      81171    3727\n4590      81179    3727\n162       81011    3728\n1657      81029    3728\n1755      81031    3728\n3362      70211    3729\n1071      70171    3730\n4767      70309    3731\n4768      70301    3731\n3231      63309    3733\n3285      63301    3733\n1181      63039    3734\n4613      63031    3734\n719       63371    3735\n1061      63339    3735\n1878      63331    3735\n1907      63379    3735\n273       64611    3736\n1162      64609    3736\n2366      64601    3736\n4092      64259    3736\n5059      64619    3736\n168       67321    3738\n3952      91099    3758\n4173      91041    3758\n5150      91049    3758\n3910      81151    3759\n3911      81159    3759\n2437      81219    3760\n3746      81211    3760\n568       70191    3761\n1733      70181    3761\n2299      70381    3761\n2500      70221    3761\n1976      70289    3762\n3067      70281    3762\n3101      70141    3762\n3427      70149    3762\n4474      70131    3762\n320       63269    3765\n971       63229    3765\n2853      63221    3765\n3473      63231    3765\n3474      63239    3765\n4979      63051    3766\n650       64419    3767\n1510      64339    3767\n1924      64411    3767\n2283      64331    3767\n4125      64351    3767\n4180      64349    3767\n4249      64341    3767\n250       64449    3768\n419       64441    3768\n1017      64461    3768\n1756      64469    3768\n3053      64621    3768\n3054      64629    3768\n456       67309    3769\n1047      65809    3769\n1087      65801    3769\n1862      67301    3769\n23        67319    3770\n2085      67549    3770\n2441      67541    3770\n2723      67761    3770\n2760      67769    3770\n283       91051    3788\n649       91151    3788\n886       91161    3788\n3819      91059    3788\n2189      81189    3789\n4268      81181    3789\n816       81069    3790\n1571      81049    3790\n4165      81109    3791\n5099      70201    3791\n616       70091    3792\n1856      70261    3792\n1974      70271    3792\n1975      70279    3792\n2113      70269    3792\n2380      70099    3792\n100       70291    3793\n1876      70299    3793\n933       62239    3794\n2410      62231    3794\n2517      62249    3794\n4316      62241    3794\n360       63091    3795\n1381      63299    3795\n1503      63099    3795\n2610      63291    3795\n4452      63281    3795\n4650      63289    3795\n625       63139    3796\n1301      63261    3796\n1515      63131    3796\n1642      63041    3796\n4752      63049    3796\n29        63359    3797\n392       64521    3797\n550       64529    3797\n1872      63351    3797\n2514      63341    3797\n3191      64391    3797\n3201      64559    3797\n3205      64399    3797\n4548      64551    3797\n4961      63349    3797\n1133      64431    3798\n1137      64361    3798\n1536      64439    3798\n2348      64561    3798\n3627      64369    3798\n4108      64359    3798\n587       67461    3799\n1576      67459    3799\n1618      67451    3799\n3414      67469    3799\n3719      67291    3799\n3720      67299    3799\n2926      67369    3800\n2967      67381    3800\n3317      67389    3800\n3564      67589    3800\n4038      67379    3800\n4039      67371    3800\n4387      67361    3800\n4595      67581    3800\n3001      67691    3801\n3002      67699    3801\n4156      91111    3819\n103       81199    3821\n4003      81149    3821\n4047      81141    3821\n4932      81191    3821\n447       81051    3822\n934       81229    3822\n1089      81129    3822\n1113      81221    3822\n1939      81119    3822\n3505      81111    3822\n122       71169    3823\n2255      71161    3823\n3433      70259    3823\n4248      70251    3823\n4792      71221    3823\n4794      71229    3823\n5100      70379    3823\n5101      70371    3823\n3009      71171    3824\n3011      71179    3824\n4136      71011    3824\n3674      71059    3825\n4042      71051    3825\n140       63109    3826\n2496      63101    3826\n272       63081    3827\n2429      63089    3827\n3056      63271    3827\n4639      63279    3827\n1083      63241    3828\n1237      63061    3828\n1972      63249    3828\n3668      63069    3828\n4978      63059    3828\n241       64371    3829\n1450      64549    3829\n2169      64379    3829\n4353      64389    3829\n4770      64381    3829\n3256      67629    3830\n4215      67621    3830\n2048      67279    3831\n2279      67351    3831\n4666      67271    3831\n5090      67359    3831\n27        67311    3832\n2968      67391    3832\n2970      67421    3832\n2971      64729    3832\n2999      67641    3832\n3000      67649    3832\n4982      67429    3832\n449       65551    3833\n1227      65559    3833\n3391      65541    3833\n3431      65549    3833\n918       91131    3850\n2463      91061    3850\n2628      91069    3850\n1512      82079    3851\n1959      82071    3851\n514       82099    3852\n1036      81131    3852\n1050      82091    3852\n1118      82109    3852\n2645      82029    3852\n2762      82111    3852\n3830      82231    3852\n4652      82119    3852\n4896      81139    3852\n773       81101    3853\n921       70089    3854\n1808      71151    3854\n269       71021    3855\n3781      71029    3855\n4305      71069    3855\n4306      71061    3855\n3750      62259    3856\n2624      64209    3858\n3774      64201    3858\n4293      63079    3858\n4640      63071    3858\n576       64011    3859\n796       64041    3859\n897       64009    3859\n4062      64019    3859\n4644      64541    3859\n5016      64249    3859\n350       64579    3860\n2142      64031    3860\n2419      64039    3860\n5022      64571    3860\n101       67601    3861\n307       67331    3861\n697       67261    3861\n1621      67269    3861\n1794      67609    3861\n3413      67339    3861\n374       67449    3862\n2969      67399    3862\n3626      67441    3862\n3914      67401    3862\n4882      67419    3862\n4883      67411    3862\n2754      65531    3863\n2755      65539    3863\n3870      65449    3864\n3871      65441    3864\n305       91101    3881\n36        82059    3882\n143       92169    3882\n423       91071    3882\n2670      92161    3882\n5135      91079    3882\n398       82121    3883\n1446      82129    3883\n1509      82089    3883\n2456      82081    3883\n2505      82032    3884\n3434      82011    3884\n3621      71159    3885\n4795      71219    3885\n4797      71211    3885\n4798      71201    3885\n4800      71209    3885\n1692      70081    3886\n733       64239    3890\n1185      64231    3890\n1550      64241    3890\n759       64429    3891\n1402      64421    3891\n1506      64051    3891\n756       65011    3892\n1007      65019    3892\n3245      67719    3892\n4501      67711    3892\n159       67341    3893\n634       67209    3893\n857       67191    3893\n1096      67189    3893\n1406      67201    3893\n1867      67199    3893\n2319      67619    3893\n3570      67611    3893\n4381      67349    3893\n578       67439    3894\n3409      67431    3894\n5053      67591    3894\n5064      67599    3894\n5095      67421    3894\n1766      65149    3895\n1771      65141    3895\n2685      65499    3895\n3005      65491    3895\n3064      65339    3895\n3856      65579    3895\n3857      65571    3895\n2684      65451    3896\n213       91121    3912\n1146      82051    3912\n3828      92261    3912\n4636      82049    3914\n225       71149    3916\n1375      71141    3916\n3031      70409    3916\n3032      70401    3916\n3784      71129    3916\n4231      71121    3916\n237       71071    3917\n951       71079    3917\n4915      71031    3917\n555       71049    3918\n2643      71189    3918\n4271      71041    3918\n2440      73019    3919\n2298      64219    3920\n2871      64211    3920\n1289      64049    3921\n2019      64319    3921\n2972      64301    3921\n5052      64311    3921\n104       64029    3922\n1606      64079    3922\n1730      64021    3922\n2004      64071    3922\n4013      62271    3922\n4693      67721    3922\n786       65021    3923\n2372      67219    3923\n2458      67179    3923\n3443      67211    3923\n2330      67241    3924\n2580      67009    3924\n2949      67759    3924\n3095      67181    3924\n3912      67409    3924\n4338      67249    3924\n4378      67101    3924\n3065      65331    3925\n3278      65439    3925\n4680      65431    3925\n583       65601    3926\n590       65609    3926\n3339      65459    3926\n4689      65401    3926\n3592      65641    3927\n2250      92101    3944\n2654      92091    3944\n3840      92099    3944\n4059      92249    3944\n4349      92241    3944\n4492      92109    3944\n794       82141    3945\n2320      82149    3945\n3900      82131    3945\n4000      82139    3945\n664       82009    3946\n751       82221    3946\n2035      82221    3946\n3608      82229    3946\n4388      82033    3946\n4561      82061    3946\n224       71111    3947\n4793      71119    3947\n90        70071    3948\n387       71089    3948\n521       70079    3948\n4745      71081    3948\n4517      71191    3949\n5146      71181    3949\n1022      73041    3950\n3676      73049    3950\n2973      64309    3952\n438       64059    3953\n547       64069    3953\n4045      64321    3953\n4709      64329    3953\n3062      67161    3954\n3364      67169    3954\n4429      67739    3954\n4498      67729    3954\n4586      67731    3954\n1830      65031    3955\n2061      65039    3955\n2375      65049    3955\n2408      65041    3955\n2421      67109    3955\n4247      67171    3955\n2123      67251    3956\n4373      67259    3956\n734       65251    3957\n3751      65009    3957\n4554      65409    3957\n4686      65341    3957\n4687      65349    3957\n1229      65611    3958\n1230      65619    3958\n2937      65469    3958\n3160      65671    3958\n3163      65679    3958\n1187      92179    3975\n1792      92111    3975\n2205      92171    3975\n3681      92119    3975\n1065      82151    3976\n3675      82171    3976\n5021      82159    3976\n5088      82179    3976\n70        71101    3978\n1306      71099    3978\n2842      71139    3978\n3554      71131    3978\n4564      71091    3978\n4801      71109    3978\n932       71291    3979\n935       71299    3979\n3033      71331    3979\n3034      71339    3979\n222       64221    3982\n378       64229    3982\n4174      64131    3982\n166       62251    3984\n848       64409    3984\n2237      62251    3984\n4374      64401    3984\n5006      64061    3984\n1266      67151    3985\n1607      67141    3985\n1675      67509    3985\n1734      67159    3985\n1935      67501    3985\n2588      65029    3985\n113       65059    3986\n2273      67111    3986\n2455      67231    3986\n2509      67239    3986\n3735      65061    3986\n4051      65069    3986\n3551      65209    3987\n4160      65201    3987\n3253      65461    3988\n1233      65629    3989\n1236      65621    3989\n4968      65651    3989\n217       92041    4006\n582       92049    4006\n2594      92189    4006\n185       83029    4008\n4563      83101    4008\n4873      82069    4008\n1412      72011    4009\n3880      72059    4010\n4516      72051    4010\n4587      62261    4015\n748       67121    4017\n780       67119    4017\n815       67139    4017\n878       67129    4017\n2215      67131    4017\n3318      67531    4017\n3319      67539    4017\n1803      65079    4018\n2959      65191    4018\n3619      65199    4018\n4697      65071    4018\n531       65219    4019\n1277      65229    4019\n1280      65221    4019\n2863      65359    4019\n2869      65351    4019\n3175      65099    4019\n4433      65259    4019\n4494      65091    4019\n4966      65661    4021\n1214      92251    4036\n761       92129    4037\n1850      92051    4037\n3275      92181    4037\n4157      92121    4037\n527       83319    4038\n1020      83299    4038\n1430      83169    4038\n1967      83159    4038\n2445      83291    4038\n4163      83151    4038\n4284      82181    4038\n5104      83311    4038\n1028      83109    4039\n4841      83119    4039\n5012      83111    4039\n3147      72019    4040\n4574      72029    4040\n4581      72021    4040\n2947      72139    4041\n1079      64139    4044\n1578      67511    4047\n4626      67519    4047\n3454      67671    4048\n4124      67221    4048\n4139      67229    4048\n1629      65151    4049\n2115      65159    4049\n2391      65289    4049\n2632      65281    4049\n3773      65089    4049\n4309      65241    4049\n4313      65249    4049\n4754      65081    4049\n2687      65481    4050\n2688      65489    4050\n3323      65109    4050\n3336      65101    4050\n1238      65631    4051\n1240      65639    4051\n3602      65681    4051\n4964      65689    4051\n524       92059    4068\n3097      92201    4069\n3777      83301    4069\n3996      83309    4069\n4443      92209    4069\n1147      83049    4070\n1823      83149    4070\n2499      83131    4070\n2651      83011    4070\n3249      83031    4070\n4099      83141    4070\n1656      83341    4071\n2608      72081    4072\n2609      72089    4072\n4576      72049    4072\n4577      72041    4072\n4578      72039    4072\n4579      72031    4072\n30        64141    4076\n4178      64159    4076\n5065      64149    4076\n2418      64161    4077\n89        67661    4079\n300       67521    4079\n2415      67529    4079\n414       65161    4080\n1653      65169    4080\n698       65309    4081\n3358      65301    4081\n1366      65119    4082\n2462      65111    4082\n4339      65139    4083\n855       92131    4099\n859       92139    4099\n1952      92061    4099\n2326      92069    4099\n3508      92301    4099\n3583      92279    4099\n4146      92309    4099\n4350      92271    4099\n31        83139    4100\n2479      83129    4100\n4748      83121    4100\n487       83321    4101\n1716      83331    4101\n3243      83062    4101\n4447      83329    4101\n3557      72071    4102\n3600      72079    4102\n4580      72061    4102\n4582      72069    4102\n349       84701    4103\n2944      72149    4103\n2945      72141    4103\n2946      72131    4103\n4575      84709    4103\n4027      64151    4107\n4941      64169    4107\n1299      64189    4108\n1477      64181    4108\n2607      65171    4110\n3693      65179    4110\n83        65271    4111\n407       65319    4111\n485       65311    4111\n2744      65381    4111\n2745      65389    4111\n3442      65411    4111\n3521      65279    4111\n1070      65129    4113\n1579      92191    4130\n3023      92231    4130\n3025      92239    4130\n4445      92289    4130\n884       92151    4131\n2071      92149    4131\n4471      92141    4131\n441       83191    4132\n988       83201    4132\n1712      83059    4132\n1932      83079    4132\n2527      83209    4132\n2367      83361    4133\n3149      83351    4133\n4335      83381    4133\n4901      83371    4133\n1371      84501    4134\n1906      84511    4134\n2008      84491    4134\n2557      84499    4134\n3039      72151    4135\n3041      72159    4135\n3609      64179    4139\n4747      64171    4139\n3085      64191    4140\n1628      65269    4142\n1904      65261    4142\n2935      65429    4142\n3248      65399    4143\n3257      65391    4143\n34        92089    4161\n428       92081    4161\n2976      92219    4161\n2977      92229    4161\n3020      92071    4161\n3021      92221    4161\n3022      92211    4161\n3024      92079    4161\n2508      83081    4163\n3238      83063    4163\n4884      84489    4165\n4885      84481    4165\n3084      64199    4170\n1385      65239    4172\n2280      65231    4172\n549       65321    4173\n873       65329    4173\n2936      65419    4173\n3237      65371    4173\n3246      65379    4173\n1040      93189    4192\n4681      92199    4192\n4682      93181    4192\n299       93059    4193\n442       93051    4193\n2384      92159    4193\n376       83099    4194\n1080      83199    4194\n2370      83189    4194\n4289      83181    4194\n2097      84579    4195\n3106      84571    4195\n1507      84459    4196\n4511      84539    4196\n5131      84451    4196\n3040      72161    4197\n3042      72169    4197\n3077      74019    4201\n3079      74011    4201\n3076      73029    4202\n3081      73021    4202\n647       65189    4204\n2997      65561    4204\n2998      65569    4204\n3241      65181    4204\n4122      93011    4223\n4855      93019    4223\n1228      93101    4224\n1559      83171    4224\n1799      93109    4224\n2009      93111    4224\n2596      83229    4224\n4804      83219    4224\n4853      83179    4224\n108       84011    4225\n1980      84019    4225\n2930      84589    4225\n2931      84581    4225\n833       84561    4226\n4891      84569    4226\n290       84479    4227\n674       84471    4227\n1265      84469    4227\n1819      84461    4227\n3078      74021    4231\n3080      74029    4231\n3082      73031    4232\n3083      73039    4232\n3869      75391    4232\n3296      93179    4254\n819       93129    4255\n3228      93121    4255\n3611      93069    4255\n4790      93061    4255\n510       83239    4256\n569       83251    4256\n607       83269    4256\n908       83261    4256\n1088      83231    4256\n2793      83279    4256\n5007      83249    4256\n834       84551    4257\n1793      84559    4257\n1869      84549    4257\n2127      84641    4257\n2327      84649    4257\n2157      84391    4258\n2614      93169    4285\n3295      93171    4285\n3593      93021    4285\n4785      93199    4285\n5037      93029    4285\n465       93071    4286\n854       93079    4286\n2230      93119    4286\n22        84029    4287\n259       84021    4287\n193       84369    4288\n573       84371    4288\n880       84361    4288\n984       84311    4288\n1947      84381    4288\n2192      84379    4288\n589       84621    4289\n2539      84629    4289\n3311      74031    4293\n694       93039    4317\n906       93031    4317\n2275      93201    4317\n1434      83271    4318\n2045      83281    4318\n1680      84541    4319\n3754      84008    4319\n4728      84309    4319\n4732      84301    4319\n21        84409    4320\n480       84411    4320\n4244      84401    4320\n4851      84419    4320\n983       75031    4322\n985       75021    4322\n1152      75039    4322\n2870      75259    4322\n2990      75401    4322\n2991      75409    4322\n4304      75251    4322\n2988      75411    4323\n3308      74051    4324\n3309      74059    4324\n3310      74039    4324\n1491      75381    4325\n919       93159    4347\n2295      93161    4347\n2709      93149    4347\n63        93089    4348\n670       93091    4348\n4904      93099    4348\n5004      93081    4348\n823       84031    4349\n927       84139    4349\n1916      84131    4349\n3755      84009    4349\n4877      84039    4349\n336       84321    4350\n496       84329    4350\n1323      84339    4350\n1478      84429    4350\n2547      84421    4350\n3671      84319    4350\n4651      84331    4350\n382       84619    4351\n2264      84639    4351\n2379      84609    4351\n3922      84611    4351\n4324      84601    4351\n4533      84631    4351\n4914      75249    4352\n994       75151    4353\n1522      75159    4353\n2989      75419    4353\n245       75291    4354\n1474      75299    4354\n1928      75361    4355\n3018      75369    4355\n3058      74041    4355\n3059      74049    4355\n1484      93041    4379\n3931      93049    4379\n479       84159    4380\n2037      84129    4380\n2194      84121    4380\n3844      84091    4381\n1505      84449    4382\n46        75201    4384\n651       75101    4384\n1332      75241    4384\n1413      75109    4384\n1577      75089    4384\n2047      75219    4384\n1055      75379    4385\n2105      75141    4385\n2515      75371    4385\n3762      75179    4385\n3763      75171    4385\n4605      75149    4385\n553       75319    4386\n2992      75469    4386\n2993      75461    4386\n4633      75311    4386\n2146      75351    4387\n2154      75359    4387\n1913      93151    4409\n737       93139    4410\n789       94011    4410\n1485      94019    4410\n1545      93131    4410\n2369      84151    4410\n1492      84161    4411\n2383      84049    4411\n2942      84169    4411\n654       84211    4412\n1739      84529    4412\n2300      84219    4412\n2474      84349    4412\n3026      84351    4412\n3027      84359    4412\n4423      84341    4412\n4890      84229    4412\n4972      84521    4412\n4973      84221    4412\n888       75349    4413\n1084      75341    4413\n2873      84201    4413\n3066      84209    4413\n1261      75221    4414\n1573      75231    4414\n1832      75239    4414\n4845      75099    4414\n209       75169    4415\n1031      75209    4415\n2032      75161    4415\n2567      75111    4415\n276       75501    4416\n286       75509    4416\n2725      75279    4416\n2761      75289    4416\n3589      75281    4416\n4417      75271    4416\n678       77281    4418\n2007      77331    4418\n2680      77169    4418\n2975      77291    4418\n3279      77339    4418\n825       84111    4442\n1273      84119    4442\n1309      84191    4443\n3575      84199    4443\n4098      84041    4443\n390       75061    4445\n645       75069    4445\n1414      75081    4446\n2447      75071    4446\n3045      76049    4446\n3262      75079    4446\n3306      76041    4446\n5126      76129    4446\n5127      76121    4446\n1043      75339    4447\n1376      75131    4447\n1726      75139    4447\n1777      75329    4447\n2006      75261    4447\n4041      75269    4447\n3088      75481    4448\n3089      75511    4448\n3090      75519    4448\n3714      75499    4448\n3730      75491    4448\n3732      75488    4448\n2057      77301    4449\n195       77251    4450\n869       77261    4450\n1888      77279    4450\n2096      77269    4450\n4606      77289    4450\n4907      77271    4450\n215       94029    4472\n4128      94021    4472\n4667      94039    4472\n1883      84089    4473\n2358      84149    4473\n3578      84141    4473\n1243      84241    4474\n1264      84239    4474\n2093      84231    4474\n4623      84249    4474\n490       75229    4476\n5096      76281    4476\n5097      76289    4476\n5125      75059    4476\n5128      75051    4476\n3312      75129    4477\n3532      75121    4477\n2721      76519    4478\n2759      76541    4478\n3046      76511    4478\n4050      75479    4478\n4055      75471    4478\n249       77221    4480\n314       77249    4480\n1713      77319    4480\n1879      77161    4480\n2270      77311    4480\n2681      77231    4480\n4022      77239    4480\n127       77259    4481\n4185      84081    4504\n1548      84069    4505\n1983      84281    4505\n2228      84051    4505\n3625      84061    4505\n4704      84289    4505\n1399      84259    4506\n1494      84251    4506\n2190      84269    4506\n3820      84261    4506\n3313      76119    4508\n3316      76111    4508\n3648      76069    4508\n4981      76061    4508\n1198      75019    4509\n3047      76529    4509\n3223      76521    4509\n3571      75569    4510\n3579      75559    4510\n4631      75561    4510\n2218      77309    4511\n3068      77241    4511\n3171      78049    4511\n4147      77061    4511\n4395      77189    4511\n4398      77069    4511\n4567      77011    4511\n946       77089    4512\n1095      77219    4512\n1963      77211    4512\n3928      77081    4512\n67        94049    4534\n959       94089    4534\n4668      94031    4534\n4908      94041    4534\n1365      84071    4535\n1418      84079    4535\n4559      84101    4535\n4560      84109    4535\n604       84271    4537\n2355      84279    4537\n1320      75009    4539\n1728      75008    4539\n1938      76131    4539\n2416      76139    4539\n3314      76059    4539\n3315      76051    4539\n4497      76559    4539\n4791      76551    4539\n3576      75571    4540\n3577      75579    4540\n3560      75541    4541\n4620      75549    4541\n754       77079    4542\n961       77209    4542\n1345      77201    4542\n1814      77181    4542\n4052      77071    4542\n2981      77129    4543\n431       84661    4566\n874       84679    4566\n2616      84671    4566\n3703      94051    4566\n4425      84669    4566\n3650      85099    4567\n3651      85091    4567\n746       85081    4568\n1636      76071    4570\n1851      76079    4570\n373       76191    4571\n867       76399    4571\n3416      76199    4571\n4046      76209    4571\n4621      76391    4571\n3664      75551    4572\n2346      77139    4573\n2381      77021    4573\n3250      77141    4573\n3263      77029    4573\n3708      77019    4573\n38        77099    4574\n1245      77111    4574\n2182      77119    4574\n4409      77091    4574\n1468      84681    4597\n1892      84691    4597\n712       85061    4598\n930       85059    4598\n2046      85069    4598\n3771      85051    4598\n1105      84591    4599\n2106      84599    4599\n2195      84299    4599\n5110      96289    4599\n5122      96281    4599\n3341      76339    4600\n4830      76329    4600\n417       76151    4601\n1965      76149    4601\n2108      76161    4601\n2553      76159    4601\n3415      76141    4601\n4431      76169    4601\n1483      77341    4603\n2537      77381    4603\n2540      77389    4603\n4868      77349    4603\n5080      77031    4603\n154       77131    4604\n377       77199    4604\n4269      77191    4604\n1765      94099    4627\n1210      94061    4628\n1923      94069    4628\n2064      94059    4628\n1719      85049    4629\n4127      85041    4629\n359       84431    4630\n1970      85079    4630\n4489      84439    4630\n4637      85071    4630\n5089      85089    4630\n643       96159    4631\n2427      96151    4631\n5120      96251    4631\n5121      96259    4631\n265       76179    4632\n772       76081    4632\n1440      76291    4632\n1826      76089    4632\n5023      76171    4632\n745       76201    4633\n1283      76471    4633\n4585      76219    4633\n4662      76211    4633\n494       77179    4635\n1257      77008    4635\n1387      77009    4635\n1694      77321    4635\n3100      77371    4635\n3234      77379    4635\n3255      77329    4635\n3261      77329    4635\n4773      77171    4635\n4870      77039    4635\n1915      77101    4636\n4742      77109    4636\n2141      85039    4659\n3930      85029    4659\n130       85101    4660\n957       85109    4660\n1821      96011    4660\n4646      96019    4660\n1501      96109    4661\n2641      96101    4661\n1953      96141    4662\n3282      96149    4662\n1574      76401    4663\n3111      76181    4663\n3112      76189    4663\n3700      76409    4663\n591       76361    4664\n1248      76389    4664\n1848      76351    4664\n2056      76359    4664\n4555      76369    4664\n315       77369    4665\n1594      77361    4665\n1806      77041    4665\n3892      77359    4665\n4123      77351    4665\n4869      77049    4665\n260       94009    4690\n4383      94079    4690\n4843      94071    4690\n565       85031    4691\n1383      96029    4692\n1556      96071    4692\n2171      96111    4692\n3244      96079    4692\n3251      96119    4692\n680       96169    4693\n1085      96171    4693\n2667      96161    4693\n4803      96179    4693\n1708      76099    4694\n2332      76091    4694\n4411      76301    4694\n53        76319    4695\n2581      76371    4695\n3102      76311    4695\n4660      76221    4695\n4661      76229    4695\n448       78109    4697\n1623      78089    4697\n2481      78101    4697\n5025      78081    4697\n778       85021    4721\n2167      85019    4721\n2600      96221    4722\n4493      96229    4722\n4         96081    4723\n2343      96089    4723\n4865      96091    4723\n4953      96099    4723\n10        96139    4724\n615       96131    4724\n1164      96121    4724\n2052      96129    4724\n2382      96189    4724\n2555      96181    4724\n3267      96269    4724\n3838      96261    4724\n1811      76419    4725\n2662      76101    4725\n3043      76031    4725\n3044      76039    4725\n3110      76411    4725\n4898      76109    4725\n2016      76349    4726\n2087      76261    4726\n2543      76271    4726\n2908      76279    4726\n3113      76341    4726\n4182      76269    4726\n206       78071    4727\n324       78069    4727\n1285      78179    4727\n1354      78079    4727\n2568      77059    4727\n3287      78061    4727\n4138      78171    4727\n4618      77051    4727\n827       78119    4728\n1517      78091    4728\n3240      78099    4728\n4802      78111    4728\n3264      96319    4754\n3265      96319    4754\n3990      96021    4754\n4217      96311    4754\n4863      96039    4754\n4947      96031    4754\n2181      96191    4755\n2569      96199    4755\n3035      96201    4755\n3036      96209    4755\n3381      96299    4755\n4375      96291    4755\n2165      76459    4756\n695       76461    4757\n1971      76251    4757\n3114      76259    4757\n3392      76241    4757\n3398      76249    4757\n3845      76469    4757\n4880      76231    4757\n4881      76239    4757\n1472      78189    4758\n2531      78181    4758\n133       78231    4759\n1350      78229    4759\n2486      78241    4759\n4273      78159    4759\n4622      78151    4759\n1807      96239    4784\n2291      96231    4784\n2951      95909    4785\n2952      95901    4785\n2954      96441    4785\n125       96061    4786\n2982      96051    4786\n3590      96069    4786\n229       76449    4787\n926       76431    4787\n929       76451    4787\n2301      76429    4787\n2404      76439    4787\n2698      76441    4787\n3769      76421    4787\n3673      98011    4788\n4977      98019    4788\n783       78161    4789\n1442      78209    4789\n3617      78211    4789\n4191      78169    4789\n4619      78201    4789\n1977      78269    4790\n3178      78261    4790\n3512      78251    4790\n3513      78259    4790\n2987      96389    4816\n3756      96381    4816\n3757      96301    4816\n3758      96309    4816\n2953      96449    4817\n2955      96041    4817\n2956      96049    4817\n2983      96059    4817\n1564      98291    4819\n43        98099    4820\n970       78219    4820\n997       98029    4820\n1051      78059    4820\n1475      78199    4820\n1604      78191    4820\n2289      98091    4820\n2857      98111    4820\n3218      98119    4820\n3586      78051    4820\n4976      98021    4820\n28        78221    4821\n155       78121    4821\n1101      78131    4821\n1405      78129    4821\n2412      78139    4821\n216       78279    4822\n4372      78271    4822\n375       96271    4846\n775       96321    4846\n4214      96331    4846\n4475      96249    4846\n4591      96329    4846\n75        96391    4847\n2932      96411    4847\n2994      96419    4847\n3037      96401    4847\n4218      96361    4847\n516       97169    4848\n2468      97161    4848\n1647      98299    4849\n2635      97011    4849\n4102      97019    4849\n617       98081    4850\n4334      98089    4850\n4503      98301    4850\n4588      98309    4850\n4723      97109    4850\n2852      98109    4851\n2860      98101    4851\n3212      78149    4851\n3219      78141    4851\n2626      96241    4877\n4299      96371    4878\n3038      97009    4879\n1123      97159    4880\n1745      97149    4880\n1748      97141    4880\n1898      97151    4880\n488       98311    4881\n2110      97049    4881\n2390      98319    4881\n3770      97041    4881\n232       98039    4882\n383       97101    4882\n875       97121    4882\n1103      97129    4882\n2328      98031    4882\n954       97189    4910\n1460      97179    4910\n1874      97171    4910\n3220      97301    4911\n4500      97031    4911\n5148      97039    4911\n271       97051    4912\n316       97119    4912\n784       97111    4912\n1886      97059    4912\n1336      98049    4913\n1809      98041    4913\n1417      98199    4915\n2536      96351    4940\n4592      96341    4940\n1359      97181    4942\n891       98059    4945\n1077      98121    4945\n1297      98139    4945\n1847      98131    4945\n2030      98051    4945\n2593      98231    4945\n4629      98129    4945\n4942      98239    4945\n896       98219    4946\n3937      98209    4946\n3403      97331    4973\n3580      97311    4973\n721       97201    4974\n2180      97209    4974\n3342      97321    4974\n226       98149    4976\n1190      98151    4976\n1934      98141    4976\n4432      98229    4976\n1211      98181    4977\n153       97069    5006\n1735      97061    5006\n1759      98069    5007\n2392      97099    5007\n4980      97091    5007\n1116      98161    5008\n2265      98171    5008\n5038      98071    5008\n842       99089    5009\n980       99081    5009\n1488      99071    5009\n37        97089    5037\n1937      97079    5037\n2038      97079    5037\n2039      97071    5037\n2371      97081    5037\n231       98079    5038\n2538      98061    5038\n1663      99011    5039\n1941      99029    5039\n1985      99019    5039\n4892      99021    5039\n1094      99091    5040\n2475      99099    5040\n121       95151    5065\n5119      95159    5065\n1295      99031    5071\n1487      99079    5071\n2323      99039    5071\n3667      99109    5071\n843       95209    5095\n835       95019    5096\n2450      95011    5096\n443       99101    5102\n614       99119    5102\n3622      99111    5102\n1454      95109    5129\n716       99041    5133\n803       99049    5133\n1423      99139    5133\n1722      99131    5133\n4427      99129    5133\n5028      99009    5133\n571       96219    5154\n1662      95129    5159\n3677      99189    5195\n4355      99181    5195\n4905      95079    5195\n709       95029    5222\n626       99171    5226\n562       95049    5255\n3544      95041    5255\n3637      95039    5255\n483       95089    5257\n595       95071    5257\n1676      99161    5257\n3071      96429    5278\n3072      96421    5278\n2067      95051    5286\n3853      95061    5286\n3854      95069    5286\n5061      95139    5287\n402       95141    5318\n560       95149    5318\n4315      95191    5318\n3906      95091    5319\n3968      95099    5319\n4113      95081    5319\n2248      95179    5348\n4504      95181    5348\n4594      95189    5348\n1524      95131    5349\n2207      95171    5379\n3494      95169    5379\n4225      95161    5379\n3063      96439    5558\n3073      96431    5558\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nst_intersection() is used to perform point and polygon overly and the output will be in point sf object.\nselect() of dplyr package is then use to retain only BUS_STOP_N and SUBZONE_C in the busstop_mpsz sf data frame.\nfive bus stops are excluded in the resultant data frame because they are outside of Singapore bpundary.\n\n\n\n\n\n(c) Append grid ID to odbus08\nNext, we are going to append the grid ID from hexlayer data frame onto odbus08 data frame.\n\norigin_grid &lt;- left_join(odbus08 , hexlayer,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;% \n  rename(ORIGIN_BS = ORIGIN_PT_CODE) %&gt;%\n  group_by(grid_id) %&gt;%\n  summarise(TOT_TRIPS = sum(TOTAL_TRIPS))\n\n\n\n(d) Duplicates Check\nBefore continue, it is a good practice for us to check for duplicating records.\n\nduplicate2 &lt;- origin_grid %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\nduplicate2\n\n# A tibble: 0 × 2\n# ℹ 2 variables: grid_id &lt;int&gt;, TOT_TRIPS &lt;dbl&gt;\n\n\nThe results show that there are no duplicates found."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#geospatial",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#geospatial",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "Geospatial",
    "text": "Geospatial"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#choropleth-visualisation",
    "href": "Take-Home_Ex/Take-Home_Ex1/Take-Home_Ex1.html#choropleth-visualisation",
    "title": "Take-home Exercise 1: Geospatial Analytics for Public Good",
    "section": "Choropleth Visualisation",
    "text": "Choropleth Visualisation"
  }
]